Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statement
Rule 3     statements -> statements statement
Rule 4     statement -> expression
Rule 5     statement -> flow_control
Rule 6     expression -> NUMBER
Rule 7     expression -> STRING
Rule 8     expression -> VARIABLE
Rule 9     expression -> special_expression
Rule 10    expression -> expression arithmetic_op expression
Rule 11    arithmetic_op -> PLUS
Rule 12    arithmetic_op -> MINUS
Rule 13    arithmetic_op -> TIMES
Rule 14    arithmetic_op -> DIVIDE
Rule 15    arithmetic_op -> MOD
Rule 16    arithmetic_op -> POWER
Rule 17    expression -> expression relational_op expression
Rule 18    relational_op -> EQUAL
Rule 19    relational_op -> LESS_THAN
Rule 20    relational_op -> GREATER_THAN
Rule 21    special_expression -> EXCLAMATION
Rule 22    special_expression -> AT
Rule 23    special_expression -> DOT
Rule 24    special_expression -> COLON
Rule 25    special_expression -> SEMICOLON
Rule 26    special_expression -> LEFT_PAREN
Rule 27    special_expression -> RIGHT_PAREN
Rule 28    flow_control -> if_statement
Rule 29    flow_control -> else_statement
Rule 30    flow_control -> while_loop
Rule 31    flow_control -> repeat_loop
Rule 32    flow_control -> exit_statement
Rule 33    flow_control -> drop_statement
Rule 34    flow_control -> dup_statement
Rule 35    flow_control -> swap_statement
Rule 36    flow_control -> rot_statement
Rule 37    flow_control -> over_statement
Rule 38    if_statement -> IF expression THEN
Rule 39    else_statement -> ELSE
Rule 40    while_loop -> WHILE expression DO statements LOOP
Rule 41    repeat_loop -> BEGIN statements WHILE expression REPEAT
Rule 42    exit_statement -> EXIT
Rule 43    drop_statement -> DROP
Rule 44    dup_statement -> DUP
Rule 45    swap_statement -> SWAP
Rule 46    rot_statement -> ROT
Rule 47    over_statement -> OVER

Terminals, with rules where they appear

AT                   : 22
BEGIN                : 41
COLON                : 24
DIVIDE               : 14
DO                   : 40
DOT                  : 23
DROP                 : 43
DUP                  : 44
ELSE                 : 39
EQUAL                : 18
EXCLAMATION          : 21
EXIT                 : 42
GREATER_THAN         : 20
IF                   : 38
LEFT_PAREN           : 26
LESS_THAN            : 19
LOOP                 : 40
MINUS                : 12
MOD                  : 15
NUMBER               : 6
OVER                 : 47
PLUS                 : 11
POWER                : 16
REPEAT               : 41
RIGHT_PAREN          : 27
ROT                  : 46
SEMICOLON            : 25
STRING               : 7
SWAP                 : 45
THEN                 : 38
TIMES                : 13
VARIABLE             : 8
WHILE                : 40 41
error                : 

Nonterminals, with rules where they appear

arithmetic_op        : 10
drop_statement       : 33
dup_statement        : 34
else_statement       : 29
exit_statement       : 32
expression           : 4 10 10 17 17 38 40 41
flow_control         : 5
if_statement         : 28
over_statement       : 37
program              : 0
relational_op        : 17
repeat_loop          : 31
rot_statement        : 36
special_expression   : 9
statement            : 2 3
statements           : 1 3 40 41
swap_statement       : 35
while_loop           : 30

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statement
    (3) statements -> . statements statement
    (4) statement -> . expression
    (5) statement -> . flow_control
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (8) expression -> . VARIABLE
    (9) expression -> . special_expression
    (10) expression -> . expression arithmetic_op expression
    (17) expression -> . expression relational_op expression
    (28) flow_control -> . if_statement
    (29) flow_control -> . else_statement
    (30) flow_control -> . while_loop
    (31) flow_control -> . repeat_loop
    (32) flow_control -> . exit_statement
    (33) flow_control -> . drop_statement
    (34) flow_control -> . dup_statement
    (35) flow_control -> . swap_statement
    (36) flow_control -> . rot_statement
    (37) flow_control -> . over_statement
    (21) special_expression -> . EXCLAMATION
    (22) special_expression -> . AT
    (23) special_expression -> . DOT
    (24) special_expression -> . COLON
    (25) special_expression -> . SEMICOLON
    (26) special_expression -> . LEFT_PAREN
    (27) special_expression -> . RIGHT_PAREN
    (38) if_statement -> . IF expression THEN
    (39) else_statement -> . ELSE
    (40) while_loop -> . WHILE expression DO statements LOOP
    (41) repeat_loop -> . BEGIN statements WHILE expression REPEAT
    (42) exit_statement -> . EXIT
    (43) drop_statement -> . DROP
    (44) dup_statement -> . DUP
    (45) swap_statement -> . SWAP
    (46) rot_statement -> . ROT
    (47) over_statement -> . OVER

    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    VARIABLE        shift and go to state 8
    EXCLAMATION     shift and go to state 20
    AT              shift and go to state 21
    DOT             shift and go to state 22
    COLON           shift and go to state 23
    SEMICOLON       shift and go to state 24
    LEFT_PAREN      shift and go to state 25
    RIGHT_PAREN     shift and go to state 26
    IF              shift and go to state 27
    ELSE            shift and go to state 28
    WHILE           shift and go to state 29
    BEGIN           shift and go to state 30
    EXIT            shift and go to state 31
    DROP            shift and go to state 32
    DUP             shift and go to state 33
    SWAP            shift and go to state 34
    ROT             shift and go to state 35
    OVER            shift and go to state 36

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    expression                     shift and go to state 4
    flow_control                   shift and go to state 5
    special_expression             shift and go to state 9
    if_statement                   shift and go to state 10
    else_statement                 shift and go to state 11
    while_loop                     shift and go to state 12
    repeat_loop                    shift and go to state 13
    exit_statement                 shift and go to state 14
    drop_statement                 shift and go to state 15
    dup_statement                  shift and go to state 16
    swap_statement                 shift and go to state 17
    rot_statement                  shift and go to state 18
    over_statement                 shift and go to state 19

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .
    (3) statements -> statements . statement
    (4) statement -> . expression
    (5) statement -> . flow_control
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (8) expression -> . VARIABLE
    (9) expression -> . special_expression
    (10) expression -> . expression arithmetic_op expression
    (17) expression -> . expression relational_op expression
    (28) flow_control -> . if_statement
    (29) flow_control -> . else_statement
    (30) flow_control -> . while_loop
    (31) flow_control -> . repeat_loop
    (32) flow_control -> . exit_statement
    (33) flow_control -> . drop_statement
    (34) flow_control -> . dup_statement
    (35) flow_control -> . swap_statement
    (36) flow_control -> . rot_statement
    (37) flow_control -> . over_statement
    (21) special_expression -> . EXCLAMATION
    (22) special_expression -> . AT
    (23) special_expression -> . DOT
    (24) special_expression -> . COLON
    (25) special_expression -> . SEMICOLON
    (26) special_expression -> . LEFT_PAREN
    (27) special_expression -> . RIGHT_PAREN
    (38) if_statement -> . IF expression THEN
    (39) else_statement -> . ELSE
    (40) while_loop -> . WHILE expression DO statements LOOP
    (41) repeat_loop -> . BEGIN statements WHILE expression REPEAT
    (42) exit_statement -> . EXIT
    (43) drop_statement -> . DROP
    (44) dup_statement -> . DUP
    (45) swap_statement -> . SWAP
    (46) rot_statement -> . ROT
    (47) over_statement -> . OVER

    $end            reduce using rule 1 (program -> statements .)
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    VARIABLE        shift and go to state 8
    EXCLAMATION     shift and go to state 20
    AT              shift and go to state 21
    DOT             shift and go to state 22
    COLON           shift and go to state 23
    SEMICOLON       shift and go to state 24
    LEFT_PAREN      shift and go to state 25
    RIGHT_PAREN     shift and go to state 26
    IF              shift and go to state 27
    ELSE            shift and go to state 28
    WHILE           shift and go to state 29
    BEGIN           shift and go to state 30
    EXIT            shift and go to state 31
    DROP            shift and go to state 32
    DUP             shift and go to state 33
    SWAP            shift and go to state 34
    ROT             shift and go to state 35
    OVER            shift and go to state 36

    statement                      shift and go to state 37
    expression                     shift and go to state 4
    flow_control                   shift and go to state 5
    special_expression             shift and go to state 9
    if_statement                   shift and go to state 10
    else_statement                 shift and go to state 11
    while_loop                     shift and go to state 12
    repeat_loop                    shift and go to state 13
    exit_statement                 shift and go to state 14
    drop_statement                 shift and go to state 15
    dup_statement                  shift and go to state 16
    swap_statement                 shift and go to state 17
    rot_statement                  shift and go to state 18
    over_statement                 shift and go to state 19

state 3

    (2) statements -> statement .

    NUMBER          reduce using rule 2 (statements -> statement .)
    STRING          reduce using rule 2 (statements -> statement .)
    VARIABLE        reduce using rule 2 (statements -> statement .)
    EXCLAMATION     reduce using rule 2 (statements -> statement .)
    AT              reduce using rule 2 (statements -> statement .)
    DOT             reduce using rule 2 (statements -> statement .)
    COLON           reduce using rule 2 (statements -> statement .)
    SEMICOLON       reduce using rule 2 (statements -> statement .)
    LEFT_PAREN      reduce using rule 2 (statements -> statement .)
    RIGHT_PAREN     reduce using rule 2 (statements -> statement .)
    IF              reduce using rule 2 (statements -> statement .)
    ELSE            reduce using rule 2 (statements -> statement .)
    WHILE           reduce using rule 2 (statements -> statement .)
    BEGIN           reduce using rule 2 (statements -> statement .)
    EXIT            reduce using rule 2 (statements -> statement .)
    DROP            reduce using rule 2 (statements -> statement .)
    DUP             reduce using rule 2 (statements -> statement .)
    SWAP            reduce using rule 2 (statements -> statement .)
    ROT             reduce using rule 2 (statements -> statement .)
    OVER            reduce using rule 2 (statements -> statement .)
    $end            reduce using rule 2 (statements -> statement .)
    LOOP            reduce using rule 2 (statements -> statement .)


state 4

    (4) statement -> expression .
    (10) expression -> expression . arithmetic_op expression
    (17) expression -> expression . relational_op expression
    (11) arithmetic_op -> . PLUS
    (12) arithmetic_op -> . MINUS
    (13) arithmetic_op -> . TIMES
    (14) arithmetic_op -> . DIVIDE
    (15) arithmetic_op -> . MOD
    (16) arithmetic_op -> . POWER
    (18) relational_op -> . EQUAL
    (19) relational_op -> . LESS_THAN
    (20) relational_op -> . GREATER_THAN

    NUMBER          reduce using rule 4 (statement -> expression .)
    STRING          reduce using rule 4 (statement -> expression .)
    VARIABLE        reduce using rule 4 (statement -> expression .)
    EXCLAMATION     reduce using rule 4 (statement -> expression .)
    AT              reduce using rule 4 (statement -> expression .)
    DOT             reduce using rule 4 (statement -> expression .)
    COLON           reduce using rule 4 (statement -> expression .)
    SEMICOLON       reduce using rule 4 (statement -> expression .)
    LEFT_PAREN      reduce using rule 4 (statement -> expression .)
    RIGHT_PAREN     reduce using rule 4 (statement -> expression .)
    IF              reduce using rule 4 (statement -> expression .)
    ELSE            reduce using rule 4 (statement -> expression .)
    WHILE           reduce using rule 4 (statement -> expression .)
    BEGIN           reduce using rule 4 (statement -> expression .)
    EXIT            reduce using rule 4 (statement -> expression .)
    DROP            reduce using rule 4 (statement -> expression .)
    DUP             reduce using rule 4 (statement -> expression .)
    SWAP            reduce using rule 4 (statement -> expression .)
    ROT             reduce using rule 4 (statement -> expression .)
    OVER            reduce using rule 4 (statement -> expression .)
    $end            reduce using rule 4 (statement -> expression .)
    LOOP            reduce using rule 4 (statement -> expression .)
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    TIMES           shift and go to state 42
    DIVIDE          shift and go to state 43
    MOD             shift and go to state 44
    POWER           shift and go to state 45
    EQUAL           shift and go to state 46
    LESS_THAN       shift and go to state 47
    GREATER_THAN    shift and go to state 48

    arithmetic_op                  shift and go to state 38
    relational_op                  shift and go to state 39

state 5

    (5) statement -> flow_control .

    NUMBER          reduce using rule 5 (statement -> flow_control .)
    STRING          reduce using rule 5 (statement -> flow_control .)
    VARIABLE        reduce using rule 5 (statement -> flow_control .)
    EXCLAMATION     reduce using rule 5 (statement -> flow_control .)
    AT              reduce using rule 5 (statement -> flow_control .)
    DOT             reduce using rule 5 (statement -> flow_control .)
    COLON           reduce using rule 5 (statement -> flow_control .)
    SEMICOLON       reduce using rule 5 (statement -> flow_control .)
    LEFT_PAREN      reduce using rule 5 (statement -> flow_control .)
    RIGHT_PAREN     reduce using rule 5 (statement -> flow_control .)
    IF              reduce using rule 5 (statement -> flow_control .)
    ELSE            reduce using rule 5 (statement -> flow_control .)
    WHILE           reduce using rule 5 (statement -> flow_control .)
    BEGIN           reduce using rule 5 (statement -> flow_control .)
    EXIT            reduce using rule 5 (statement -> flow_control .)
    DROP            reduce using rule 5 (statement -> flow_control .)
    DUP             reduce using rule 5 (statement -> flow_control .)
    SWAP            reduce using rule 5 (statement -> flow_control .)
    ROT             reduce using rule 5 (statement -> flow_control .)
    OVER            reduce using rule 5 (statement -> flow_control .)
    $end            reduce using rule 5 (statement -> flow_control .)
    LOOP            reduce using rule 5 (statement -> flow_control .)


state 6

    (6) expression -> NUMBER .

    PLUS            reduce using rule 6 (expression -> NUMBER .)
    MINUS           reduce using rule 6 (expression -> NUMBER .)
    TIMES           reduce using rule 6 (expression -> NUMBER .)
    DIVIDE          reduce using rule 6 (expression -> NUMBER .)
    MOD             reduce using rule 6 (expression -> NUMBER .)
    POWER           reduce using rule 6 (expression -> NUMBER .)
    EQUAL           reduce using rule 6 (expression -> NUMBER .)
    LESS_THAN       reduce using rule 6 (expression -> NUMBER .)
    GREATER_THAN    reduce using rule 6 (expression -> NUMBER .)
    NUMBER          reduce using rule 6 (expression -> NUMBER .)
    STRING          reduce using rule 6 (expression -> NUMBER .)
    VARIABLE        reduce using rule 6 (expression -> NUMBER .)
    EXCLAMATION     reduce using rule 6 (expression -> NUMBER .)
    AT              reduce using rule 6 (expression -> NUMBER .)
    DOT             reduce using rule 6 (expression -> NUMBER .)
    COLON           reduce using rule 6 (expression -> NUMBER .)
    SEMICOLON       reduce using rule 6 (expression -> NUMBER .)
    LEFT_PAREN      reduce using rule 6 (expression -> NUMBER .)
    RIGHT_PAREN     reduce using rule 6 (expression -> NUMBER .)
    IF              reduce using rule 6 (expression -> NUMBER .)
    ELSE            reduce using rule 6 (expression -> NUMBER .)
    WHILE           reduce using rule 6 (expression -> NUMBER .)
    BEGIN           reduce using rule 6 (expression -> NUMBER .)
    EXIT            reduce using rule 6 (expression -> NUMBER .)
    DROP            reduce using rule 6 (expression -> NUMBER .)
    DUP             reduce using rule 6 (expression -> NUMBER .)
    SWAP            reduce using rule 6 (expression -> NUMBER .)
    ROT             reduce using rule 6 (expression -> NUMBER .)
    OVER            reduce using rule 6 (expression -> NUMBER .)
    $end            reduce using rule 6 (expression -> NUMBER .)
    THEN            reduce using rule 6 (expression -> NUMBER .)
    DO              reduce using rule 6 (expression -> NUMBER .)
    LOOP            reduce using rule 6 (expression -> NUMBER .)
    REPEAT          reduce using rule 6 (expression -> NUMBER .)


state 7

    (7) expression -> STRING .

    PLUS            reduce using rule 7 (expression -> STRING .)
    MINUS           reduce using rule 7 (expression -> STRING .)
    TIMES           reduce using rule 7 (expression -> STRING .)
    DIVIDE          reduce using rule 7 (expression -> STRING .)
    MOD             reduce using rule 7 (expression -> STRING .)
    POWER           reduce using rule 7 (expression -> STRING .)
    EQUAL           reduce using rule 7 (expression -> STRING .)
    LESS_THAN       reduce using rule 7 (expression -> STRING .)
    GREATER_THAN    reduce using rule 7 (expression -> STRING .)
    NUMBER          reduce using rule 7 (expression -> STRING .)
    STRING          reduce using rule 7 (expression -> STRING .)
    VARIABLE        reduce using rule 7 (expression -> STRING .)
    EXCLAMATION     reduce using rule 7 (expression -> STRING .)
    AT              reduce using rule 7 (expression -> STRING .)
    DOT             reduce using rule 7 (expression -> STRING .)
    COLON           reduce using rule 7 (expression -> STRING .)
    SEMICOLON       reduce using rule 7 (expression -> STRING .)
    LEFT_PAREN      reduce using rule 7 (expression -> STRING .)
    RIGHT_PAREN     reduce using rule 7 (expression -> STRING .)
    IF              reduce using rule 7 (expression -> STRING .)
    ELSE            reduce using rule 7 (expression -> STRING .)
    WHILE           reduce using rule 7 (expression -> STRING .)
    BEGIN           reduce using rule 7 (expression -> STRING .)
    EXIT            reduce using rule 7 (expression -> STRING .)
    DROP            reduce using rule 7 (expression -> STRING .)
    DUP             reduce using rule 7 (expression -> STRING .)
    SWAP            reduce using rule 7 (expression -> STRING .)
    ROT             reduce using rule 7 (expression -> STRING .)
    OVER            reduce using rule 7 (expression -> STRING .)
    $end            reduce using rule 7 (expression -> STRING .)
    THEN            reduce using rule 7 (expression -> STRING .)
    DO              reduce using rule 7 (expression -> STRING .)
    LOOP            reduce using rule 7 (expression -> STRING .)
    REPEAT          reduce using rule 7 (expression -> STRING .)


state 8

    (8) expression -> VARIABLE .

    PLUS            reduce using rule 8 (expression -> VARIABLE .)
    MINUS           reduce using rule 8 (expression -> VARIABLE .)
    TIMES           reduce using rule 8 (expression -> VARIABLE .)
    DIVIDE          reduce using rule 8 (expression -> VARIABLE .)
    MOD             reduce using rule 8 (expression -> VARIABLE .)
    POWER           reduce using rule 8 (expression -> VARIABLE .)
    EQUAL           reduce using rule 8 (expression -> VARIABLE .)
    LESS_THAN       reduce using rule 8 (expression -> VARIABLE .)
    GREATER_THAN    reduce using rule 8 (expression -> VARIABLE .)
    NUMBER          reduce using rule 8 (expression -> VARIABLE .)
    STRING          reduce using rule 8 (expression -> VARIABLE .)
    VARIABLE        reduce using rule 8 (expression -> VARIABLE .)
    EXCLAMATION     reduce using rule 8 (expression -> VARIABLE .)
    AT              reduce using rule 8 (expression -> VARIABLE .)
    DOT             reduce using rule 8 (expression -> VARIABLE .)
    COLON           reduce using rule 8 (expression -> VARIABLE .)
    SEMICOLON       reduce using rule 8 (expression -> VARIABLE .)
    LEFT_PAREN      reduce using rule 8 (expression -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 8 (expression -> VARIABLE .)
    IF              reduce using rule 8 (expression -> VARIABLE .)
    ELSE            reduce using rule 8 (expression -> VARIABLE .)
    WHILE           reduce using rule 8 (expression -> VARIABLE .)
    BEGIN           reduce using rule 8 (expression -> VARIABLE .)
    EXIT            reduce using rule 8 (expression -> VARIABLE .)
    DROP            reduce using rule 8 (expression -> VARIABLE .)
    DUP             reduce using rule 8 (expression -> VARIABLE .)
    SWAP            reduce using rule 8 (expression -> VARIABLE .)
    ROT             reduce using rule 8 (expression -> VARIABLE .)
    OVER            reduce using rule 8 (expression -> VARIABLE .)
    $end            reduce using rule 8 (expression -> VARIABLE .)
    THEN            reduce using rule 8 (expression -> VARIABLE .)
    DO              reduce using rule 8 (expression -> VARIABLE .)
    LOOP            reduce using rule 8 (expression -> VARIABLE .)
    REPEAT          reduce using rule 8 (expression -> VARIABLE .)


state 9

    (9) expression -> special_expression .

    PLUS            reduce using rule 9 (expression -> special_expression .)
    MINUS           reduce using rule 9 (expression -> special_expression .)
    TIMES           reduce using rule 9 (expression -> special_expression .)
    DIVIDE          reduce using rule 9 (expression -> special_expression .)
    MOD             reduce using rule 9 (expression -> special_expression .)
    POWER           reduce using rule 9 (expression -> special_expression .)
    EQUAL           reduce using rule 9 (expression -> special_expression .)
    LESS_THAN       reduce using rule 9 (expression -> special_expression .)
    GREATER_THAN    reduce using rule 9 (expression -> special_expression .)
    NUMBER          reduce using rule 9 (expression -> special_expression .)
    STRING          reduce using rule 9 (expression -> special_expression .)
    VARIABLE        reduce using rule 9 (expression -> special_expression .)
    EXCLAMATION     reduce using rule 9 (expression -> special_expression .)
    AT              reduce using rule 9 (expression -> special_expression .)
    DOT             reduce using rule 9 (expression -> special_expression .)
    COLON           reduce using rule 9 (expression -> special_expression .)
    SEMICOLON       reduce using rule 9 (expression -> special_expression .)
    LEFT_PAREN      reduce using rule 9 (expression -> special_expression .)
    RIGHT_PAREN     reduce using rule 9 (expression -> special_expression .)
    IF              reduce using rule 9 (expression -> special_expression .)
    ELSE            reduce using rule 9 (expression -> special_expression .)
    WHILE           reduce using rule 9 (expression -> special_expression .)
    BEGIN           reduce using rule 9 (expression -> special_expression .)
    EXIT            reduce using rule 9 (expression -> special_expression .)
    DROP            reduce using rule 9 (expression -> special_expression .)
    DUP             reduce using rule 9 (expression -> special_expression .)
    SWAP            reduce using rule 9 (expression -> special_expression .)
    ROT             reduce using rule 9 (expression -> special_expression .)
    OVER            reduce using rule 9 (expression -> special_expression .)
    $end            reduce using rule 9 (expression -> special_expression .)
    THEN            reduce using rule 9 (expression -> special_expression .)
    DO              reduce using rule 9 (expression -> special_expression .)
    LOOP            reduce using rule 9 (expression -> special_expression .)
    REPEAT          reduce using rule 9 (expression -> special_expression .)


state 10

    (28) flow_control -> if_statement .

    NUMBER          reduce using rule 28 (flow_control -> if_statement .)
    STRING          reduce using rule 28 (flow_control -> if_statement .)
    VARIABLE        reduce using rule 28 (flow_control -> if_statement .)
    EXCLAMATION     reduce using rule 28 (flow_control -> if_statement .)
    AT              reduce using rule 28 (flow_control -> if_statement .)
    DOT             reduce using rule 28 (flow_control -> if_statement .)
    COLON           reduce using rule 28 (flow_control -> if_statement .)
    SEMICOLON       reduce using rule 28 (flow_control -> if_statement .)
    LEFT_PAREN      reduce using rule 28 (flow_control -> if_statement .)
    RIGHT_PAREN     reduce using rule 28 (flow_control -> if_statement .)
    IF              reduce using rule 28 (flow_control -> if_statement .)
    ELSE            reduce using rule 28 (flow_control -> if_statement .)
    WHILE           reduce using rule 28 (flow_control -> if_statement .)
    BEGIN           reduce using rule 28 (flow_control -> if_statement .)
    EXIT            reduce using rule 28 (flow_control -> if_statement .)
    DROP            reduce using rule 28 (flow_control -> if_statement .)
    DUP             reduce using rule 28 (flow_control -> if_statement .)
    SWAP            reduce using rule 28 (flow_control -> if_statement .)
    ROT             reduce using rule 28 (flow_control -> if_statement .)
    OVER            reduce using rule 28 (flow_control -> if_statement .)
    $end            reduce using rule 28 (flow_control -> if_statement .)
    LOOP            reduce using rule 28 (flow_control -> if_statement .)


state 11

    (29) flow_control -> else_statement .

    NUMBER          reduce using rule 29 (flow_control -> else_statement .)
    STRING          reduce using rule 29 (flow_control -> else_statement .)
    VARIABLE        reduce using rule 29 (flow_control -> else_statement .)
    EXCLAMATION     reduce using rule 29 (flow_control -> else_statement .)
    AT              reduce using rule 29 (flow_control -> else_statement .)
    DOT             reduce using rule 29 (flow_control -> else_statement .)
    COLON           reduce using rule 29 (flow_control -> else_statement .)
    SEMICOLON       reduce using rule 29 (flow_control -> else_statement .)
    LEFT_PAREN      reduce using rule 29 (flow_control -> else_statement .)
    RIGHT_PAREN     reduce using rule 29 (flow_control -> else_statement .)
    IF              reduce using rule 29 (flow_control -> else_statement .)
    ELSE            reduce using rule 29 (flow_control -> else_statement .)
    WHILE           reduce using rule 29 (flow_control -> else_statement .)
    BEGIN           reduce using rule 29 (flow_control -> else_statement .)
    EXIT            reduce using rule 29 (flow_control -> else_statement .)
    DROP            reduce using rule 29 (flow_control -> else_statement .)
    DUP             reduce using rule 29 (flow_control -> else_statement .)
    SWAP            reduce using rule 29 (flow_control -> else_statement .)
    ROT             reduce using rule 29 (flow_control -> else_statement .)
    OVER            reduce using rule 29 (flow_control -> else_statement .)
    $end            reduce using rule 29 (flow_control -> else_statement .)
    LOOP            reduce using rule 29 (flow_control -> else_statement .)


state 12

    (30) flow_control -> while_loop .

    NUMBER          reduce using rule 30 (flow_control -> while_loop .)
    STRING          reduce using rule 30 (flow_control -> while_loop .)
    VARIABLE        reduce using rule 30 (flow_control -> while_loop .)
    EXCLAMATION     reduce using rule 30 (flow_control -> while_loop .)
    AT              reduce using rule 30 (flow_control -> while_loop .)
    DOT             reduce using rule 30 (flow_control -> while_loop .)
    COLON           reduce using rule 30 (flow_control -> while_loop .)
    SEMICOLON       reduce using rule 30 (flow_control -> while_loop .)
    LEFT_PAREN      reduce using rule 30 (flow_control -> while_loop .)
    RIGHT_PAREN     reduce using rule 30 (flow_control -> while_loop .)
    IF              reduce using rule 30 (flow_control -> while_loop .)
    ELSE            reduce using rule 30 (flow_control -> while_loop .)
    WHILE           reduce using rule 30 (flow_control -> while_loop .)
    BEGIN           reduce using rule 30 (flow_control -> while_loop .)
    EXIT            reduce using rule 30 (flow_control -> while_loop .)
    DROP            reduce using rule 30 (flow_control -> while_loop .)
    DUP             reduce using rule 30 (flow_control -> while_loop .)
    SWAP            reduce using rule 30 (flow_control -> while_loop .)
    ROT             reduce using rule 30 (flow_control -> while_loop .)
    OVER            reduce using rule 30 (flow_control -> while_loop .)
    $end            reduce using rule 30 (flow_control -> while_loop .)
    LOOP            reduce using rule 30 (flow_control -> while_loop .)


state 13

    (31) flow_control -> repeat_loop .

    NUMBER          reduce using rule 31 (flow_control -> repeat_loop .)
    STRING          reduce using rule 31 (flow_control -> repeat_loop .)
    VARIABLE        reduce using rule 31 (flow_control -> repeat_loop .)
    EXCLAMATION     reduce using rule 31 (flow_control -> repeat_loop .)
    AT              reduce using rule 31 (flow_control -> repeat_loop .)
    DOT             reduce using rule 31 (flow_control -> repeat_loop .)
    COLON           reduce using rule 31 (flow_control -> repeat_loop .)
    SEMICOLON       reduce using rule 31 (flow_control -> repeat_loop .)
    LEFT_PAREN      reduce using rule 31 (flow_control -> repeat_loop .)
    RIGHT_PAREN     reduce using rule 31 (flow_control -> repeat_loop .)
    IF              reduce using rule 31 (flow_control -> repeat_loop .)
    ELSE            reduce using rule 31 (flow_control -> repeat_loop .)
    WHILE           reduce using rule 31 (flow_control -> repeat_loop .)
    BEGIN           reduce using rule 31 (flow_control -> repeat_loop .)
    EXIT            reduce using rule 31 (flow_control -> repeat_loop .)
    DROP            reduce using rule 31 (flow_control -> repeat_loop .)
    DUP             reduce using rule 31 (flow_control -> repeat_loop .)
    SWAP            reduce using rule 31 (flow_control -> repeat_loop .)
    ROT             reduce using rule 31 (flow_control -> repeat_loop .)
    OVER            reduce using rule 31 (flow_control -> repeat_loop .)
    $end            reduce using rule 31 (flow_control -> repeat_loop .)
    LOOP            reduce using rule 31 (flow_control -> repeat_loop .)


state 14

    (32) flow_control -> exit_statement .

    NUMBER          reduce using rule 32 (flow_control -> exit_statement .)
    STRING          reduce using rule 32 (flow_control -> exit_statement .)
    VARIABLE        reduce using rule 32 (flow_control -> exit_statement .)
    EXCLAMATION     reduce using rule 32 (flow_control -> exit_statement .)
    AT              reduce using rule 32 (flow_control -> exit_statement .)
    DOT             reduce using rule 32 (flow_control -> exit_statement .)
    COLON           reduce using rule 32 (flow_control -> exit_statement .)
    SEMICOLON       reduce using rule 32 (flow_control -> exit_statement .)
    LEFT_PAREN      reduce using rule 32 (flow_control -> exit_statement .)
    RIGHT_PAREN     reduce using rule 32 (flow_control -> exit_statement .)
    IF              reduce using rule 32 (flow_control -> exit_statement .)
    ELSE            reduce using rule 32 (flow_control -> exit_statement .)
    WHILE           reduce using rule 32 (flow_control -> exit_statement .)
    BEGIN           reduce using rule 32 (flow_control -> exit_statement .)
    EXIT            reduce using rule 32 (flow_control -> exit_statement .)
    DROP            reduce using rule 32 (flow_control -> exit_statement .)
    DUP             reduce using rule 32 (flow_control -> exit_statement .)
    SWAP            reduce using rule 32 (flow_control -> exit_statement .)
    ROT             reduce using rule 32 (flow_control -> exit_statement .)
    OVER            reduce using rule 32 (flow_control -> exit_statement .)
    $end            reduce using rule 32 (flow_control -> exit_statement .)
    LOOP            reduce using rule 32 (flow_control -> exit_statement .)


state 15

    (33) flow_control -> drop_statement .

    NUMBER          reduce using rule 33 (flow_control -> drop_statement .)
    STRING          reduce using rule 33 (flow_control -> drop_statement .)
    VARIABLE        reduce using rule 33 (flow_control -> drop_statement .)
    EXCLAMATION     reduce using rule 33 (flow_control -> drop_statement .)
    AT              reduce using rule 33 (flow_control -> drop_statement .)
    DOT             reduce using rule 33 (flow_control -> drop_statement .)
    COLON           reduce using rule 33 (flow_control -> drop_statement .)
    SEMICOLON       reduce using rule 33 (flow_control -> drop_statement .)
    LEFT_PAREN      reduce using rule 33 (flow_control -> drop_statement .)
    RIGHT_PAREN     reduce using rule 33 (flow_control -> drop_statement .)
    IF              reduce using rule 33 (flow_control -> drop_statement .)
    ELSE            reduce using rule 33 (flow_control -> drop_statement .)
    WHILE           reduce using rule 33 (flow_control -> drop_statement .)
    BEGIN           reduce using rule 33 (flow_control -> drop_statement .)
    EXIT            reduce using rule 33 (flow_control -> drop_statement .)
    DROP            reduce using rule 33 (flow_control -> drop_statement .)
    DUP             reduce using rule 33 (flow_control -> drop_statement .)
    SWAP            reduce using rule 33 (flow_control -> drop_statement .)
    ROT             reduce using rule 33 (flow_control -> drop_statement .)
    OVER            reduce using rule 33 (flow_control -> drop_statement .)
    $end            reduce using rule 33 (flow_control -> drop_statement .)
    LOOP            reduce using rule 33 (flow_control -> drop_statement .)


state 16

    (34) flow_control -> dup_statement .

    NUMBER          reduce using rule 34 (flow_control -> dup_statement .)
    STRING          reduce using rule 34 (flow_control -> dup_statement .)
    VARIABLE        reduce using rule 34 (flow_control -> dup_statement .)
    EXCLAMATION     reduce using rule 34 (flow_control -> dup_statement .)
    AT              reduce using rule 34 (flow_control -> dup_statement .)
    DOT             reduce using rule 34 (flow_control -> dup_statement .)
    COLON           reduce using rule 34 (flow_control -> dup_statement .)
    SEMICOLON       reduce using rule 34 (flow_control -> dup_statement .)
    LEFT_PAREN      reduce using rule 34 (flow_control -> dup_statement .)
    RIGHT_PAREN     reduce using rule 34 (flow_control -> dup_statement .)
    IF              reduce using rule 34 (flow_control -> dup_statement .)
    ELSE            reduce using rule 34 (flow_control -> dup_statement .)
    WHILE           reduce using rule 34 (flow_control -> dup_statement .)
    BEGIN           reduce using rule 34 (flow_control -> dup_statement .)
    EXIT            reduce using rule 34 (flow_control -> dup_statement .)
    DROP            reduce using rule 34 (flow_control -> dup_statement .)
    DUP             reduce using rule 34 (flow_control -> dup_statement .)
    SWAP            reduce using rule 34 (flow_control -> dup_statement .)
    ROT             reduce using rule 34 (flow_control -> dup_statement .)
    OVER            reduce using rule 34 (flow_control -> dup_statement .)
    $end            reduce using rule 34 (flow_control -> dup_statement .)
    LOOP            reduce using rule 34 (flow_control -> dup_statement .)


state 17

    (35) flow_control -> swap_statement .

    NUMBER          reduce using rule 35 (flow_control -> swap_statement .)
    STRING          reduce using rule 35 (flow_control -> swap_statement .)
    VARIABLE        reduce using rule 35 (flow_control -> swap_statement .)
    EXCLAMATION     reduce using rule 35 (flow_control -> swap_statement .)
    AT              reduce using rule 35 (flow_control -> swap_statement .)
    DOT             reduce using rule 35 (flow_control -> swap_statement .)
    COLON           reduce using rule 35 (flow_control -> swap_statement .)
    SEMICOLON       reduce using rule 35 (flow_control -> swap_statement .)
    LEFT_PAREN      reduce using rule 35 (flow_control -> swap_statement .)
    RIGHT_PAREN     reduce using rule 35 (flow_control -> swap_statement .)
    IF              reduce using rule 35 (flow_control -> swap_statement .)
    ELSE            reduce using rule 35 (flow_control -> swap_statement .)
    WHILE           reduce using rule 35 (flow_control -> swap_statement .)
    BEGIN           reduce using rule 35 (flow_control -> swap_statement .)
    EXIT            reduce using rule 35 (flow_control -> swap_statement .)
    DROP            reduce using rule 35 (flow_control -> swap_statement .)
    DUP             reduce using rule 35 (flow_control -> swap_statement .)
    SWAP            reduce using rule 35 (flow_control -> swap_statement .)
    ROT             reduce using rule 35 (flow_control -> swap_statement .)
    OVER            reduce using rule 35 (flow_control -> swap_statement .)
    $end            reduce using rule 35 (flow_control -> swap_statement .)
    LOOP            reduce using rule 35 (flow_control -> swap_statement .)


state 18

    (36) flow_control -> rot_statement .

    NUMBER          reduce using rule 36 (flow_control -> rot_statement .)
    STRING          reduce using rule 36 (flow_control -> rot_statement .)
    VARIABLE        reduce using rule 36 (flow_control -> rot_statement .)
    EXCLAMATION     reduce using rule 36 (flow_control -> rot_statement .)
    AT              reduce using rule 36 (flow_control -> rot_statement .)
    DOT             reduce using rule 36 (flow_control -> rot_statement .)
    COLON           reduce using rule 36 (flow_control -> rot_statement .)
    SEMICOLON       reduce using rule 36 (flow_control -> rot_statement .)
    LEFT_PAREN      reduce using rule 36 (flow_control -> rot_statement .)
    RIGHT_PAREN     reduce using rule 36 (flow_control -> rot_statement .)
    IF              reduce using rule 36 (flow_control -> rot_statement .)
    ELSE            reduce using rule 36 (flow_control -> rot_statement .)
    WHILE           reduce using rule 36 (flow_control -> rot_statement .)
    BEGIN           reduce using rule 36 (flow_control -> rot_statement .)
    EXIT            reduce using rule 36 (flow_control -> rot_statement .)
    DROP            reduce using rule 36 (flow_control -> rot_statement .)
    DUP             reduce using rule 36 (flow_control -> rot_statement .)
    SWAP            reduce using rule 36 (flow_control -> rot_statement .)
    ROT             reduce using rule 36 (flow_control -> rot_statement .)
    OVER            reduce using rule 36 (flow_control -> rot_statement .)
    $end            reduce using rule 36 (flow_control -> rot_statement .)
    LOOP            reduce using rule 36 (flow_control -> rot_statement .)


state 19

    (37) flow_control -> over_statement .

    NUMBER          reduce using rule 37 (flow_control -> over_statement .)
    STRING          reduce using rule 37 (flow_control -> over_statement .)
    VARIABLE        reduce using rule 37 (flow_control -> over_statement .)
    EXCLAMATION     reduce using rule 37 (flow_control -> over_statement .)
    AT              reduce using rule 37 (flow_control -> over_statement .)
    DOT             reduce using rule 37 (flow_control -> over_statement .)
    COLON           reduce using rule 37 (flow_control -> over_statement .)
    SEMICOLON       reduce using rule 37 (flow_control -> over_statement .)
    LEFT_PAREN      reduce using rule 37 (flow_control -> over_statement .)
    RIGHT_PAREN     reduce using rule 37 (flow_control -> over_statement .)
    IF              reduce using rule 37 (flow_control -> over_statement .)
    ELSE            reduce using rule 37 (flow_control -> over_statement .)
    WHILE           reduce using rule 37 (flow_control -> over_statement .)
    BEGIN           reduce using rule 37 (flow_control -> over_statement .)
    EXIT            reduce using rule 37 (flow_control -> over_statement .)
    DROP            reduce using rule 37 (flow_control -> over_statement .)
    DUP             reduce using rule 37 (flow_control -> over_statement .)
    SWAP            reduce using rule 37 (flow_control -> over_statement .)
    ROT             reduce using rule 37 (flow_control -> over_statement .)
    OVER            reduce using rule 37 (flow_control -> over_statement .)
    $end            reduce using rule 37 (flow_control -> over_statement .)
    LOOP            reduce using rule 37 (flow_control -> over_statement .)


state 20

    (21) special_expression -> EXCLAMATION .

    PLUS            reduce using rule 21 (special_expression -> EXCLAMATION .)
    MINUS           reduce using rule 21 (special_expression -> EXCLAMATION .)
    TIMES           reduce using rule 21 (special_expression -> EXCLAMATION .)
    DIVIDE          reduce using rule 21 (special_expression -> EXCLAMATION .)
    MOD             reduce using rule 21 (special_expression -> EXCLAMATION .)
    POWER           reduce using rule 21 (special_expression -> EXCLAMATION .)
    EQUAL           reduce using rule 21 (special_expression -> EXCLAMATION .)
    LESS_THAN       reduce using rule 21 (special_expression -> EXCLAMATION .)
    GREATER_THAN    reduce using rule 21 (special_expression -> EXCLAMATION .)
    NUMBER          reduce using rule 21 (special_expression -> EXCLAMATION .)
    STRING          reduce using rule 21 (special_expression -> EXCLAMATION .)
    VARIABLE        reduce using rule 21 (special_expression -> EXCLAMATION .)
    EXCLAMATION     reduce using rule 21 (special_expression -> EXCLAMATION .)
    AT              reduce using rule 21 (special_expression -> EXCLAMATION .)
    DOT             reduce using rule 21 (special_expression -> EXCLAMATION .)
    COLON           reduce using rule 21 (special_expression -> EXCLAMATION .)
    SEMICOLON       reduce using rule 21 (special_expression -> EXCLAMATION .)
    LEFT_PAREN      reduce using rule 21 (special_expression -> EXCLAMATION .)
    RIGHT_PAREN     reduce using rule 21 (special_expression -> EXCLAMATION .)
    IF              reduce using rule 21 (special_expression -> EXCLAMATION .)
    ELSE            reduce using rule 21 (special_expression -> EXCLAMATION .)
    WHILE           reduce using rule 21 (special_expression -> EXCLAMATION .)
    BEGIN           reduce using rule 21 (special_expression -> EXCLAMATION .)
    EXIT            reduce using rule 21 (special_expression -> EXCLAMATION .)
    DROP            reduce using rule 21 (special_expression -> EXCLAMATION .)
    DUP             reduce using rule 21 (special_expression -> EXCLAMATION .)
    SWAP            reduce using rule 21 (special_expression -> EXCLAMATION .)
    ROT             reduce using rule 21 (special_expression -> EXCLAMATION .)
    OVER            reduce using rule 21 (special_expression -> EXCLAMATION .)
    $end            reduce using rule 21 (special_expression -> EXCLAMATION .)
    THEN            reduce using rule 21 (special_expression -> EXCLAMATION .)
    DO              reduce using rule 21 (special_expression -> EXCLAMATION .)
    LOOP            reduce using rule 21 (special_expression -> EXCLAMATION .)
    REPEAT          reduce using rule 21 (special_expression -> EXCLAMATION .)


state 21

    (22) special_expression -> AT .

    PLUS            reduce using rule 22 (special_expression -> AT .)
    MINUS           reduce using rule 22 (special_expression -> AT .)
    TIMES           reduce using rule 22 (special_expression -> AT .)
    DIVIDE          reduce using rule 22 (special_expression -> AT .)
    MOD             reduce using rule 22 (special_expression -> AT .)
    POWER           reduce using rule 22 (special_expression -> AT .)
    EQUAL           reduce using rule 22 (special_expression -> AT .)
    LESS_THAN       reduce using rule 22 (special_expression -> AT .)
    GREATER_THAN    reduce using rule 22 (special_expression -> AT .)
    NUMBER          reduce using rule 22 (special_expression -> AT .)
    STRING          reduce using rule 22 (special_expression -> AT .)
    VARIABLE        reduce using rule 22 (special_expression -> AT .)
    EXCLAMATION     reduce using rule 22 (special_expression -> AT .)
    AT              reduce using rule 22 (special_expression -> AT .)
    DOT             reduce using rule 22 (special_expression -> AT .)
    COLON           reduce using rule 22 (special_expression -> AT .)
    SEMICOLON       reduce using rule 22 (special_expression -> AT .)
    LEFT_PAREN      reduce using rule 22 (special_expression -> AT .)
    RIGHT_PAREN     reduce using rule 22 (special_expression -> AT .)
    IF              reduce using rule 22 (special_expression -> AT .)
    ELSE            reduce using rule 22 (special_expression -> AT .)
    WHILE           reduce using rule 22 (special_expression -> AT .)
    BEGIN           reduce using rule 22 (special_expression -> AT .)
    EXIT            reduce using rule 22 (special_expression -> AT .)
    DROP            reduce using rule 22 (special_expression -> AT .)
    DUP             reduce using rule 22 (special_expression -> AT .)
    SWAP            reduce using rule 22 (special_expression -> AT .)
    ROT             reduce using rule 22 (special_expression -> AT .)
    OVER            reduce using rule 22 (special_expression -> AT .)
    $end            reduce using rule 22 (special_expression -> AT .)
    THEN            reduce using rule 22 (special_expression -> AT .)
    DO              reduce using rule 22 (special_expression -> AT .)
    LOOP            reduce using rule 22 (special_expression -> AT .)
    REPEAT          reduce using rule 22 (special_expression -> AT .)


state 22

    (23) special_expression -> DOT .

    PLUS            reduce using rule 23 (special_expression -> DOT .)
    MINUS           reduce using rule 23 (special_expression -> DOT .)
    TIMES           reduce using rule 23 (special_expression -> DOT .)
    DIVIDE          reduce using rule 23 (special_expression -> DOT .)
    MOD             reduce using rule 23 (special_expression -> DOT .)
    POWER           reduce using rule 23 (special_expression -> DOT .)
    EQUAL           reduce using rule 23 (special_expression -> DOT .)
    LESS_THAN       reduce using rule 23 (special_expression -> DOT .)
    GREATER_THAN    reduce using rule 23 (special_expression -> DOT .)
    NUMBER          reduce using rule 23 (special_expression -> DOT .)
    STRING          reduce using rule 23 (special_expression -> DOT .)
    VARIABLE        reduce using rule 23 (special_expression -> DOT .)
    EXCLAMATION     reduce using rule 23 (special_expression -> DOT .)
    AT              reduce using rule 23 (special_expression -> DOT .)
    DOT             reduce using rule 23 (special_expression -> DOT .)
    COLON           reduce using rule 23 (special_expression -> DOT .)
    SEMICOLON       reduce using rule 23 (special_expression -> DOT .)
    LEFT_PAREN      reduce using rule 23 (special_expression -> DOT .)
    RIGHT_PAREN     reduce using rule 23 (special_expression -> DOT .)
    IF              reduce using rule 23 (special_expression -> DOT .)
    ELSE            reduce using rule 23 (special_expression -> DOT .)
    WHILE           reduce using rule 23 (special_expression -> DOT .)
    BEGIN           reduce using rule 23 (special_expression -> DOT .)
    EXIT            reduce using rule 23 (special_expression -> DOT .)
    DROP            reduce using rule 23 (special_expression -> DOT .)
    DUP             reduce using rule 23 (special_expression -> DOT .)
    SWAP            reduce using rule 23 (special_expression -> DOT .)
    ROT             reduce using rule 23 (special_expression -> DOT .)
    OVER            reduce using rule 23 (special_expression -> DOT .)
    $end            reduce using rule 23 (special_expression -> DOT .)
    THEN            reduce using rule 23 (special_expression -> DOT .)
    DO              reduce using rule 23 (special_expression -> DOT .)
    LOOP            reduce using rule 23 (special_expression -> DOT .)
    REPEAT          reduce using rule 23 (special_expression -> DOT .)


state 23

    (24) special_expression -> COLON .

    PLUS            reduce using rule 24 (special_expression -> COLON .)
    MINUS           reduce using rule 24 (special_expression -> COLON .)
    TIMES           reduce using rule 24 (special_expression -> COLON .)
    DIVIDE          reduce using rule 24 (special_expression -> COLON .)
    MOD             reduce using rule 24 (special_expression -> COLON .)
    POWER           reduce using rule 24 (special_expression -> COLON .)
    EQUAL           reduce using rule 24 (special_expression -> COLON .)
    LESS_THAN       reduce using rule 24 (special_expression -> COLON .)
    GREATER_THAN    reduce using rule 24 (special_expression -> COLON .)
    NUMBER          reduce using rule 24 (special_expression -> COLON .)
    STRING          reduce using rule 24 (special_expression -> COLON .)
    VARIABLE        reduce using rule 24 (special_expression -> COLON .)
    EXCLAMATION     reduce using rule 24 (special_expression -> COLON .)
    AT              reduce using rule 24 (special_expression -> COLON .)
    DOT             reduce using rule 24 (special_expression -> COLON .)
    COLON           reduce using rule 24 (special_expression -> COLON .)
    SEMICOLON       reduce using rule 24 (special_expression -> COLON .)
    LEFT_PAREN      reduce using rule 24 (special_expression -> COLON .)
    RIGHT_PAREN     reduce using rule 24 (special_expression -> COLON .)
    IF              reduce using rule 24 (special_expression -> COLON .)
    ELSE            reduce using rule 24 (special_expression -> COLON .)
    WHILE           reduce using rule 24 (special_expression -> COLON .)
    BEGIN           reduce using rule 24 (special_expression -> COLON .)
    EXIT            reduce using rule 24 (special_expression -> COLON .)
    DROP            reduce using rule 24 (special_expression -> COLON .)
    DUP             reduce using rule 24 (special_expression -> COLON .)
    SWAP            reduce using rule 24 (special_expression -> COLON .)
    ROT             reduce using rule 24 (special_expression -> COLON .)
    OVER            reduce using rule 24 (special_expression -> COLON .)
    $end            reduce using rule 24 (special_expression -> COLON .)
    THEN            reduce using rule 24 (special_expression -> COLON .)
    DO              reduce using rule 24 (special_expression -> COLON .)
    LOOP            reduce using rule 24 (special_expression -> COLON .)
    REPEAT          reduce using rule 24 (special_expression -> COLON .)


state 24

    (25) special_expression -> SEMICOLON .

    PLUS            reduce using rule 25 (special_expression -> SEMICOLON .)
    MINUS           reduce using rule 25 (special_expression -> SEMICOLON .)
    TIMES           reduce using rule 25 (special_expression -> SEMICOLON .)
    DIVIDE          reduce using rule 25 (special_expression -> SEMICOLON .)
    MOD             reduce using rule 25 (special_expression -> SEMICOLON .)
    POWER           reduce using rule 25 (special_expression -> SEMICOLON .)
    EQUAL           reduce using rule 25 (special_expression -> SEMICOLON .)
    LESS_THAN       reduce using rule 25 (special_expression -> SEMICOLON .)
    GREATER_THAN    reduce using rule 25 (special_expression -> SEMICOLON .)
    NUMBER          reduce using rule 25 (special_expression -> SEMICOLON .)
    STRING          reduce using rule 25 (special_expression -> SEMICOLON .)
    VARIABLE        reduce using rule 25 (special_expression -> SEMICOLON .)
    EXCLAMATION     reduce using rule 25 (special_expression -> SEMICOLON .)
    AT              reduce using rule 25 (special_expression -> SEMICOLON .)
    DOT             reduce using rule 25 (special_expression -> SEMICOLON .)
    COLON           reduce using rule 25 (special_expression -> SEMICOLON .)
    SEMICOLON       reduce using rule 25 (special_expression -> SEMICOLON .)
    LEFT_PAREN      reduce using rule 25 (special_expression -> SEMICOLON .)
    RIGHT_PAREN     reduce using rule 25 (special_expression -> SEMICOLON .)
    IF              reduce using rule 25 (special_expression -> SEMICOLON .)
    ELSE            reduce using rule 25 (special_expression -> SEMICOLON .)
    WHILE           reduce using rule 25 (special_expression -> SEMICOLON .)
    BEGIN           reduce using rule 25 (special_expression -> SEMICOLON .)
    EXIT            reduce using rule 25 (special_expression -> SEMICOLON .)
    DROP            reduce using rule 25 (special_expression -> SEMICOLON .)
    DUP             reduce using rule 25 (special_expression -> SEMICOLON .)
    SWAP            reduce using rule 25 (special_expression -> SEMICOLON .)
    ROT             reduce using rule 25 (special_expression -> SEMICOLON .)
    OVER            reduce using rule 25 (special_expression -> SEMICOLON .)
    $end            reduce using rule 25 (special_expression -> SEMICOLON .)
    THEN            reduce using rule 25 (special_expression -> SEMICOLON .)
    DO              reduce using rule 25 (special_expression -> SEMICOLON .)
    LOOP            reduce using rule 25 (special_expression -> SEMICOLON .)
    REPEAT          reduce using rule 25 (special_expression -> SEMICOLON .)


state 25

    (26) special_expression -> LEFT_PAREN .

    PLUS            reduce using rule 26 (special_expression -> LEFT_PAREN .)
    MINUS           reduce using rule 26 (special_expression -> LEFT_PAREN .)
    TIMES           reduce using rule 26 (special_expression -> LEFT_PAREN .)
    DIVIDE          reduce using rule 26 (special_expression -> LEFT_PAREN .)
    MOD             reduce using rule 26 (special_expression -> LEFT_PAREN .)
    POWER           reduce using rule 26 (special_expression -> LEFT_PAREN .)
    EQUAL           reduce using rule 26 (special_expression -> LEFT_PAREN .)
    LESS_THAN       reduce using rule 26 (special_expression -> LEFT_PAREN .)
    GREATER_THAN    reduce using rule 26 (special_expression -> LEFT_PAREN .)
    NUMBER          reduce using rule 26 (special_expression -> LEFT_PAREN .)
    STRING          reduce using rule 26 (special_expression -> LEFT_PAREN .)
    VARIABLE        reduce using rule 26 (special_expression -> LEFT_PAREN .)
    EXCLAMATION     reduce using rule 26 (special_expression -> LEFT_PAREN .)
    AT              reduce using rule 26 (special_expression -> LEFT_PAREN .)
    DOT             reduce using rule 26 (special_expression -> LEFT_PAREN .)
    COLON           reduce using rule 26 (special_expression -> LEFT_PAREN .)
    SEMICOLON       reduce using rule 26 (special_expression -> LEFT_PAREN .)
    LEFT_PAREN      reduce using rule 26 (special_expression -> LEFT_PAREN .)
    RIGHT_PAREN     reduce using rule 26 (special_expression -> LEFT_PAREN .)
    IF              reduce using rule 26 (special_expression -> LEFT_PAREN .)
    ELSE            reduce using rule 26 (special_expression -> LEFT_PAREN .)
    WHILE           reduce using rule 26 (special_expression -> LEFT_PAREN .)
    BEGIN           reduce using rule 26 (special_expression -> LEFT_PAREN .)
    EXIT            reduce using rule 26 (special_expression -> LEFT_PAREN .)
    DROP            reduce using rule 26 (special_expression -> LEFT_PAREN .)
    DUP             reduce using rule 26 (special_expression -> LEFT_PAREN .)
    SWAP            reduce using rule 26 (special_expression -> LEFT_PAREN .)
    ROT             reduce using rule 26 (special_expression -> LEFT_PAREN .)
    OVER            reduce using rule 26 (special_expression -> LEFT_PAREN .)
    $end            reduce using rule 26 (special_expression -> LEFT_PAREN .)
    THEN            reduce using rule 26 (special_expression -> LEFT_PAREN .)
    DO              reduce using rule 26 (special_expression -> LEFT_PAREN .)
    LOOP            reduce using rule 26 (special_expression -> LEFT_PAREN .)
    REPEAT          reduce using rule 26 (special_expression -> LEFT_PAREN .)


state 26

    (27) special_expression -> RIGHT_PAREN .

    PLUS            reduce using rule 27 (special_expression -> RIGHT_PAREN .)
    MINUS           reduce using rule 27 (special_expression -> RIGHT_PAREN .)
    TIMES           reduce using rule 27 (special_expression -> RIGHT_PAREN .)
    DIVIDE          reduce using rule 27 (special_expression -> RIGHT_PAREN .)
    MOD             reduce using rule 27 (special_expression -> RIGHT_PAREN .)
    POWER           reduce using rule 27 (special_expression -> RIGHT_PAREN .)
    EQUAL           reduce using rule 27 (special_expression -> RIGHT_PAREN .)
    LESS_THAN       reduce using rule 27 (special_expression -> RIGHT_PAREN .)
    GREATER_THAN    reduce using rule 27 (special_expression -> RIGHT_PAREN .)
    NUMBER          reduce using rule 27 (special_expression -> RIGHT_PAREN .)
    STRING          reduce using rule 27 (special_expression -> RIGHT_PAREN .)
    VARIABLE        reduce using rule 27 (special_expression -> RIGHT_PAREN .)
    EXCLAMATION     reduce using rule 27 (special_expression -> RIGHT_PAREN .)
    AT              reduce using rule 27 (special_expression -> RIGHT_PAREN .)
    DOT             reduce using rule 27 (special_expression -> RIGHT_PAREN .)
    COLON           reduce using rule 27 (special_expression -> RIGHT_PAREN .)
    SEMICOLON       reduce using rule 27 (special_expression -> RIGHT_PAREN .)
    LEFT_PAREN      reduce using rule 27 (special_expression -> RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 27 (special_expression -> RIGHT_PAREN .)
    IF              reduce using rule 27 (special_expression -> RIGHT_PAREN .)
    ELSE            reduce using rule 27 (special_expression -> RIGHT_PAREN .)
    WHILE           reduce using rule 27 (special_expression -> RIGHT_PAREN .)
    BEGIN           reduce using rule 27 (special_expression -> RIGHT_PAREN .)
    EXIT            reduce using rule 27 (special_expression -> RIGHT_PAREN .)
    DROP            reduce using rule 27 (special_expression -> RIGHT_PAREN .)
    DUP             reduce using rule 27 (special_expression -> RIGHT_PAREN .)
    SWAP            reduce using rule 27 (special_expression -> RIGHT_PAREN .)
    ROT             reduce using rule 27 (special_expression -> RIGHT_PAREN .)
    OVER            reduce using rule 27 (special_expression -> RIGHT_PAREN .)
    $end            reduce using rule 27 (special_expression -> RIGHT_PAREN .)
    THEN            reduce using rule 27 (special_expression -> RIGHT_PAREN .)
    DO              reduce using rule 27 (special_expression -> RIGHT_PAREN .)
    LOOP            reduce using rule 27 (special_expression -> RIGHT_PAREN .)
    REPEAT          reduce using rule 27 (special_expression -> RIGHT_PAREN .)


state 27

    (38) if_statement -> IF . expression THEN
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (8) expression -> . VARIABLE
    (9) expression -> . special_expression
    (10) expression -> . expression arithmetic_op expression
    (17) expression -> . expression relational_op expression
    (21) special_expression -> . EXCLAMATION
    (22) special_expression -> . AT
    (23) special_expression -> . DOT
    (24) special_expression -> . COLON
    (25) special_expression -> . SEMICOLON
    (26) special_expression -> . LEFT_PAREN
    (27) special_expression -> . RIGHT_PAREN

    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    VARIABLE        shift and go to state 8
    EXCLAMATION     shift and go to state 20
    AT              shift and go to state 21
    DOT             shift and go to state 22
    COLON           shift and go to state 23
    SEMICOLON       shift and go to state 24
    LEFT_PAREN      shift and go to state 25
    RIGHT_PAREN     shift and go to state 26

    expression                     shift and go to state 49
    special_expression             shift and go to state 9

state 28

    (39) else_statement -> ELSE .

    NUMBER          reduce using rule 39 (else_statement -> ELSE .)
    STRING          reduce using rule 39 (else_statement -> ELSE .)
    VARIABLE        reduce using rule 39 (else_statement -> ELSE .)
    EXCLAMATION     reduce using rule 39 (else_statement -> ELSE .)
    AT              reduce using rule 39 (else_statement -> ELSE .)
    DOT             reduce using rule 39 (else_statement -> ELSE .)
    COLON           reduce using rule 39 (else_statement -> ELSE .)
    SEMICOLON       reduce using rule 39 (else_statement -> ELSE .)
    LEFT_PAREN      reduce using rule 39 (else_statement -> ELSE .)
    RIGHT_PAREN     reduce using rule 39 (else_statement -> ELSE .)
    IF              reduce using rule 39 (else_statement -> ELSE .)
    ELSE            reduce using rule 39 (else_statement -> ELSE .)
    WHILE           reduce using rule 39 (else_statement -> ELSE .)
    BEGIN           reduce using rule 39 (else_statement -> ELSE .)
    EXIT            reduce using rule 39 (else_statement -> ELSE .)
    DROP            reduce using rule 39 (else_statement -> ELSE .)
    DUP             reduce using rule 39 (else_statement -> ELSE .)
    SWAP            reduce using rule 39 (else_statement -> ELSE .)
    ROT             reduce using rule 39 (else_statement -> ELSE .)
    OVER            reduce using rule 39 (else_statement -> ELSE .)
    $end            reduce using rule 39 (else_statement -> ELSE .)
    LOOP            reduce using rule 39 (else_statement -> ELSE .)


state 29

    (40) while_loop -> WHILE . expression DO statements LOOP
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (8) expression -> . VARIABLE
    (9) expression -> . special_expression
    (10) expression -> . expression arithmetic_op expression
    (17) expression -> . expression relational_op expression
    (21) special_expression -> . EXCLAMATION
    (22) special_expression -> . AT
    (23) special_expression -> . DOT
    (24) special_expression -> . COLON
    (25) special_expression -> . SEMICOLON
    (26) special_expression -> . LEFT_PAREN
    (27) special_expression -> . RIGHT_PAREN

    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    VARIABLE        shift and go to state 8
    EXCLAMATION     shift and go to state 20
    AT              shift and go to state 21
    DOT             shift and go to state 22
    COLON           shift and go to state 23
    SEMICOLON       shift and go to state 24
    LEFT_PAREN      shift and go to state 25
    RIGHT_PAREN     shift and go to state 26

    expression                     shift and go to state 50
    special_expression             shift and go to state 9

state 30

    (41) repeat_loop -> BEGIN . statements WHILE expression REPEAT
    (2) statements -> . statement
    (3) statements -> . statements statement
    (4) statement -> . expression
    (5) statement -> . flow_control
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (8) expression -> . VARIABLE
    (9) expression -> . special_expression
    (10) expression -> . expression arithmetic_op expression
    (17) expression -> . expression relational_op expression
    (28) flow_control -> . if_statement
    (29) flow_control -> . else_statement
    (30) flow_control -> . while_loop
    (31) flow_control -> . repeat_loop
    (32) flow_control -> . exit_statement
    (33) flow_control -> . drop_statement
    (34) flow_control -> . dup_statement
    (35) flow_control -> . swap_statement
    (36) flow_control -> . rot_statement
    (37) flow_control -> . over_statement
    (21) special_expression -> . EXCLAMATION
    (22) special_expression -> . AT
    (23) special_expression -> . DOT
    (24) special_expression -> . COLON
    (25) special_expression -> . SEMICOLON
    (26) special_expression -> . LEFT_PAREN
    (27) special_expression -> . RIGHT_PAREN
    (38) if_statement -> . IF expression THEN
    (39) else_statement -> . ELSE
    (40) while_loop -> . WHILE expression DO statements LOOP
    (41) repeat_loop -> . BEGIN statements WHILE expression REPEAT
    (42) exit_statement -> . EXIT
    (43) drop_statement -> . DROP
    (44) dup_statement -> . DUP
    (45) swap_statement -> . SWAP
    (46) rot_statement -> . ROT
    (47) over_statement -> . OVER

    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    VARIABLE        shift and go to state 8
    EXCLAMATION     shift and go to state 20
    AT              shift and go to state 21
    DOT             shift and go to state 22
    COLON           shift and go to state 23
    SEMICOLON       shift and go to state 24
    LEFT_PAREN      shift and go to state 25
    RIGHT_PAREN     shift and go to state 26
    IF              shift and go to state 27
    ELSE            shift and go to state 28
    WHILE           shift and go to state 29
    BEGIN           shift and go to state 30
    EXIT            shift and go to state 31
    DROP            shift and go to state 32
    DUP             shift and go to state 33
    SWAP            shift and go to state 34
    ROT             shift and go to state 35
    OVER            shift and go to state 36

    statements                     shift and go to state 51
    expression                     shift and go to state 4
    statement                      shift and go to state 3
    flow_control                   shift and go to state 5
    special_expression             shift and go to state 9
    if_statement                   shift and go to state 10
    else_statement                 shift and go to state 11
    while_loop                     shift and go to state 12
    repeat_loop                    shift and go to state 13
    exit_statement                 shift and go to state 14
    drop_statement                 shift and go to state 15
    dup_statement                  shift and go to state 16
    swap_statement                 shift and go to state 17
    rot_statement                  shift and go to state 18
    over_statement                 shift and go to state 19

state 31

    (42) exit_statement -> EXIT .

    NUMBER          reduce using rule 42 (exit_statement -> EXIT .)
    STRING          reduce using rule 42 (exit_statement -> EXIT .)
    VARIABLE        reduce using rule 42 (exit_statement -> EXIT .)
    EXCLAMATION     reduce using rule 42 (exit_statement -> EXIT .)
    AT              reduce using rule 42 (exit_statement -> EXIT .)
    DOT             reduce using rule 42 (exit_statement -> EXIT .)
    COLON           reduce using rule 42 (exit_statement -> EXIT .)
    SEMICOLON       reduce using rule 42 (exit_statement -> EXIT .)
    LEFT_PAREN      reduce using rule 42 (exit_statement -> EXIT .)
    RIGHT_PAREN     reduce using rule 42 (exit_statement -> EXIT .)
    IF              reduce using rule 42 (exit_statement -> EXIT .)
    ELSE            reduce using rule 42 (exit_statement -> EXIT .)
    WHILE           reduce using rule 42 (exit_statement -> EXIT .)
    BEGIN           reduce using rule 42 (exit_statement -> EXIT .)
    EXIT            reduce using rule 42 (exit_statement -> EXIT .)
    DROP            reduce using rule 42 (exit_statement -> EXIT .)
    DUP             reduce using rule 42 (exit_statement -> EXIT .)
    SWAP            reduce using rule 42 (exit_statement -> EXIT .)
    ROT             reduce using rule 42 (exit_statement -> EXIT .)
    OVER            reduce using rule 42 (exit_statement -> EXIT .)
    $end            reduce using rule 42 (exit_statement -> EXIT .)
    LOOP            reduce using rule 42 (exit_statement -> EXIT .)


state 32

    (43) drop_statement -> DROP .

    NUMBER          reduce using rule 43 (drop_statement -> DROP .)
    STRING          reduce using rule 43 (drop_statement -> DROP .)
    VARIABLE        reduce using rule 43 (drop_statement -> DROP .)
    EXCLAMATION     reduce using rule 43 (drop_statement -> DROP .)
    AT              reduce using rule 43 (drop_statement -> DROP .)
    DOT             reduce using rule 43 (drop_statement -> DROP .)
    COLON           reduce using rule 43 (drop_statement -> DROP .)
    SEMICOLON       reduce using rule 43 (drop_statement -> DROP .)
    LEFT_PAREN      reduce using rule 43 (drop_statement -> DROP .)
    RIGHT_PAREN     reduce using rule 43 (drop_statement -> DROP .)
    IF              reduce using rule 43 (drop_statement -> DROP .)
    ELSE            reduce using rule 43 (drop_statement -> DROP .)
    WHILE           reduce using rule 43 (drop_statement -> DROP .)
    BEGIN           reduce using rule 43 (drop_statement -> DROP .)
    EXIT            reduce using rule 43 (drop_statement -> DROP .)
    DROP            reduce using rule 43 (drop_statement -> DROP .)
    DUP             reduce using rule 43 (drop_statement -> DROP .)
    SWAP            reduce using rule 43 (drop_statement -> DROP .)
    ROT             reduce using rule 43 (drop_statement -> DROP .)
    OVER            reduce using rule 43 (drop_statement -> DROP .)
    $end            reduce using rule 43 (drop_statement -> DROP .)
    LOOP            reduce using rule 43 (drop_statement -> DROP .)


state 33

    (44) dup_statement -> DUP .

    NUMBER          reduce using rule 44 (dup_statement -> DUP .)
    STRING          reduce using rule 44 (dup_statement -> DUP .)
    VARIABLE        reduce using rule 44 (dup_statement -> DUP .)
    EXCLAMATION     reduce using rule 44 (dup_statement -> DUP .)
    AT              reduce using rule 44 (dup_statement -> DUP .)
    DOT             reduce using rule 44 (dup_statement -> DUP .)
    COLON           reduce using rule 44 (dup_statement -> DUP .)
    SEMICOLON       reduce using rule 44 (dup_statement -> DUP .)
    LEFT_PAREN      reduce using rule 44 (dup_statement -> DUP .)
    RIGHT_PAREN     reduce using rule 44 (dup_statement -> DUP .)
    IF              reduce using rule 44 (dup_statement -> DUP .)
    ELSE            reduce using rule 44 (dup_statement -> DUP .)
    WHILE           reduce using rule 44 (dup_statement -> DUP .)
    BEGIN           reduce using rule 44 (dup_statement -> DUP .)
    EXIT            reduce using rule 44 (dup_statement -> DUP .)
    DROP            reduce using rule 44 (dup_statement -> DUP .)
    DUP             reduce using rule 44 (dup_statement -> DUP .)
    SWAP            reduce using rule 44 (dup_statement -> DUP .)
    ROT             reduce using rule 44 (dup_statement -> DUP .)
    OVER            reduce using rule 44 (dup_statement -> DUP .)
    $end            reduce using rule 44 (dup_statement -> DUP .)
    LOOP            reduce using rule 44 (dup_statement -> DUP .)


state 34

    (45) swap_statement -> SWAP .

    NUMBER          reduce using rule 45 (swap_statement -> SWAP .)
    STRING          reduce using rule 45 (swap_statement -> SWAP .)
    VARIABLE        reduce using rule 45 (swap_statement -> SWAP .)
    EXCLAMATION     reduce using rule 45 (swap_statement -> SWAP .)
    AT              reduce using rule 45 (swap_statement -> SWAP .)
    DOT             reduce using rule 45 (swap_statement -> SWAP .)
    COLON           reduce using rule 45 (swap_statement -> SWAP .)
    SEMICOLON       reduce using rule 45 (swap_statement -> SWAP .)
    LEFT_PAREN      reduce using rule 45 (swap_statement -> SWAP .)
    RIGHT_PAREN     reduce using rule 45 (swap_statement -> SWAP .)
    IF              reduce using rule 45 (swap_statement -> SWAP .)
    ELSE            reduce using rule 45 (swap_statement -> SWAP .)
    WHILE           reduce using rule 45 (swap_statement -> SWAP .)
    BEGIN           reduce using rule 45 (swap_statement -> SWAP .)
    EXIT            reduce using rule 45 (swap_statement -> SWAP .)
    DROP            reduce using rule 45 (swap_statement -> SWAP .)
    DUP             reduce using rule 45 (swap_statement -> SWAP .)
    SWAP            reduce using rule 45 (swap_statement -> SWAP .)
    ROT             reduce using rule 45 (swap_statement -> SWAP .)
    OVER            reduce using rule 45 (swap_statement -> SWAP .)
    $end            reduce using rule 45 (swap_statement -> SWAP .)
    LOOP            reduce using rule 45 (swap_statement -> SWAP .)


state 35

    (46) rot_statement -> ROT .

    NUMBER          reduce using rule 46 (rot_statement -> ROT .)
    STRING          reduce using rule 46 (rot_statement -> ROT .)
    VARIABLE        reduce using rule 46 (rot_statement -> ROT .)
    EXCLAMATION     reduce using rule 46 (rot_statement -> ROT .)
    AT              reduce using rule 46 (rot_statement -> ROT .)
    DOT             reduce using rule 46 (rot_statement -> ROT .)
    COLON           reduce using rule 46 (rot_statement -> ROT .)
    SEMICOLON       reduce using rule 46 (rot_statement -> ROT .)
    LEFT_PAREN      reduce using rule 46 (rot_statement -> ROT .)
    RIGHT_PAREN     reduce using rule 46 (rot_statement -> ROT .)
    IF              reduce using rule 46 (rot_statement -> ROT .)
    ELSE            reduce using rule 46 (rot_statement -> ROT .)
    WHILE           reduce using rule 46 (rot_statement -> ROT .)
    BEGIN           reduce using rule 46 (rot_statement -> ROT .)
    EXIT            reduce using rule 46 (rot_statement -> ROT .)
    DROP            reduce using rule 46 (rot_statement -> ROT .)
    DUP             reduce using rule 46 (rot_statement -> ROT .)
    SWAP            reduce using rule 46 (rot_statement -> ROT .)
    ROT             reduce using rule 46 (rot_statement -> ROT .)
    OVER            reduce using rule 46 (rot_statement -> ROT .)
    $end            reduce using rule 46 (rot_statement -> ROT .)
    LOOP            reduce using rule 46 (rot_statement -> ROT .)


state 36

    (47) over_statement -> OVER .

    NUMBER          reduce using rule 47 (over_statement -> OVER .)
    STRING          reduce using rule 47 (over_statement -> OVER .)
    VARIABLE        reduce using rule 47 (over_statement -> OVER .)
    EXCLAMATION     reduce using rule 47 (over_statement -> OVER .)
    AT              reduce using rule 47 (over_statement -> OVER .)
    DOT             reduce using rule 47 (over_statement -> OVER .)
    COLON           reduce using rule 47 (over_statement -> OVER .)
    SEMICOLON       reduce using rule 47 (over_statement -> OVER .)
    LEFT_PAREN      reduce using rule 47 (over_statement -> OVER .)
    RIGHT_PAREN     reduce using rule 47 (over_statement -> OVER .)
    IF              reduce using rule 47 (over_statement -> OVER .)
    ELSE            reduce using rule 47 (over_statement -> OVER .)
    WHILE           reduce using rule 47 (over_statement -> OVER .)
    BEGIN           reduce using rule 47 (over_statement -> OVER .)
    EXIT            reduce using rule 47 (over_statement -> OVER .)
    DROP            reduce using rule 47 (over_statement -> OVER .)
    DUP             reduce using rule 47 (over_statement -> OVER .)
    SWAP            reduce using rule 47 (over_statement -> OVER .)
    ROT             reduce using rule 47 (over_statement -> OVER .)
    OVER            reduce using rule 47 (over_statement -> OVER .)
    $end            reduce using rule 47 (over_statement -> OVER .)
    LOOP            reduce using rule 47 (over_statement -> OVER .)


state 37

    (3) statements -> statements statement .

    NUMBER          reduce using rule 3 (statements -> statements statement .)
    STRING          reduce using rule 3 (statements -> statements statement .)
    VARIABLE        reduce using rule 3 (statements -> statements statement .)
    EXCLAMATION     reduce using rule 3 (statements -> statements statement .)
    AT              reduce using rule 3 (statements -> statements statement .)
    DOT             reduce using rule 3 (statements -> statements statement .)
    COLON           reduce using rule 3 (statements -> statements statement .)
    SEMICOLON       reduce using rule 3 (statements -> statements statement .)
    LEFT_PAREN      reduce using rule 3 (statements -> statements statement .)
    RIGHT_PAREN     reduce using rule 3 (statements -> statements statement .)
    IF              reduce using rule 3 (statements -> statements statement .)
    ELSE            reduce using rule 3 (statements -> statements statement .)
    WHILE           reduce using rule 3 (statements -> statements statement .)
    BEGIN           reduce using rule 3 (statements -> statements statement .)
    EXIT            reduce using rule 3 (statements -> statements statement .)
    DROP            reduce using rule 3 (statements -> statements statement .)
    DUP             reduce using rule 3 (statements -> statements statement .)
    SWAP            reduce using rule 3 (statements -> statements statement .)
    ROT             reduce using rule 3 (statements -> statements statement .)
    OVER            reduce using rule 3 (statements -> statements statement .)
    $end            reduce using rule 3 (statements -> statements statement .)
    LOOP            reduce using rule 3 (statements -> statements statement .)


state 38

    (10) expression -> expression arithmetic_op . expression
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (8) expression -> . VARIABLE
    (9) expression -> . special_expression
    (10) expression -> . expression arithmetic_op expression
    (17) expression -> . expression relational_op expression
    (21) special_expression -> . EXCLAMATION
    (22) special_expression -> . AT
    (23) special_expression -> . DOT
    (24) special_expression -> . COLON
    (25) special_expression -> . SEMICOLON
    (26) special_expression -> . LEFT_PAREN
    (27) special_expression -> . RIGHT_PAREN

    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    VARIABLE        shift and go to state 8
    EXCLAMATION     shift and go to state 20
    AT              shift and go to state 21
    DOT             shift and go to state 22
    COLON           shift and go to state 23
    SEMICOLON       shift and go to state 24
    LEFT_PAREN      shift and go to state 25
    RIGHT_PAREN     shift and go to state 26

    expression                     shift and go to state 52
    special_expression             shift and go to state 9

state 39

    (17) expression -> expression relational_op . expression
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (8) expression -> . VARIABLE
    (9) expression -> . special_expression
    (10) expression -> . expression arithmetic_op expression
    (17) expression -> . expression relational_op expression
    (21) special_expression -> . EXCLAMATION
    (22) special_expression -> . AT
    (23) special_expression -> . DOT
    (24) special_expression -> . COLON
    (25) special_expression -> . SEMICOLON
    (26) special_expression -> . LEFT_PAREN
    (27) special_expression -> . RIGHT_PAREN

    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    VARIABLE        shift and go to state 8
    EXCLAMATION     shift and go to state 20
    AT              shift and go to state 21
    DOT             shift and go to state 22
    COLON           shift and go to state 23
    SEMICOLON       shift and go to state 24
    LEFT_PAREN      shift and go to state 25
    RIGHT_PAREN     shift and go to state 26

    expression                     shift and go to state 53
    special_expression             shift and go to state 9

state 40

    (11) arithmetic_op -> PLUS .

    NUMBER          reduce using rule 11 (arithmetic_op -> PLUS .)
    STRING          reduce using rule 11 (arithmetic_op -> PLUS .)
    VARIABLE        reduce using rule 11 (arithmetic_op -> PLUS .)
    EXCLAMATION     reduce using rule 11 (arithmetic_op -> PLUS .)
    AT              reduce using rule 11 (arithmetic_op -> PLUS .)
    DOT             reduce using rule 11 (arithmetic_op -> PLUS .)
    COLON           reduce using rule 11 (arithmetic_op -> PLUS .)
    SEMICOLON       reduce using rule 11 (arithmetic_op -> PLUS .)
    LEFT_PAREN      reduce using rule 11 (arithmetic_op -> PLUS .)
    RIGHT_PAREN     reduce using rule 11 (arithmetic_op -> PLUS .)


state 41

    (12) arithmetic_op -> MINUS .

    NUMBER          reduce using rule 12 (arithmetic_op -> MINUS .)
    STRING          reduce using rule 12 (arithmetic_op -> MINUS .)
    VARIABLE        reduce using rule 12 (arithmetic_op -> MINUS .)
    EXCLAMATION     reduce using rule 12 (arithmetic_op -> MINUS .)
    AT              reduce using rule 12 (arithmetic_op -> MINUS .)
    DOT             reduce using rule 12 (arithmetic_op -> MINUS .)
    COLON           reduce using rule 12 (arithmetic_op -> MINUS .)
    SEMICOLON       reduce using rule 12 (arithmetic_op -> MINUS .)
    LEFT_PAREN      reduce using rule 12 (arithmetic_op -> MINUS .)
    RIGHT_PAREN     reduce using rule 12 (arithmetic_op -> MINUS .)


state 42

    (13) arithmetic_op -> TIMES .

    NUMBER          reduce using rule 13 (arithmetic_op -> TIMES .)
    STRING          reduce using rule 13 (arithmetic_op -> TIMES .)
    VARIABLE        reduce using rule 13 (arithmetic_op -> TIMES .)
    EXCLAMATION     reduce using rule 13 (arithmetic_op -> TIMES .)
    AT              reduce using rule 13 (arithmetic_op -> TIMES .)
    DOT             reduce using rule 13 (arithmetic_op -> TIMES .)
    COLON           reduce using rule 13 (arithmetic_op -> TIMES .)
    SEMICOLON       reduce using rule 13 (arithmetic_op -> TIMES .)
    LEFT_PAREN      reduce using rule 13 (arithmetic_op -> TIMES .)
    RIGHT_PAREN     reduce using rule 13 (arithmetic_op -> TIMES .)


state 43

    (14) arithmetic_op -> DIVIDE .

    NUMBER          reduce using rule 14 (arithmetic_op -> DIVIDE .)
    STRING          reduce using rule 14 (arithmetic_op -> DIVIDE .)
    VARIABLE        reduce using rule 14 (arithmetic_op -> DIVIDE .)
    EXCLAMATION     reduce using rule 14 (arithmetic_op -> DIVIDE .)
    AT              reduce using rule 14 (arithmetic_op -> DIVIDE .)
    DOT             reduce using rule 14 (arithmetic_op -> DIVIDE .)
    COLON           reduce using rule 14 (arithmetic_op -> DIVIDE .)
    SEMICOLON       reduce using rule 14 (arithmetic_op -> DIVIDE .)
    LEFT_PAREN      reduce using rule 14 (arithmetic_op -> DIVIDE .)
    RIGHT_PAREN     reduce using rule 14 (arithmetic_op -> DIVIDE .)


state 44

    (15) arithmetic_op -> MOD .

    NUMBER          reduce using rule 15 (arithmetic_op -> MOD .)
    STRING          reduce using rule 15 (arithmetic_op -> MOD .)
    VARIABLE        reduce using rule 15 (arithmetic_op -> MOD .)
    EXCLAMATION     reduce using rule 15 (arithmetic_op -> MOD .)
    AT              reduce using rule 15 (arithmetic_op -> MOD .)
    DOT             reduce using rule 15 (arithmetic_op -> MOD .)
    COLON           reduce using rule 15 (arithmetic_op -> MOD .)
    SEMICOLON       reduce using rule 15 (arithmetic_op -> MOD .)
    LEFT_PAREN      reduce using rule 15 (arithmetic_op -> MOD .)
    RIGHT_PAREN     reduce using rule 15 (arithmetic_op -> MOD .)


state 45

    (16) arithmetic_op -> POWER .

    NUMBER          reduce using rule 16 (arithmetic_op -> POWER .)
    STRING          reduce using rule 16 (arithmetic_op -> POWER .)
    VARIABLE        reduce using rule 16 (arithmetic_op -> POWER .)
    EXCLAMATION     reduce using rule 16 (arithmetic_op -> POWER .)
    AT              reduce using rule 16 (arithmetic_op -> POWER .)
    DOT             reduce using rule 16 (arithmetic_op -> POWER .)
    COLON           reduce using rule 16 (arithmetic_op -> POWER .)
    SEMICOLON       reduce using rule 16 (arithmetic_op -> POWER .)
    LEFT_PAREN      reduce using rule 16 (arithmetic_op -> POWER .)
    RIGHT_PAREN     reduce using rule 16 (arithmetic_op -> POWER .)


state 46

    (18) relational_op -> EQUAL .

    NUMBER          reduce using rule 18 (relational_op -> EQUAL .)
    STRING          reduce using rule 18 (relational_op -> EQUAL .)
    VARIABLE        reduce using rule 18 (relational_op -> EQUAL .)
    EXCLAMATION     reduce using rule 18 (relational_op -> EQUAL .)
    AT              reduce using rule 18 (relational_op -> EQUAL .)
    DOT             reduce using rule 18 (relational_op -> EQUAL .)
    COLON           reduce using rule 18 (relational_op -> EQUAL .)
    SEMICOLON       reduce using rule 18 (relational_op -> EQUAL .)
    LEFT_PAREN      reduce using rule 18 (relational_op -> EQUAL .)
    RIGHT_PAREN     reduce using rule 18 (relational_op -> EQUAL .)


state 47

    (19) relational_op -> LESS_THAN .

    NUMBER          reduce using rule 19 (relational_op -> LESS_THAN .)
    STRING          reduce using rule 19 (relational_op -> LESS_THAN .)
    VARIABLE        reduce using rule 19 (relational_op -> LESS_THAN .)
    EXCLAMATION     reduce using rule 19 (relational_op -> LESS_THAN .)
    AT              reduce using rule 19 (relational_op -> LESS_THAN .)
    DOT             reduce using rule 19 (relational_op -> LESS_THAN .)
    COLON           reduce using rule 19 (relational_op -> LESS_THAN .)
    SEMICOLON       reduce using rule 19 (relational_op -> LESS_THAN .)
    LEFT_PAREN      reduce using rule 19 (relational_op -> LESS_THAN .)
    RIGHT_PAREN     reduce using rule 19 (relational_op -> LESS_THAN .)


state 48

    (20) relational_op -> GREATER_THAN .

    NUMBER          reduce using rule 20 (relational_op -> GREATER_THAN .)
    STRING          reduce using rule 20 (relational_op -> GREATER_THAN .)
    VARIABLE        reduce using rule 20 (relational_op -> GREATER_THAN .)
    EXCLAMATION     reduce using rule 20 (relational_op -> GREATER_THAN .)
    AT              reduce using rule 20 (relational_op -> GREATER_THAN .)
    DOT             reduce using rule 20 (relational_op -> GREATER_THAN .)
    COLON           reduce using rule 20 (relational_op -> GREATER_THAN .)
    SEMICOLON       reduce using rule 20 (relational_op -> GREATER_THAN .)
    LEFT_PAREN      reduce using rule 20 (relational_op -> GREATER_THAN .)
    RIGHT_PAREN     reduce using rule 20 (relational_op -> GREATER_THAN .)


state 49

    (38) if_statement -> IF expression . THEN
    (10) expression -> expression . arithmetic_op expression
    (17) expression -> expression . relational_op expression
    (11) arithmetic_op -> . PLUS
    (12) arithmetic_op -> . MINUS
    (13) arithmetic_op -> . TIMES
    (14) arithmetic_op -> . DIVIDE
    (15) arithmetic_op -> . MOD
    (16) arithmetic_op -> . POWER
    (18) relational_op -> . EQUAL
    (19) relational_op -> . LESS_THAN
    (20) relational_op -> . GREATER_THAN

    THEN            shift and go to state 54
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    TIMES           shift and go to state 42
    DIVIDE          shift and go to state 43
    MOD             shift and go to state 44
    POWER           shift and go to state 45
    EQUAL           shift and go to state 46
    LESS_THAN       shift and go to state 47
    GREATER_THAN    shift and go to state 48

    arithmetic_op                  shift and go to state 38
    relational_op                  shift and go to state 39

state 50

    (40) while_loop -> WHILE expression . DO statements LOOP
    (10) expression -> expression . arithmetic_op expression
    (17) expression -> expression . relational_op expression
    (11) arithmetic_op -> . PLUS
    (12) arithmetic_op -> . MINUS
    (13) arithmetic_op -> . TIMES
    (14) arithmetic_op -> . DIVIDE
    (15) arithmetic_op -> . MOD
    (16) arithmetic_op -> . POWER
    (18) relational_op -> . EQUAL
    (19) relational_op -> . LESS_THAN
    (20) relational_op -> . GREATER_THAN

    DO              shift and go to state 55
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    TIMES           shift and go to state 42
    DIVIDE          shift and go to state 43
    MOD             shift and go to state 44
    POWER           shift and go to state 45
    EQUAL           shift and go to state 46
    LESS_THAN       shift and go to state 47
    GREATER_THAN    shift and go to state 48

    arithmetic_op                  shift and go to state 38
    relational_op                  shift and go to state 39

state 51

    (41) repeat_loop -> BEGIN statements . WHILE expression REPEAT
    (3) statements -> statements . statement
    (4) statement -> . expression
    (5) statement -> . flow_control
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (8) expression -> . VARIABLE
    (9) expression -> . special_expression
    (10) expression -> . expression arithmetic_op expression
    (17) expression -> . expression relational_op expression
    (28) flow_control -> . if_statement
    (29) flow_control -> . else_statement
    (30) flow_control -> . while_loop
    (31) flow_control -> . repeat_loop
    (32) flow_control -> . exit_statement
    (33) flow_control -> . drop_statement
    (34) flow_control -> . dup_statement
    (35) flow_control -> . swap_statement
    (36) flow_control -> . rot_statement
    (37) flow_control -> . over_statement
    (21) special_expression -> . EXCLAMATION
    (22) special_expression -> . AT
    (23) special_expression -> . DOT
    (24) special_expression -> . COLON
    (25) special_expression -> . SEMICOLON
    (26) special_expression -> . LEFT_PAREN
    (27) special_expression -> . RIGHT_PAREN
    (38) if_statement -> . IF expression THEN
    (39) else_statement -> . ELSE
    (40) while_loop -> . WHILE expression DO statements LOOP
    (41) repeat_loop -> . BEGIN statements WHILE expression REPEAT
    (42) exit_statement -> . EXIT
    (43) drop_statement -> . DROP
    (44) dup_statement -> . DUP
    (45) swap_statement -> . SWAP
    (46) rot_statement -> . ROT
    (47) over_statement -> . OVER

    WHILE           shift and go to state 56
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    VARIABLE        shift and go to state 8
    EXCLAMATION     shift and go to state 20
    AT              shift and go to state 21
    DOT             shift and go to state 22
    COLON           shift and go to state 23
    SEMICOLON       shift and go to state 24
    LEFT_PAREN      shift and go to state 25
    RIGHT_PAREN     shift and go to state 26
    IF              shift and go to state 27
    ELSE            shift and go to state 28
    BEGIN           shift and go to state 30
    EXIT            shift and go to state 31
    DROP            shift and go to state 32
    DUP             shift and go to state 33
    SWAP            shift and go to state 34
    ROT             shift and go to state 35
    OVER            shift and go to state 36

    expression                     shift and go to state 4
    statement                      shift and go to state 37
    flow_control                   shift and go to state 5
    special_expression             shift and go to state 9
    if_statement                   shift and go to state 10
    else_statement                 shift and go to state 11
    while_loop                     shift and go to state 12
    repeat_loop                    shift and go to state 13
    exit_statement                 shift and go to state 14
    drop_statement                 shift and go to state 15
    dup_statement                  shift and go to state 16
    swap_statement                 shift and go to state 17
    rot_statement                  shift and go to state 18
    over_statement                 shift and go to state 19

state 52

    (10) expression -> expression arithmetic_op expression .
    (10) expression -> expression . arithmetic_op expression
    (17) expression -> expression . relational_op expression
    (11) arithmetic_op -> . PLUS
    (12) arithmetic_op -> . MINUS
    (13) arithmetic_op -> . TIMES
    (14) arithmetic_op -> . DIVIDE
    (15) arithmetic_op -> . MOD
    (16) arithmetic_op -> . POWER
    (18) relational_op -> . EQUAL
    (19) relational_op -> . LESS_THAN
    (20) relational_op -> . GREATER_THAN

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
    NUMBER          reduce using rule 10 (expression -> expression arithmetic_op expression .)
    STRING          reduce using rule 10 (expression -> expression arithmetic_op expression .)
    VARIABLE        reduce using rule 10 (expression -> expression arithmetic_op expression .)
    EXCLAMATION     reduce using rule 10 (expression -> expression arithmetic_op expression .)
    AT              reduce using rule 10 (expression -> expression arithmetic_op expression .)
    DOT             reduce using rule 10 (expression -> expression arithmetic_op expression .)
    COLON           reduce using rule 10 (expression -> expression arithmetic_op expression .)
    SEMICOLON       reduce using rule 10 (expression -> expression arithmetic_op expression .)
    LEFT_PAREN      reduce using rule 10 (expression -> expression arithmetic_op expression .)
    RIGHT_PAREN     reduce using rule 10 (expression -> expression arithmetic_op expression .)
    IF              reduce using rule 10 (expression -> expression arithmetic_op expression .)
    ELSE            reduce using rule 10 (expression -> expression arithmetic_op expression .)
    WHILE           reduce using rule 10 (expression -> expression arithmetic_op expression .)
    BEGIN           reduce using rule 10 (expression -> expression arithmetic_op expression .)
    EXIT            reduce using rule 10 (expression -> expression arithmetic_op expression .)
    DROP            reduce using rule 10 (expression -> expression arithmetic_op expression .)
    DUP             reduce using rule 10 (expression -> expression arithmetic_op expression .)
    SWAP            reduce using rule 10 (expression -> expression arithmetic_op expression .)
    ROT             reduce using rule 10 (expression -> expression arithmetic_op expression .)
    OVER            reduce using rule 10 (expression -> expression arithmetic_op expression .)
    $end            reduce using rule 10 (expression -> expression arithmetic_op expression .)
    THEN            reduce using rule 10 (expression -> expression arithmetic_op expression .)
    DO              reduce using rule 10 (expression -> expression arithmetic_op expression .)
    LOOP            reduce using rule 10 (expression -> expression arithmetic_op expression .)
    REPEAT          reduce using rule 10 (expression -> expression arithmetic_op expression .)
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    TIMES           shift and go to state 42
    DIVIDE          shift and go to state 43
    MOD             shift and go to state 44
    POWER           shift and go to state 45
    EQUAL           shift and go to state 46
    LESS_THAN       shift and go to state 47
    GREATER_THAN    shift and go to state 48

  ! PLUS            [ reduce using rule 10 (expression -> expression arithmetic_op expression .) ]
  ! MINUS           [ reduce using rule 10 (expression -> expression arithmetic_op expression .) ]
  ! TIMES           [ reduce using rule 10 (expression -> expression arithmetic_op expression .) ]
  ! DIVIDE          [ reduce using rule 10 (expression -> expression arithmetic_op expression .) ]
  ! MOD             [ reduce using rule 10 (expression -> expression arithmetic_op expression .) ]
  ! POWER           [ reduce using rule 10 (expression -> expression arithmetic_op expression .) ]
  ! EQUAL           [ reduce using rule 10 (expression -> expression arithmetic_op expression .) ]
  ! LESS_THAN       [ reduce using rule 10 (expression -> expression arithmetic_op expression .) ]
  ! GREATER_THAN    [ reduce using rule 10 (expression -> expression arithmetic_op expression .) ]

    arithmetic_op                  shift and go to state 38
    relational_op                  shift and go to state 39

state 53

    (17) expression -> expression relational_op expression .
    (10) expression -> expression . arithmetic_op expression
    (17) expression -> expression . relational_op expression
    (11) arithmetic_op -> . PLUS
    (12) arithmetic_op -> . MINUS
    (13) arithmetic_op -> . TIMES
    (14) arithmetic_op -> . DIVIDE
    (15) arithmetic_op -> . MOD
    (16) arithmetic_op -> . POWER
    (18) relational_op -> . EQUAL
    (19) relational_op -> . LESS_THAN
    (20) relational_op -> . GREATER_THAN

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
    NUMBER          reduce using rule 17 (expression -> expression relational_op expression .)
    STRING          reduce using rule 17 (expression -> expression relational_op expression .)
    VARIABLE        reduce using rule 17 (expression -> expression relational_op expression .)
    EXCLAMATION     reduce using rule 17 (expression -> expression relational_op expression .)
    AT              reduce using rule 17 (expression -> expression relational_op expression .)
    DOT             reduce using rule 17 (expression -> expression relational_op expression .)
    COLON           reduce using rule 17 (expression -> expression relational_op expression .)
    SEMICOLON       reduce using rule 17 (expression -> expression relational_op expression .)
    LEFT_PAREN      reduce using rule 17 (expression -> expression relational_op expression .)
    RIGHT_PAREN     reduce using rule 17 (expression -> expression relational_op expression .)
    IF              reduce using rule 17 (expression -> expression relational_op expression .)
    ELSE            reduce using rule 17 (expression -> expression relational_op expression .)
    WHILE           reduce using rule 17 (expression -> expression relational_op expression .)
    BEGIN           reduce using rule 17 (expression -> expression relational_op expression .)
    EXIT            reduce using rule 17 (expression -> expression relational_op expression .)
    DROP            reduce using rule 17 (expression -> expression relational_op expression .)
    DUP             reduce using rule 17 (expression -> expression relational_op expression .)
    SWAP            reduce using rule 17 (expression -> expression relational_op expression .)
    ROT             reduce using rule 17 (expression -> expression relational_op expression .)
    OVER            reduce using rule 17 (expression -> expression relational_op expression .)
    $end            reduce using rule 17 (expression -> expression relational_op expression .)
    THEN            reduce using rule 17 (expression -> expression relational_op expression .)
    DO              reduce using rule 17 (expression -> expression relational_op expression .)
    LOOP            reduce using rule 17 (expression -> expression relational_op expression .)
    REPEAT          reduce using rule 17 (expression -> expression relational_op expression .)
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    TIMES           shift and go to state 42
    DIVIDE          shift and go to state 43
    MOD             shift and go to state 44
    POWER           shift and go to state 45
    EQUAL           shift and go to state 46
    LESS_THAN       shift and go to state 47
    GREATER_THAN    shift and go to state 48

  ! PLUS            [ reduce using rule 17 (expression -> expression relational_op expression .) ]
  ! MINUS           [ reduce using rule 17 (expression -> expression relational_op expression .) ]
  ! TIMES           [ reduce using rule 17 (expression -> expression relational_op expression .) ]
  ! DIVIDE          [ reduce using rule 17 (expression -> expression relational_op expression .) ]
  ! MOD             [ reduce using rule 17 (expression -> expression relational_op expression .) ]
  ! POWER           [ reduce using rule 17 (expression -> expression relational_op expression .) ]
  ! EQUAL           [ reduce using rule 17 (expression -> expression relational_op expression .) ]
  ! LESS_THAN       [ reduce using rule 17 (expression -> expression relational_op expression .) ]
  ! GREATER_THAN    [ reduce using rule 17 (expression -> expression relational_op expression .) ]

    relational_op                  shift and go to state 39
    arithmetic_op                  shift and go to state 38

state 54

    (38) if_statement -> IF expression THEN .

    NUMBER          reduce using rule 38 (if_statement -> IF expression THEN .)
    STRING          reduce using rule 38 (if_statement -> IF expression THEN .)
    VARIABLE        reduce using rule 38 (if_statement -> IF expression THEN .)
    EXCLAMATION     reduce using rule 38 (if_statement -> IF expression THEN .)
    AT              reduce using rule 38 (if_statement -> IF expression THEN .)
    DOT             reduce using rule 38 (if_statement -> IF expression THEN .)
    COLON           reduce using rule 38 (if_statement -> IF expression THEN .)
    SEMICOLON       reduce using rule 38 (if_statement -> IF expression THEN .)
    LEFT_PAREN      reduce using rule 38 (if_statement -> IF expression THEN .)
    RIGHT_PAREN     reduce using rule 38 (if_statement -> IF expression THEN .)
    IF              reduce using rule 38 (if_statement -> IF expression THEN .)
    ELSE            reduce using rule 38 (if_statement -> IF expression THEN .)
    WHILE           reduce using rule 38 (if_statement -> IF expression THEN .)
    BEGIN           reduce using rule 38 (if_statement -> IF expression THEN .)
    EXIT            reduce using rule 38 (if_statement -> IF expression THEN .)
    DROP            reduce using rule 38 (if_statement -> IF expression THEN .)
    DUP             reduce using rule 38 (if_statement -> IF expression THEN .)
    SWAP            reduce using rule 38 (if_statement -> IF expression THEN .)
    ROT             reduce using rule 38 (if_statement -> IF expression THEN .)
    OVER            reduce using rule 38 (if_statement -> IF expression THEN .)
    $end            reduce using rule 38 (if_statement -> IF expression THEN .)
    LOOP            reduce using rule 38 (if_statement -> IF expression THEN .)


state 55

    (40) while_loop -> WHILE expression DO . statements LOOP
    (2) statements -> . statement
    (3) statements -> . statements statement
    (4) statement -> . expression
    (5) statement -> . flow_control
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (8) expression -> . VARIABLE
    (9) expression -> . special_expression
    (10) expression -> . expression arithmetic_op expression
    (17) expression -> . expression relational_op expression
    (28) flow_control -> . if_statement
    (29) flow_control -> . else_statement
    (30) flow_control -> . while_loop
    (31) flow_control -> . repeat_loop
    (32) flow_control -> . exit_statement
    (33) flow_control -> . drop_statement
    (34) flow_control -> . dup_statement
    (35) flow_control -> . swap_statement
    (36) flow_control -> . rot_statement
    (37) flow_control -> . over_statement
    (21) special_expression -> . EXCLAMATION
    (22) special_expression -> . AT
    (23) special_expression -> . DOT
    (24) special_expression -> . COLON
    (25) special_expression -> . SEMICOLON
    (26) special_expression -> . LEFT_PAREN
    (27) special_expression -> . RIGHT_PAREN
    (38) if_statement -> . IF expression THEN
    (39) else_statement -> . ELSE
    (40) while_loop -> . WHILE expression DO statements LOOP
    (41) repeat_loop -> . BEGIN statements WHILE expression REPEAT
    (42) exit_statement -> . EXIT
    (43) drop_statement -> . DROP
    (44) dup_statement -> . DUP
    (45) swap_statement -> . SWAP
    (46) rot_statement -> . ROT
    (47) over_statement -> . OVER

    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    VARIABLE        shift and go to state 8
    EXCLAMATION     shift and go to state 20
    AT              shift and go to state 21
    DOT             shift and go to state 22
    COLON           shift and go to state 23
    SEMICOLON       shift and go to state 24
    LEFT_PAREN      shift and go to state 25
    RIGHT_PAREN     shift and go to state 26
    IF              shift and go to state 27
    ELSE            shift and go to state 28
    WHILE           shift and go to state 29
    BEGIN           shift and go to state 30
    EXIT            shift and go to state 31
    DROP            shift and go to state 32
    DUP             shift and go to state 33
    SWAP            shift and go to state 34
    ROT             shift and go to state 35
    OVER            shift and go to state 36

    expression                     shift and go to state 4
    statements                     shift and go to state 57
    statement                      shift and go to state 3
    flow_control                   shift and go to state 5
    special_expression             shift and go to state 9
    if_statement                   shift and go to state 10
    else_statement                 shift and go to state 11
    while_loop                     shift and go to state 12
    repeat_loop                    shift and go to state 13
    exit_statement                 shift and go to state 14
    drop_statement                 shift and go to state 15
    dup_statement                  shift and go to state 16
    swap_statement                 shift and go to state 17
    rot_statement                  shift and go to state 18
    over_statement                 shift and go to state 19

state 56

    (41) repeat_loop -> BEGIN statements WHILE . expression REPEAT
    (40) while_loop -> WHILE . expression DO statements LOOP
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (8) expression -> . VARIABLE
    (9) expression -> . special_expression
    (10) expression -> . expression arithmetic_op expression
    (17) expression -> . expression relational_op expression
    (21) special_expression -> . EXCLAMATION
    (22) special_expression -> . AT
    (23) special_expression -> . DOT
    (24) special_expression -> . COLON
    (25) special_expression -> . SEMICOLON
    (26) special_expression -> . LEFT_PAREN
    (27) special_expression -> . RIGHT_PAREN

    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    VARIABLE        shift and go to state 8
    EXCLAMATION     shift and go to state 20
    AT              shift and go to state 21
    DOT             shift and go to state 22
    COLON           shift and go to state 23
    SEMICOLON       shift and go to state 24
    LEFT_PAREN      shift and go to state 25
    RIGHT_PAREN     shift and go to state 26

    expression                     shift and go to state 58
    special_expression             shift and go to state 9

state 57

    (40) while_loop -> WHILE expression DO statements . LOOP
    (3) statements -> statements . statement
    (4) statement -> . expression
    (5) statement -> . flow_control
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (8) expression -> . VARIABLE
    (9) expression -> . special_expression
    (10) expression -> . expression arithmetic_op expression
    (17) expression -> . expression relational_op expression
    (28) flow_control -> . if_statement
    (29) flow_control -> . else_statement
    (30) flow_control -> . while_loop
    (31) flow_control -> . repeat_loop
    (32) flow_control -> . exit_statement
    (33) flow_control -> . drop_statement
    (34) flow_control -> . dup_statement
    (35) flow_control -> . swap_statement
    (36) flow_control -> . rot_statement
    (37) flow_control -> . over_statement
    (21) special_expression -> . EXCLAMATION
    (22) special_expression -> . AT
    (23) special_expression -> . DOT
    (24) special_expression -> . COLON
    (25) special_expression -> . SEMICOLON
    (26) special_expression -> . LEFT_PAREN
    (27) special_expression -> . RIGHT_PAREN
    (38) if_statement -> . IF expression THEN
    (39) else_statement -> . ELSE
    (40) while_loop -> . WHILE expression DO statements LOOP
    (41) repeat_loop -> . BEGIN statements WHILE expression REPEAT
    (42) exit_statement -> . EXIT
    (43) drop_statement -> . DROP
    (44) dup_statement -> . DUP
    (45) swap_statement -> . SWAP
    (46) rot_statement -> . ROT
    (47) over_statement -> . OVER

    LOOP            shift and go to state 59
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    VARIABLE        shift and go to state 8
    EXCLAMATION     shift and go to state 20
    AT              shift and go to state 21
    DOT             shift and go to state 22
    COLON           shift and go to state 23
    SEMICOLON       shift and go to state 24
    LEFT_PAREN      shift and go to state 25
    RIGHT_PAREN     shift and go to state 26
    IF              shift and go to state 27
    ELSE            shift and go to state 28
    WHILE           shift and go to state 29
    BEGIN           shift and go to state 30
    EXIT            shift and go to state 31
    DROP            shift and go to state 32
    DUP             shift and go to state 33
    SWAP            shift and go to state 34
    ROT             shift and go to state 35
    OVER            shift and go to state 36

    expression                     shift and go to state 4
    statement                      shift and go to state 37
    flow_control                   shift and go to state 5
    special_expression             shift and go to state 9
    if_statement                   shift and go to state 10
    else_statement                 shift and go to state 11
    while_loop                     shift and go to state 12
    repeat_loop                    shift and go to state 13
    exit_statement                 shift and go to state 14
    drop_statement                 shift and go to state 15
    dup_statement                  shift and go to state 16
    swap_statement                 shift and go to state 17
    rot_statement                  shift and go to state 18
    over_statement                 shift and go to state 19

state 58

    (41) repeat_loop -> BEGIN statements WHILE expression . REPEAT
    (40) while_loop -> WHILE expression . DO statements LOOP
    (10) expression -> expression . arithmetic_op expression
    (17) expression -> expression . relational_op expression
    (11) arithmetic_op -> . PLUS
    (12) arithmetic_op -> . MINUS
    (13) arithmetic_op -> . TIMES
    (14) arithmetic_op -> . DIVIDE
    (15) arithmetic_op -> . MOD
    (16) arithmetic_op -> . POWER
    (18) relational_op -> . EQUAL
    (19) relational_op -> . LESS_THAN
    (20) relational_op -> . GREATER_THAN

    REPEAT          shift and go to state 60
    DO              shift and go to state 55
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    TIMES           shift and go to state 42
    DIVIDE          shift and go to state 43
    MOD             shift and go to state 44
    POWER           shift and go to state 45
    EQUAL           shift and go to state 46
    LESS_THAN       shift and go to state 47
    GREATER_THAN    shift and go to state 48

    arithmetic_op                  shift and go to state 38
    relational_op                  shift and go to state 39

state 59

    (40) while_loop -> WHILE expression DO statements LOOP .

    NUMBER          reduce using rule 40 (while_loop -> WHILE expression DO statements LOOP .)
    STRING          reduce using rule 40 (while_loop -> WHILE expression DO statements LOOP .)
    VARIABLE        reduce using rule 40 (while_loop -> WHILE expression DO statements LOOP .)
    EXCLAMATION     reduce using rule 40 (while_loop -> WHILE expression DO statements LOOP .)
    AT              reduce using rule 40 (while_loop -> WHILE expression DO statements LOOP .)
    DOT             reduce using rule 40 (while_loop -> WHILE expression DO statements LOOP .)
    COLON           reduce using rule 40 (while_loop -> WHILE expression DO statements LOOP .)
    SEMICOLON       reduce using rule 40 (while_loop -> WHILE expression DO statements LOOP .)
    LEFT_PAREN      reduce using rule 40 (while_loop -> WHILE expression DO statements LOOP .)
    RIGHT_PAREN     reduce using rule 40 (while_loop -> WHILE expression DO statements LOOP .)
    IF              reduce using rule 40 (while_loop -> WHILE expression DO statements LOOP .)
    ELSE            reduce using rule 40 (while_loop -> WHILE expression DO statements LOOP .)
    WHILE           reduce using rule 40 (while_loop -> WHILE expression DO statements LOOP .)
    BEGIN           reduce using rule 40 (while_loop -> WHILE expression DO statements LOOP .)
    EXIT            reduce using rule 40 (while_loop -> WHILE expression DO statements LOOP .)
    DROP            reduce using rule 40 (while_loop -> WHILE expression DO statements LOOP .)
    DUP             reduce using rule 40 (while_loop -> WHILE expression DO statements LOOP .)
    SWAP            reduce using rule 40 (while_loop -> WHILE expression DO statements LOOP .)
    ROT             reduce using rule 40 (while_loop -> WHILE expression DO statements LOOP .)
    OVER            reduce using rule 40 (while_loop -> WHILE expression DO statements LOOP .)
    $end            reduce using rule 40 (while_loop -> WHILE expression DO statements LOOP .)
    LOOP            reduce using rule 40 (while_loop -> WHILE expression DO statements LOOP .)


state 60

    (41) repeat_loop -> BEGIN statements WHILE expression REPEAT .

    NUMBER          reduce using rule 41 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    STRING          reduce using rule 41 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    VARIABLE        reduce using rule 41 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    EXCLAMATION     reduce using rule 41 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    AT              reduce using rule 41 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    DOT             reduce using rule 41 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    COLON           reduce using rule 41 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    SEMICOLON       reduce using rule 41 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    LEFT_PAREN      reduce using rule 41 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    RIGHT_PAREN     reduce using rule 41 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    IF              reduce using rule 41 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    ELSE            reduce using rule 41 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    WHILE           reduce using rule 41 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    BEGIN           reduce using rule 41 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    EXIT            reduce using rule 41 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    DROP            reduce using rule 41 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    DUP             reduce using rule 41 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    SWAP            reduce using rule 41 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    ROT             reduce using rule 41 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    OVER            reduce using rule 41 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    $end            reduce using rule 41 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    LOOP            reduce using rule 41 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 52 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 52 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 52 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 52 resolved as shift
WARNING: shift/reduce conflict for MOD in state 52 resolved as shift
WARNING: shift/reduce conflict for POWER in state 52 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 52 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 52 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 52 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 53 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 53 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 53 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 53 resolved as shift
WARNING: shift/reduce conflict for MOD in state 53 resolved as shift
WARNING: shift/reduce conflict for POWER in state 53 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 53 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 53 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 53 resolved as shift
