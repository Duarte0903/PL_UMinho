Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CR
    NEWLINE

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statement
Rule 3     statements -> statements statement
Rule 4     statement -> expression
Rule 5     statement -> flow_control
Rule 6     expression -> NUMBER
Rule 7     expression -> STRING
Rule 8     expression -> VARIABLE
Rule 9     expression -> CHAR
Rule 10    expression -> EMIT
Rule 11    expression -> special_expression
Rule 12    expression -> reserved_word
Rule 13    expression -> DOT
Rule 14    expression -> STDOUT
Rule 15    dup_statement -> DUP
Rule 16    expression -> COMMENT
Rule 17    expression -> expression expression arithmetic_op
Rule 18    arithmetic_op -> PLUS
Rule 19    arithmetic_op -> MINUS
Rule 20    arithmetic_op -> TIMES
Rule 21    arithmetic_op -> DIVIDE
Rule 22    arithmetic_op -> MOD
Rule 23    expression -> expression expression relational_op
Rule 24    relational_op -> NOT
Rule 25    relational_op -> INF
Rule 26    relational_op -> SUP
Rule 27    relational_op -> INFEQ
Rule 28    relational_op -> SUPEQ
Rule 29    expression -> expression expression string_op
Rule 30    string_op -> CONCAT
Rule 31    special_expression -> EXCLAMATION
Rule 32    special_expression -> AT
Rule 33    special_expression -> COLON
Rule 34    special_expression -> SEMICOLON
Rule 35    special_expression -> LEFT_PAREN
Rule 36    special_expression -> RIGHT_PAREN
Rule 37    flow_control -> if_statement
Rule 38    flow_control -> else_statement
Rule 39    flow_control -> while_loop
Rule 40    flow_control -> repeat_loop
Rule 41    flow_control -> exit_statement
Rule 42    flow_control -> drop_statement
Rule 43    if_statement -> IF expression THEN statements
Rule 44    else_statement -> ELSE
Rule 45    while_loop -> WHILE expression DO statements LOOP
Rule 46    repeat_loop -> BEGIN statements WHILE expression REPEAT
Rule 47    exit_statement -> EXIT
Rule 48    drop_statement -> DROP
Rule 49    swap_statement -> SWAP
Rule 50    rot_statement -> ROT
Rule 51    over_statement -> OVER

Terminals, with rules where they appear

AT                   : 32
BEGIN                : 46
CHAR                 : 9
COLON                : 33
COMMENT              : 16
CONCAT               : 30
CR                   : 
DIVIDE               : 21
DO                   : 45
DOT                  : 13
DROP                 : 48
DUP                  : 15
ELSE                 : 44
EMIT                 : 10
EXCLAMATION          : 31
EXIT                 : 47
IF                   : 43
INF                  : 25
INFEQ                : 27
LEFT_PAREN           : 35
LOOP                 : 45
MINUS                : 19
MOD                  : 22
NEWLINE              : 
NOT                  : 24
NUMBER               : 6
OVER                 : 51
PLUS                 : 18
REPEAT               : 46
RIGHT_PAREN          : 36
ROT                  : 50
SEMICOLON            : 34
STDOUT               : 14
STRING               : 7
SUP                  : 26
SUPEQ                : 28
SWAP                 : 49
THEN                 : 43
TIMES                : 20
VARIABLE             : 8
WHILE                : 45 46
error                : 
reserved_word        : 12

Nonterminals, with rules where they appear

arithmetic_op        : 17
drop_statement       : 42
dup_statement        : 
else_statement       : 38
exit_statement       : 41
expression           : 4 17 17 23 23 29 29 43 45 46
flow_control         : 5
if_statement         : 37
over_statement       : 
program              : 0
relational_op        : 23
repeat_loop          : 40
rot_statement        : 
special_expression   : 11
statement            : 2 3
statements           : 1 3 43 45 46
string_op            : 29
swap_statement       : 
while_loop           : 39

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statement
    (3) statements -> . statements statement
    (4) statement -> . expression
    (5) statement -> . flow_control
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (8) expression -> . VARIABLE
    (9) expression -> . CHAR
    (10) expression -> . EMIT
    (11) expression -> . special_expression
    (12) expression -> . reserved_word
    (13) expression -> . DOT
    (14) expression -> . STDOUT
    (16) expression -> . COMMENT
    (17) expression -> . expression expression arithmetic_op
    (23) expression -> . expression expression relational_op
    (29) expression -> . expression expression string_op
    (37) flow_control -> . if_statement
    (38) flow_control -> . else_statement
    (39) flow_control -> . while_loop
    (40) flow_control -> . repeat_loop
    (41) flow_control -> . exit_statement
    (42) flow_control -> . drop_statement
    (31) special_expression -> . EXCLAMATION
    (32) special_expression -> . AT
    (33) special_expression -> . COLON
    (34) special_expression -> . SEMICOLON
    (35) special_expression -> . LEFT_PAREN
    (36) special_expression -> . RIGHT_PAREN
    (43) if_statement -> . IF expression THEN statements
    (44) else_statement -> . ELSE
    (45) while_loop -> . WHILE expression DO statements LOOP
    (46) repeat_loop -> . BEGIN statements WHILE expression REPEAT
    (47) exit_statement -> . EXIT
    (48) drop_statement -> . DROP

    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    VARIABLE        shift and go to state 8
    CHAR            shift and go to state 9
    EMIT            shift and go to state 10
    reserved_word   shift and go to state 12
    DOT             shift and go to state 13
    STDOUT          shift and go to state 14
    COMMENT         shift and go to state 15
    EXCLAMATION     shift and go to state 22
    AT              shift and go to state 23
    COLON           shift and go to state 24
    SEMICOLON       shift and go to state 25
    LEFT_PAREN      shift and go to state 26
    RIGHT_PAREN     shift and go to state 27
    IF              shift and go to state 28
    ELSE            shift and go to state 29
    WHILE           shift and go to state 30
    BEGIN           shift and go to state 31
    EXIT            shift and go to state 32
    DROP            shift and go to state 33

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    expression                     shift and go to state 4
    flow_control                   shift and go to state 5
    special_expression             shift and go to state 11
    if_statement                   shift and go to state 16
    else_statement                 shift and go to state 17
    while_loop                     shift and go to state 18
    repeat_loop                    shift and go to state 19
    exit_statement                 shift and go to state 20
    drop_statement                 shift and go to state 21

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .
    (3) statements -> statements . statement
    (4) statement -> . expression
    (5) statement -> . flow_control
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (8) expression -> . VARIABLE
    (9) expression -> . CHAR
    (10) expression -> . EMIT
    (11) expression -> . special_expression
    (12) expression -> . reserved_word
    (13) expression -> . DOT
    (14) expression -> . STDOUT
    (16) expression -> . COMMENT
    (17) expression -> . expression expression arithmetic_op
    (23) expression -> . expression expression relational_op
    (29) expression -> . expression expression string_op
    (37) flow_control -> . if_statement
    (38) flow_control -> . else_statement
    (39) flow_control -> . while_loop
    (40) flow_control -> . repeat_loop
    (41) flow_control -> . exit_statement
    (42) flow_control -> . drop_statement
    (31) special_expression -> . EXCLAMATION
    (32) special_expression -> . AT
    (33) special_expression -> . COLON
    (34) special_expression -> . SEMICOLON
    (35) special_expression -> . LEFT_PAREN
    (36) special_expression -> . RIGHT_PAREN
    (43) if_statement -> . IF expression THEN statements
    (44) else_statement -> . ELSE
    (45) while_loop -> . WHILE expression DO statements LOOP
    (46) repeat_loop -> . BEGIN statements WHILE expression REPEAT
    (47) exit_statement -> . EXIT
    (48) drop_statement -> . DROP

    $end            reduce using rule 1 (program -> statements .)
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    VARIABLE        shift and go to state 8
    CHAR            shift and go to state 9
    EMIT            shift and go to state 10
    reserved_word   shift and go to state 12
    DOT             shift and go to state 13
    STDOUT          shift and go to state 14
    COMMENT         shift and go to state 15
    EXCLAMATION     shift and go to state 22
    AT              shift and go to state 23
    COLON           shift and go to state 24
    SEMICOLON       shift and go to state 25
    LEFT_PAREN      shift and go to state 26
    RIGHT_PAREN     shift and go to state 27
    IF              shift and go to state 28
    ELSE            shift and go to state 29
    WHILE           shift and go to state 30
    BEGIN           shift and go to state 31
    EXIT            shift and go to state 32
    DROP            shift and go to state 33

    statement                      shift and go to state 34
    expression                     shift and go to state 4
    flow_control                   shift and go to state 5
    special_expression             shift and go to state 11
    if_statement                   shift and go to state 16
    else_statement                 shift and go to state 17
    while_loop                     shift and go to state 18
    repeat_loop                    shift and go to state 19
    exit_statement                 shift and go to state 20
    drop_statement                 shift and go to state 21

state 3

    (2) statements -> statement .

    NUMBER          reduce using rule 2 (statements -> statement .)
    STRING          reduce using rule 2 (statements -> statement .)
    VARIABLE        reduce using rule 2 (statements -> statement .)
    CHAR            reduce using rule 2 (statements -> statement .)
    EMIT            reduce using rule 2 (statements -> statement .)
    reserved_word   reduce using rule 2 (statements -> statement .)
    DOT             reduce using rule 2 (statements -> statement .)
    STDOUT          reduce using rule 2 (statements -> statement .)
    COMMENT         reduce using rule 2 (statements -> statement .)
    EXCLAMATION     reduce using rule 2 (statements -> statement .)
    AT              reduce using rule 2 (statements -> statement .)
    COLON           reduce using rule 2 (statements -> statement .)
    SEMICOLON       reduce using rule 2 (statements -> statement .)
    LEFT_PAREN      reduce using rule 2 (statements -> statement .)
    RIGHT_PAREN     reduce using rule 2 (statements -> statement .)
    IF              reduce using rule 2 (statements -> statement .)
    ELSE            reduce using rule 2 (statements -> statement .)
    WHILE           reduce using rule 2 (statements -> statement .)
    BEGIN           reduce using rule 2 (statements -> statement .)
    EXIT            reduce using rule 2 (statements -> statement .)
    DROP            reduce using rule 2 (statements -> statement .)
    $end            reduce using rule 2 (statements -> statement .)
    LOOP            reduce using rule 2 (statements -> statement .)


state 4

    (4) statement -> expression .
    (17) expression -> expression . expression arithmetic_op
    (23) expression -> expression . expression relational_op
    (29) expression -> expression . expression string_op
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (8) expression -> . VARIABLE
    (9) expression -> . CHAR
    (10) expression -> . EMIT
    (11) expression -> . special_expression
    (12) expression -> . reserved_word
    (13) expression -> . DOT
    (14) expression -> . STDOUT
    (16) expression -> . COMMENT
    (17) expression -> . expression expression arithmetic_op
    (23) expression -> . expression expression relational_op
    (29) expression -> . expression expression string_op
    (31) special_expression -> . EXCLAMATION
    (32) special_expression -> . AT
    (33) special_expression -> . COLON
    (34) special_expression -> . SEMICOLON
    (35) special_expression -> . LEFT_PAREN
    (36) special_expression -> . RIGHT_PAREN

  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for EMIT resolved as shift
  ! shift/reduce conflict for reserved_word resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for STDOUT resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for EXCLAMATION resolved as shift
  ! shift/reduce conflict for AT resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for RIGHT_PAREN resolved as shift
    IF              reduce using rule 4 (statement -> expression .)
    ELSE            reduce using rule 4 (statement -> expression .)
    WHILE           reduce using rule 4 (statement -> expression .)
    BEGIN           reduce using rule 4 (statement -> expression .)
    EXIT            reduce using rule 4 (statement -> expression .)
    DROP            reduce using rule 4 (statement -> expression .)
    $end            reduce using rule 4 (statement -> expression .)
    LOOP            reduce using rule 4 (statement -> expression .)
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    VARIABLE        shift and go to state 8
    CHAR            shift and go to state 9
    EMIT            shift and go to state 10
    reserved_word   shift and go to state 12
    DOT             shift and go to state 13
    STDOUT          shift and go to state 14
    COMMENT         shift and go to state 15
    EXCLAMATION     shift and go to state 22
    AT              shift and go to state 23
    COLON           shift and go to state 24
    SEMICOLON       shift and go to state 25
    LEFT_PAREN      shift and go to state 26
    RIGHT_PAREN     shift and go to state 27

  ! NUMBER          [ reduce using rule 4 (statement -> expression .) ]
  ! STRING          [ reduce using rule 4 (statement -> expression .) ]
  ! VARIABLE        [ reduce using rule 4 (statement -> expression .) ]
  ! CHAR            [ reduce using rule 4 (statement -> expression .) ]
  ! EMIT            [ reduce using rule 4 (statement -> expression .) ]
  ! reserved_word   [ reduce using rule 4 (statement -> expression .) ]
  ! DOT             [ reduce using rule 4 (statement -> expression .) ]
  ! STDOUT          [ reduce using rule 4 (statement -> expression .) ]
  ! COMMENT         [ reduce using rule 4 (statement -> expression .) ]
  ! EXCLAMATION     [ reduce using rule 4 (statement -> expression .) ]
  ! AT              [ reduce using rule 4 (statement -> expression .) ]
  ! COLON           [ reduce using rule 4 (statement -> expression .) ]
  ! SEMICOLON       [ reduce using rule 4 (statement -> expression .) ]
  ! LEFT_PAREN      [ reduce using rule 4 (statement -> expression .) ]
  ! RIGHT_PAREN     [ reduce using rule 4 (statement -> expression .) ]

    expression                     shift and go to state 35
    special_expression             shift and go to state 11

state 5

    (5) statement -> flow_control .

    NUMBER          reduce using rule 5 (statement -> flow_control .)
    STRING          reduce using rule 5 (statement -> flow_control .)
    VARIABLE        reduce using rule 5 (statement -> flow_control .)
    CHAR            reduce using rule 5 (statement -> flow_control .)
    EMIT            reduce using rule 5 (statement -> flow_control .)
    reserved_word   reduce using rule 5 (statement -> flow_control .)
    DOT             reduce using rule 5 (statement -> flow_control .)
    STDOUT          reduce using rule 5 (statement -> flow_control .)
    COMMENT         reduce using rule 5 (statement -> flow_control .)
    EXCLAMATION     reduce using rule 5 (statement -> flow_control .)
    AT              reduce using rule 5 (statement -> flow_control .)
    COLON           reduce using rule 5 (statement -> flow_control .)
    SEMICOLON       reduce using rule 5 (statement -> flow_control .)
    LEFT_PAREN      reduce using rule 5 (statement -> flow_control .)
    RIGHT_PAREN     reduce using rule 5 (statement -> flow_control .)
    IF              reduce using rule 5 (statement -> flow_control .)
    ELSE            reduce using rule 5 (statement -> flow_control .)
    WHILE           reduce using rule 5 (statement -> flow_control .)
    BEGIN           reduce using rule 5 (statement -> flow_control .)
    EXIT            reduce using rule 5 (statement -> flow_control .)
    DROP            reduce using rule 5 (statement -> flow_control .)
    $end            reduce using rule 5 (statement -> flow_control .)
    LOOP            reduce using rule 5 (statement -> flow_control .)


state 6

    (6) expression -> NUMBER .

    NUMBER          reduce using rule 6 (expression -> NUMBER .)
    STRING          reduce using rule 6 (expression -> NUMBER .)
    VARIABLE        reduce using rule 6 (expression -> NUMBER .)
    CHAR            reduce using rule 6 (expression -> NUMBER .)
    EMIT            reduce using rule 6 (expression -> NUMBER .)
    reserved_word   reduce using rule 6 (expression -> NUMBER .)
    DOT             reduce using rule 6 (expression -> NUMBER .)
    STDOUT          reduce using rule 6 (expression -> NUMBER .)
    COMMENT         reduce using rule 6 (expression -> NUMBER .)
    EXCLAMATION     reduce using rule 6 (expression -> NUMBER .)
    AT              reduce using rule 6 (expression -> NUMBER .)
    COLON           reduce using rule 6 (expression -> NUMBER .)
    SEMICOLON       reduce using rule 6 (expression -> NUMBER .)
    LEFT_PAREN      reduce using rule 6 (expression -> NUMBER .)
    RIGHT_PAREN     reduce using rule 6 (expression -> NUMBER .)
    IF              reduce using rule 6 (expression -> NUMBER .)
    ELSE            reduce using rule 6 (expression -> NUMBER .)
    WHILE           reduce using rule 6 (expression -> NUMBER .)
    BEGIN           reduce using rule 6 (expression -> NUMBER .)
    EXIT            reduce using rule 6 (expression -> NUMBER .)
    DROP            reduce using rule 6 (expression -> NUMBER .)
    $end            reduce using rule 6 (expression -> NUMBER .)
    PLUS            reduce using rule 6 (expression -> NUMBER .)
    MINUS           reduce using rule 6 (expression -> NUMBER .)
    TIMES           reduce using rule 6 (expression -> NUMBER .)
    DIVIDE          reduce using rule 6 (expression -> NUMBER .)
    MOD             reduce using rule 6 (expression -> NUMBER .)
    NOT             reduce using rule 6 (expression -> NUMBER .)
    INF             reduce using rule 6 (expression -> NUMBER .)
    SUP             reduce using rule 6 (expression -> NUMBER .)
    INFEQ           reduce using rule 6 (expression -> NUMBER .)
    SUPEQ           reduce using rule 6 (expression -> NUMBER .)
    CONCAT          reduce using rule 6 (expression -> NUMBER .)
    THEN            reduce using rule 6 (expression -> NUMBER .)
    DO              reduce using rule 6 (expression -> NUMBER .)
    LOOP            reduce using rule 6 (expression -> NUMBER .)
    REPEAT          reduce using rule 6 (expression -> NUMBER .)


state 7

    (7) expression -> STRING .

    NUMBER          reduce using rule 7 (expression -> STRING .)
    STRING          reduce using rule 7 (expression -> STRING .)
    VARIABLE        reduce using rule 7 (expression -> STRING .)
    CHAR            reduce using rule 7 (expression -> STRING .)
    EMIT            reduce using rule 7 (expression -> STRING .)
    reserved_word   reduce using rule 7 (expression -> STRING .)
    DOT             reduce using rule 7 (expression -> STRING .)
    STDOUT          reduce using rule 7 (expression -> STRING .)
    COMMENT         reduce using rule 7 (expression -> STRING .)
    EXCLAMATION     reduce using rule 7 (expression -> STRING .)
    AT              reduce using rule 7 (expression -> STRING .)
    COLON           reduce using rule 7 (expression -> STRING .)
    SEMICOLON       reduce using rule 7 (expression -> STRING .)
    LEFT_PAREN      reduce using rule 7 (expression -> STRING .)
    RIGHT_PAREN     reduce using rule 7 (expression -> STRING .)
    IF              reduce using rule 7 (expression -> STRING .)
    ELSE            reduce using rule 7 (expression -> STRING .)
    WHILE           reduce using rule 7 (expression -> STRING .)
    BEGIN           reduce using rule 7 (expression -> STRING .)
    EXIT            reduce using rule 7 (expression -> STRING .)
    DROP            reduce using rule 7 (expression -> STRING .)
    $end            reduce using rule 7 (expression -> STRING .)
    PLUS            reduce using rule 7 (expression -> STRING .)
    MINUS           reduce using rule 7 (expression -> STRING .)
    TIMES           reduce using rule 7 (expression -> STRING .)
    DIVIDE          reduce using rule 7 (expression -> STRING .)
    MOD             reduce using rule 7 (expression -> STRING .)
    NOT             reduce using rule 7 (expression -> STRING .)
    INF             reduce using rule 7 (expression -> STRING .)
    SUP             reduce using rule 7 (expression -> STRING .)
    INFEQ           reduce using rule 7 (expression -> STRING .)
    SUPEQ           reduce using rule 7 (expression -> STRING .)
    CONCAT          reduce using rule 7 (expression -> STRING .)
    THEN            reduce using rule 7 (expression -> STRING .)
    DO              reduce using rule 7 (expression -> STRING .)
    LOOP            reduce using rule 7 (expression -> STRING .)
    REPEAT          reduce using rule 7 (expression -> STRING .)


state 8

    (8) expression -> VARIABLE .

    NUMBER          reduce using rule 8 (expression -> VARIABLE .)
    STRING          reduce using rule 8 (expression -> VARIABLE .)
    VARIABLE        reduce using rule 8 (expression -> VARIABLE .)
    CHAR            reduce using rule 8 (expression -> VARIABLE .)
    EMIT            reduce using rule 8 (expression -> VARIABLE .)
    reserved_word   reduce using rule 8 (expression -> VARIABLE .)
    DOT             reduce using rule 8 (expression -> VARIABLE .)
    STDOUT          reduce using rule 8 (expression -> VARIABLE .)
    COMMENT         reduce using rule 8 (expression -> VARIABLE .)
    EXCLAMATION     reduce using rule 8 (expression -> VARIABLE .)
    AT              reduce using rule 8 (expression -> VARIABLE .)
    COLON           reduce using rule 8 (expression -> VARIABLE .)
    SEMICOLON       reduce using rule 8 (expression -> VARIABLE .)
    LEFT_PAREN      reduce using rule 8 (expression -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 8 (expression -> VARIABLE .)
    IF              reduce using rule 8 (expression -> VARIABLE .)
    ELSE            reduce using rule 8 (expression -> VARIABLE .)
    WHILE           reduce using rule 8 (expression -> VARIABLE .)
    BEGIN           reduce using rule 8 (expression -> VARIABLE .)
    EXIT            reduce using rule 8 (expression -> VARIABLE .)
    DROP            reduce using rule 8 (expression -> VARIABLE .)
    $end            reduce using rule 8 (expression -> VARIABLE .)
    PLUS            reduce using rule 8 (expression -> VARIABLE .)
    MINUS           reduce using rule 8 (expression -> VARIABLE .)
    TIMES           reduce using rule 8 (expression -> VARIABLE .)
    DIVIDE          reduce using rule 8 (expression -> VARIABLE .)
    MOD             reduce using rule 8 (expression -> VARIABLE .)
    NOT             reduce using rule 8 (expression -> VARIABLE .)
    INF             reduce using rule 8 (expression -> VARIABLE .)
    SUP             reduce using rule 8 (expression -> VARIABLE .)
    INFEQ           reduce using rule 8 (expression -> VARIABLE .)
    SUPEQ           reduce using rule 8 (expression -> VARIABLE .)
    CONCAT          reduce using rule 8 (expression -> VARIABLE .)
    THEN            reduce using rule 8 (expression -> VARIABLE .)
    DO              reduce using rule 8 (expression -> VARIABLE .)
    LOOP            reduce using rule 8 (expression -> VARIABLE .)
    REPEAT          reduce using rule 8 (expression -> VARIABLE .)


state 9

    (9) expression -> CHAR .

    NUMBER          reduce using rule 9 (expression -> CHAR .)
    STRING          reduce using rule 9 (expression -> CHAR .)
    VARIABLE        reduce using rule 9 (expression -> CHAR .)
    CHAR            reduce using rule 9 (expression -> CHAR .)
    EMIT            reduce using rule 9 (expression -> CHAR .)
    reserved_word   reduce using rule 9 (expression -> CHAR .)
    DOT             reduce using rule 9 (expression -> CHAR .)
    STDOUT          reduce using rule 9 (expression -> CHAR .)
    COMMENT         reduce using rule 9 (expression -> CHAR .)
    EXCLAMATION     reduce using rule 9 (expression -> CHAR .)
    AT              reduce using rule 9 (expression -> CHAR .)
    COLON           reduce using rule 9 (expression -> CHAR .)
    SEMICOLON       reduce using rule 9 (expression -> CHAR .)
    LEFT_PAREN      reduce using rule 9 (expression -> CHAR .)
    RIGHT_PAREN     reduce using rule 9 (expression -> CHAR .)
    IF              reduce using rule 9 (expression -> CHAR .)
    ELSE            reduce using rule 9 (expression -> CHAR .)
    WHILE           reduce using rule 9 (expression -> CHAR .)
    BEGIN           reduce using rule 9 (expression -> CHAR .)
    EXIT            reduce using rule 9 (expression -> CHAR .)
    DROP            reduce using rule 9 (expression -> CHAR .)
    $end            reduce using rule 9 (expression -> CHAR .)
    PLUS            reduce using rule 9 (expression -> CHAR .)
    MINUS           reduce using rule 9 (expression -> CHAR .)
    TIMES           reduce using rule 9 (expression -> CHAR .)
    DIVIDE          reduce using rule 9 (expression -> CHAR .)
    MOD             reduce using rule 9 (expression -> CHAR .)
    NOT             reduce using rule 9 (expression -> CHAR .)
    INF             reduce using rule 9 (expression -> CHAR .)
    SUP             reduce using rule 9 (expression -> CHAR .)
    INFEQ           reduce using rule 9 (expression -> CHAR .)
    SUPEQ           reduce using rule 9 (expression -> CHAR .)
    CONCAT          reduce using rule 9 (expression -> CHAR .)
    THEN            reduce using rule 9 (expression -> CHAR .)
    DO              reduce using rule 9 (expression -> CHAR .)
    LOOP            reduce using rule 9 (expression -> CHAR .)
    REPEAT          reduce using rule 9 (expression -> CHAR .)


state 10

    (10) expression -> EMIT .

    NUMBER          reduce using rule 10 (expression -> EMIT .)
    STRING          reduce using rule 10 (expression -> EMIT .)
    VARIABLE        reduce using rule 10 (expression -> EMIT .)
    CHAR            reduce using rule 10 (expression -> EMIT .)
    EMIT            reduce using rule 10 (expression -> EMIT .)
    reserved_word   reduce using rule 10 (expression -> EMIT .)
    DOT             reduce using rule 10 (expression -> EMIT .)
    STDOUT          reduce using rule 10 (expression -> EMIT .)
    COMMENT         reduce using rule 10 (expression -> EMIT .)
    EXCLAMATION     reduce using rule 10 (expression -> EMIT .)
    AT              reduce using rule 10 (expression -> EMIT .)
    COLON           reduce using rule 10 (expression -> EMIT .)
    SEMICOLON       reduce using rule 10 (expression -> EMIT .)
    LEFT_PAREN      reduce using rule 10 (expression -> EMIT .)
    RIGHT_PAREN     reduce using rule 10 (expression -> EMIT .)
    IF              reduce using rule 10 (expression -> EMIT .)
    ELSE            reduce using rule 10 (expression -> EMIT .)
    WHILE           reduce using rule 10 (expression -> EMIT .)
    BEGIN           reduce using rule 10 (expression -> EMIT .)
    EXIT            reduce using rule 10 (expression -> EMIT .)
    DROP            reduce using rule 10 (expression -> EMIT .)
    $end            reduce using rule 10 (expression -> EMIT .)
    PLUS            reduce using rule 10 (expression -> EMIT .)
    MINUS           reduce using rule 10 (expression -> EMIT .)
    TIMES           reduce using rule 10 (expression -> EMIT .)
    DIVIDE          reduce using rule 10 (expression -> EMIT .)
    MOD             reduce using rule 10 (expression -> EMIT .)
    NOT             reduce using rule 10 (expression -> EMIT .)
    INF             reduce using rule 10 (expression -> EMIT .)
    SUP             reduce using rule 10 (expression -> EMIT .)
    INFEQ           reduce using rule 10 (expression -> EMIT .)
    SUPEQ           reduce using rule 10 (expression -> EMIT .)
    CONCAT          reduce using rule 10 (expression -> EMIT .)
    THEN            reduce using rule 10 (expression -> EMIT .)
    DO              reduce using rule 10 (expression -> EMIT .)
    LOOP            reduce using rule 10 (expression -> EMIT .)
    REPEAT          reduce using rule 10 (expression -> EMIT .)


state 11

    (11) expression -> special_expression .

    NUMBER          reduce using rule 11 (expression -> special_expression .)
    STRING          reduce using rule 11 (expression -> special_expression .)
    VARIABLE        reduce using rule 11 (expression -> special_expression .)
    CHAR            reduce using rule 11 (expression -> special_expression .)
    EMIT            reduce using rule 11 (expression -> special_expression .)
    reserved_word   reduce using rule 11 (expression -> special_expression .)
    DOT             reduce using rule 11 (expression -> special_expression .)
    STDOUT          reduce using rule 11 (expression -> special_expression .)
    COMMENT         reduce using rule 11 (expression -> special_expression .)
    EXCLAMATION     reduce using rule 11 (expression -> special_expression .)
    AT              reduce using rule 11 (expression -> special_expression .)
    COLON           reduce using rule 11 (expression -> special_expression .)
    SEMICOLON       reduce using rule 11 (expression -> special_expression .)
    LEFT_PAREN      reduce using rule 11 (expression -> special_expression .)
    RIGHT_PAREN     reduce using rule 11 (expression -> special_expression .)
    IF              reduce using rule 11 (expression -> special_expression .)
    ELSE            reduce using rule 11 (expression -> special_expression .)
    WHILE           reduce using rule 11 (expression -> special_expression .)
    BEGIN           reduce using rule 11 (expression -> special_expression .)
    EXIT            reduce using rule 11 (expression -> special_expression .)
    DROP            reduce using rule 11 (expression -> special_expression .)
    $end            reduce using rule 11 (expression -> special_expression .)
    PLUS            reduce using rule 11 (expression -> special_expression .)
    MINUS           reduce using rule 11 (expression -> special_expression .)
    TIMES           reduce using rule 11 (expression -> special_expression .)
    DIVIDE          reduce using rule 11 (expression -> special_expression .)
    MOD             reduce using rule 11 (expression -> special_expression .)
    NOT             reduce using rule 11 (expression -> special_expression .)
    INF             reduce using rule 11 (expression -> special_expression .)
    SUP             reduce using rule 11 (expression -> special_expression .)
    INFEQ           reduce using rule 11 (expression -> special_expression .)
    SUPEQ           reduce using rule 11 (expression -> special_expression .)
    CONCAT          reduce using rule 11 (expression -> special_expression .)
    THEN            reduce using rule 11 (expression -> special_expression .)
    DO              reduce using rule 11 (expression -> special_expression .)
    LOOP            reduce using rule 11 (expression -> special_expression .)
    REPEAT          reduce using rule 11 (expression -> special_expression .)


state 12

    (12) expression -> reserved_word .

    NUMBER          reduce using rule 12 (expression -> reserved_word .)
    STRING          reduce using rule 12 (expression -> reserved_word .)
    VARIABLE        reduce using rule 12 (expression -> reserved_word .)
    CHAR            reduce using rule 12 (expression -> reserved_word .)
    EMIT            reduce using rule 12 (expression -> reserved_word .)
    reserved_word   reduce using rule 12 (expression -> reserved_word .)
    DOT             reduce using rule 12 (expression -> reserved_word .)
    STDOUT          reduce using rule 12 (expression -> reserved_word .)
    COMMENT         reduce using rule 12 (expression -> reserved_word .)
    EXCLAMATION     reduce using rule 12 (expression -> reserved_word .)
    AT              reduce using rule 12 (expression -> reserved_word .)
    COLON           reduce using rule 12 (expression -> reserved_word .)
    SEMICOLON       reduce using rule 12 (expression -> reserved_word .)
    LEFT_PAREN      reduce using rule 12 (expression -> reserved_word .)
    RIGHT_PAREN     reduce using rule 12 (expression -> reserved_word .)
    IF              reduce using rule 12 (expression -> reserved_word .)
    ELSE            reduce using rule 12 (expression -> reserved_word .)
    WHILE           reduce using rule 12 (expression -> reserved_word .)
    BEGIN           reduce using rule 12 (expression -> reserved_word .)
    EXIT            reduce using rule 12 (expression -> reserved_word .)
    DROP            reduce using rule 12 (expression -> reserved_word .)
    $end            reduce using rule 12 (expression -> reserved_word .)
    PLUS            reduce using rule 12 (expression -> reserved_word .)
    MINUS           reduce using rule 12 (expression -> reserved_word .)
    TIMES           reduce using rule 12 (expression -> reserved_word .)
    DIVIDE          reduce using rule 12 (expression -> reserved_word .)
    MOD             reduce using rule 12 (expression -> reserved_word .)
    NOT             reduce using rule 12 (expression -> reserved_word .)
    INF             reduce using rule 12 (expression -> reserved_word .)
    SUP             reduce using rule 12 (expression -> reserved_word .)
    INFEQ           reduce using rule 12 (expression -> reserved_word .)
    SUPEQ           reduce using rule 12 (expression -> reserved_word .)
    CONCAT          reduce using rule 12 (expression -> reserved_word .)
    THEN            reduce using rule 12 (expression -> reserved_word .)
    DO              reduce using rule 12 (expression -> reserved_word .)
    LOOP            reduce using rule 12 (expression -> reserved_word .)
    REPEAT          reduce using rule 12 (expression -> reserved_word .)


state 13

    (13) expression -> DOT .

    NUMBER          reduce using rule 13 (expression -> DOT .)
    STRING          reduce using rule 13 (expression -> DOT .)
    VARIABLE        reduce using rule 13 (expression -> DOT .)
    CHAR            reduce using rule 13 (expression -> DOT .)
    EMIT            reduce using rule 13 (expression -> DOT .)
    reserved_word   reduce using rule 13 (expression -> DOT .)
    DOT             reduce using rule 13 (expression -> DOT .)
    STDOUT          reduce using rule 13 (expression -> DOT .)
    COMMENT         reduce using rule 13 (expression -> DOT .)
    EXCLAMATION     reduce using rule 13 (expression -> DOT .)
    AT              reduce using rule 13 (expression -> DOT .)
    COLON           reduce using rule 13 (expression -> DOT .)
    SEMICOLON       reduce using rule 13 (expression -> DOT .)
    LEFT_PAREN      reduce using rule 13 (expression -> DOT .)
    RIGHT_PAREN     reduce using rule 13 (expression -> DOT .)
    IF              reduce using rule 13 (expression -> DOT .)
    ELSE            reduce using rule 13 (expression -> DOT .)
    WHILE           reduce using rule 13 (expression -> DOT .)
    BEGIN           reduce using rule 13 (expression -> DOT .)
    EXIT            reduce using rule 13 (expression -> DOT .)
    DROP            reduce using rule 13 (expression -> DOT .)
    $end            reduce using rule 13 (expression -> DOT .)
    PLUS            reduce using rule 13 (expression -> DOT .)
    MINUS           reduce using rule 13 (expression -> DOT .)
    TIMES           reduce using rule 13 (expression -> DOT .)
    DIVIDE          reduce using rule 13 (expression -> DOT .)
    MOD             reduce using rule 13 (expression -> DOT .)
    NOT             reduce using rule 13 (expression -> DOT .)
    INF             reduce using rule 13 (expression -> DOT .)
    SUP             reduce using rule 13 (expression -> DOT .)
    INFEQ           reduce using rule 13 (expression -> DOT .)
    SUPEQ           reduce using rule 13 (expression -> DOT .)
    CONCAT          reduce using rule 13 (expression -> DOT .)
    THEN            reduce using rule 13 (expression -> DOT .)
    DO              reduce using rule 13 (expression -> DOT .)
    LOOP            reduce using rule 13 (expression -> DOT .)
    REPEAT          reduce using rule 13 (expression -> DOT .)


state 14

    (14) expression -> STDOUT .

    NUMBER          reduce using rule 14 (expression -> STDOUT .)
    STRING          reduce using rule 14 (expression -> STDOUT .)
    VARIABLE        reduce using rule 14 (expression -> STDOUT .)
    CHAR            reduce using rule 14 (expression -> STDOUT .)
    EMIT            reduce using rule 14 (expression -> STDOUT .)
    reserved_word   reduce using rule 14 (expression -> STDOUT .)
    DOT             reduce using rule 14 (expression -> STDOUT .)
    STDOUT          reduce using rule 14 (expression -> STDOUT .)
    COMMENT         reduce using rule 14 (expression -> STDOUT .)
    EXCLAMATION     reduce using rule 14 (expression -> STDOUT .)
    AT              reduce using rule 14 (expression -> STDOUT .)
    COLON           reduce using rule 14 (expression -> STDOUT .)
    SEMICOLON       reduce using rule 14 (expression -> STDOUT .)
    LEFT_PAREN      reduce using rule 14 (expression -> STDOUT .)
    RIGHT_PAREN     reduce using rule 14 (expression -> STDOUT .)
    IF              reduce using rule 14 (expression -> STDOUT .)
    ELSE            reduce using rule 14 (expression -> STDOUT .)
    WHILE           reduce using rule 14 (expression -> STDOUT .)
    BEGIN           reduce using rule 14 (expression -> STDOUT .)
    EXIT            reduce using rule 14 (expression -> STDOUT .)
    DROP            reduce using rule 14 (expression -> STDOUT .)
    $end            reduce using rule 14 (expression -> STDOUT .)
    PLUS            reduce using rule 14 (expression -> STDOUT .)
    MINUS           reduce using rule 14 (expression -> STDOUT .)
    TIMES           reduce using rule 14 (expression -> STDOUT .)
    DIVIDE          reduce using rule 14 (expression -> STDOUT .)
    MOD             reduce using rule 14 (expression -> STDOUT .)
    NOT             reduce using rule 14 (expression -> STDOUT .)
    INF             reduce using rule 14 (expression -> STDOUT .)
    SUP             reduce using rule 14 (expression -> STDOUT .)
    INFEQ           reduce using rule 14 (expression -> STDOUT .)
    SUPEQ           reduce using rule 14 (expression -> STDOUT .)
    CONCAT          reduce using rule 14 (expression -> STDOUT .)
    THEN            reduce using rule 14 (expression -> STDOUT .)
    DO              reduce using rule 14 (expression -> STDOUT .)
    LOOP            reduce using rule 14 (expression -> STDOUT .)
    REPEAT          reduce using rule 14 (expression -> STDOUT .)


state 15

    (16) expression -> COMMENT .

    NUMBER          reduce using rule 16 (expression -> COMMENT .)
    STRING          reduce using rule 16 (expression -> COMMENT .)
    VARIABLE        reduce using rule 16 (expression -> COMMENT .)
    CHAR            reduce using rule 16 (expression -> COMMENT .)
    EMIT            reduce using rule 16 (expression -> COMMENT .)
    reserved_word   reduce using rule 16 (expression -> COMMENT .)
    DOT             reduce using rule 16 (expression -> COMMENT .)
    STDOUT          reduce using rule 16 (expression -> COMMENT .)
    COMMENT         reduce using rule 16 (expression -> COMMENT .)
    EXCLAMATION     reduce using rule 16 (expression -> COMMENT .)
    AT              reduce using rule 16 (expression -> COMMENT .)
    COLON           reduce using rule 16 (expression -> COMMENT .)
    SEMICOLON       reduce using rule 16 (expression -> COMMENT .)
    LEFT_PAREN      reduce using rule 16 (expression -> COMMENT .)
    RIGHT_PAREN     reduce using rule 16 (expression -> COMMENT .)
    IF              reduce using rule 16 (expression -> COMMENT .)
    ELSE            reduce using rule 16 (expression -> COMMENT .)
    WHILE           reduce using rule 16 (expression -> COMMENT .)
    BEGIN           reduce using rule 16 (expression -> COMMENT .)
    EXIT            reduce using rule 16 (expression -> COMMENT .)
    DROP            reduce using rule 16 (expression -> COMMENT .)
    $end            reduce using rule 16 (expression -> COMMENT .)
    PLUS            reduce using rule 16 (expression -> COMMENT .)
    MINUS           reduce using rule 16 (expression -> COMMENT .)
    TIMES           reduce using rule 16 (expression -> COMMENT .)
    DIVIDE          reduce using rule 16 (expression -> COMMENT .)
    MOD             reduce using rule 16 (expression -> COMMENT .)
    NOT             reduce using rule 16 (expression -> COMMENT .)
    INF             reduce using rule 16 (expression -> COMMENT .)
    SUP             reduce using rule 16 (expression -> COMMENT .)
    INFEQ           reduce using rule 16 (expression -> COMMENT .)
    SUPEQ           reduce using rule 16 (expression -> COMMENT .)
    CONCAT          reduce using rule 16 (expression -> COMMENT .)
    THEN            reduce using rule 16 (expression -> COMMENT .)
    DO              reduce using rule 16 (expression -> COMMENT .)
    LOOP            reduce using rule 16 (expression -> COMMENT .)
    REPEAT          reduce using rule 16 (expression -> COMMENT .)


state 16

    (37) flow_control -> if_statement .

    NUMBER          reduce using rule 37 (flow_control -> if_statement .)
    STRING          reduce using rule 37 (flow_control -> if_statement .)
    VARIABLE        reduce using rule 37 (flow_control -> if_statement .)
    CHAR            reduce using rule 37 (flow_control -> if_statement .)
    EMIT            reduce using rule 37 (flow_control -> if_statement .)
    reserved_word   reduce using rule 37 (flow_control -> if_statement .)
    DOT             reduce using rule 37 (flow_control -> if_statement .)
    STDOUT          reduce using rule 37 (flow_control -> if_statement .)
    COMMENT         reduce using rule 37 (flow_control -> if_statement .)
    EXCLAMATION     reduce using rule 37 (flow_control -> if_statement .)
    AT              reduce using rule 37 (flow_control -> if_statement .)
    COLON           reduce using rule 37 (flow_control -> if_statement .)
    SEMICOLON       reduce using rule 37 (flow_control -> if_statement .)
    LEFT_PAREN      reduce using rule 37 (flow_control -> if_statement .)
    RIGHT_PAREN     reduce using rule 37 (flow_control -> if_statement .)
    IF              reduce using rule 37 (flow_control -> if_statement .)
    ELSE            reduce using rule 37 (flow_control -> if_statement .)
    WHILE           reduce using rule 37 (flow_control -> if_statement .)
    BEGIN           reduce using rule 37 (flow_control -> if_statement .)
    EXIT            reduce using rule 37 (flow_control -> if_statement .)
    DROP            reduce using rule 37 (flow_control -> if_statement .)
    $end            reduce using rule 37 (flow_control -> if_statement .)
    LOOP            reduce using rule 37 (flow_control -> if_statement .)


state 17

    (38) flow_control -> else_statement .

    NUMBER          reduce using rule 38 (flow_control -> else_statement .)
    STRING          reduce using rule 38 (flow_control -> else_statement .)
    VARIABLE        reduce using rule 38 (flow_control -> else_statement .)
    CHAR            reduce using rule 38 (flow_control -> else_statement .)
    EMIT            reduce using rule 38 (flow_control -> else_statement .)
    reserved_word   reduce using rule 38 (flow_control -> else_statement .)
    DOT             reduce using rule 38 (flow_control -> else_statement .)
    STDOUT          reduce using rule 38 (flow_control -> else_statement .)
    COMMENT         reduce using rule 38 (flow_control -> else_statement .)
    EXCLAMATION     reduce using rule 38 (flow_control -> else_statement .)
    AT              reduce using rule 38 (flow_control -> else_statement .)
    COLON           reduce using rule 38 (flow_control -> else_statement .)
    SEMICOLON       reduce using rule 38 (flow_control -> else_statement .)
    LEFT_PAREN      reduce using rule 38 (flow_control -> else_statement .)
    RIGHT_PAREN     reduce using rule 38 (flow_control -> else_statement .)
    IF              reduce using rule 38 (flow_control -> else_statement .)
    ELSE            reduce using rule 38 (flow_control -> else_statement .)
    WHILE           reduce using rule 38 (flow_control -> else_statement .)
    BEGIN           reduce using rule 38 (flow_control -> else_statement .)
    EXIT            reduce using rule 38 (flow_control -> else_statement .)
    DROP            reduce using rule 38 (flow_control -> else_statement .)
    $end            reduce using rule 38 (flow_control -> else_statement .)
    LOOP            reduce using rule 38 (flow_control -> else_statement .)


state 18

    (39) flow_control -> while_loop .

    NUMBER          reduce using rule 39 (flow_control -> while_loop .)
    STRING          reduce using rule 39 (flow_control -> while_loop .)
    VARIABLE        reduce using rule 39 (flow_control -> while_loop .)
    CHAR            reduce using rule 39 (flow_control -> while_loop .)
    EMIT            reduce using rule 39 (flow_control -> while_loop .)
    reserved_word   reduce using rule 39 (flow_control -> while_loop .)
    DOT             reduce using rule 39 (flow_control -> while_loop .)
    STDOUT          reduce using rule 39 (flow_control -> while_loop .)
    COMMENT         reduce using rule 39 (flow_control -> while_loop .)
    EXCLAMATION     reduce using rule 39 (flow_control -> while_loop .)
    AT              reduce using rule 39 (flow_control -> while_loop .)
    COLON           reduce using rule 39 (flow_control -> while_loop .)
    SEMICOLON       reduce using rule 39 (flow_control -> while_loop .)
    LEFT_PAREN      reduce using rule 39 (flow_control -> while_loop .)
    RIGHT_PAREN     reduce using rule 39 (flow_control -> while_loop .)
    IF              reduce using rule 39 (flow_control -> while_loop .)
    ELSE            reduce using rule 39 (flow_control -> while_loop .)
    WHILE           reduce using rule 39 (flow_control -> while_loop .)
    BEGIN           reduce using rule 39 (flow_control -> while_loop .)
    EXIT            reduce using rule 39 (flow_control -> while_loop .)
    DROP            reduce using rule 39 (flow_control -> while_loop .)
    $end            reduce using rule 39 (flow_control -> while_loop .)
    LOOP            reduce using rule 39 (flow_control -> while_loop .)


state 19

    (40) flow_control -> repeat_loop .

    NUMBER          reduce using rule 40 (flow_control -> repeat_loop .)
    STRING          reduce using rule 40 (flow_control -> repeat_loop .)
    VARIABLE        reduce using rule 40 (flow_control -> repeat_loop .)
    CHAR            reduce using rule 40 (flow_control -> repeat_loop .)
    EMIT            reduce using rule 40 (flow_control -> repeat_loop .)
    reserved_word   reduce using rule 40 (flow_control -> repeat_loop .)
    DOT             reduce using rule 40 (flow_control -> repeat_loop .)
    STDOUT          reduce using rule 40 (flow_control -> repeat_loop .)
    COMMENT         reduce using rule 40 (flow_control -> repeat_loop .)
    EXCLAMATION     reduce using rule 40 (flow_control -> repeat_loop .)
    AT              reduce using rule 40 (flow_control -> repeat_loop .)
    COLON           reduce using rule 40 (flow_control -> repeat_loop .)
    SEMICOLON       reduce using rule 40 (flow_control -> repeat_loop .)
    LEFT_PAREN      reduce using rule 40 (flow_control -> repeat_loop .)
    RIGHT_PAREN     reduce using rule 40 (flow_control -> repeat_loop .)
    IF              reduce using rule 40 (flow_control -> repeat_loop .)
    ELSE            reduce using rule 40 (flow_control -> repeat_loop .)
    WHILE           reduce using rule 40 (flow_control -> repeat_loop .)
    BEGIN           reduce using rule 40 (flow_control -> repeat_loop .)
    EXIT            reduce using rule 40 (flow_control -> repeat_loop .)
    DROP            reduce using rule 40 (flow_control -> repeat_loop .)
    $end            reduce using rule 40 (flow_control -> repeat_loop .)
    LOOP            reduce using rule 40 (flow_control -> repeat_loop .)


state 20

    (41) flow_control -> exit_statement .

    NUMBER          reduce using rule 41 (flow_control -> exit_statement .)
    STRING          reduce using rule 41 (flow_control -> exit_statement .)
    VARIABLE        reduce using rule 41 (flow_control -> exit_statement .)
    CHAR            reduce using rule 41 (flow_control -> exit_statement .)
    EMIT            reduce using rule 41 (flow_control -> exit_statement .)
    reserved_word   reduce using rule 41 (flow_control -> exit_statement .)
    DOT             reduce using rule 41 (flow_control -> exit_statement .)
    STDOUT          reduce using rule 41 (flow_control -> exit_statement .)
    COMMENT         reduce using rule 41 (flow_control -> exit_statement .)
    EXCLAMATION     reduce using rule 41 (flow_control -> exit_statement .)
    AT              reduce using rule 41 (flow_control -> exit_statement .)
    COLON           reduce using rule 41 (flow_control -> exit_statement .)
    SEMICOLON       reduce using rule 41 (flow_control -> exit_statement .)
    LEFT_PAREN      reduce using rule 41 (flow_control -> exit_statement .)
    RIGHT_PAREN     reduce using rule 41 (flow_control -> exit_statement .)
    IF              reduce using rule 41 (flow_control -> exit_statement .)
    ELSE            reduce using rule 41 (flow_control -> exit_statement .)
    WHILE           reduce using rule 41 (flow_control -> exit_statement .)
    BEGIN           reduce using rule 41 (flow_control -> exit_statement .)
    EXIT            reduce using rule 41 (flow_control -> exit_statement .)
    DROP            reduce using rule 41 (flow_control -> exit_statement .)
    $end            reduce using rule 41 (flow_control -> exit_statement .)
    LOOP            reduce using rule 41 (flow_control -> exit_statement .)


state 21

    (42) flow_control -> drop_statement .

    NUMBER          reduce using rule 42 (flow_control -> drop_statement .)
    STRING          reduce using rule 42 (flow_control -> drop_statement .)
    VARIABLE        reduce using rule 42 (flow_control -> drop_statement .)
    CHAR            reduce using rule 42 (flow_control -> drop_statement .)
    EMIT            reduce using rule 42 (flow_control -> drop_statement .)
    reserved_word   reduce using rule 42 (flow_control -> drop_statement .)
    DOT             reduce using rule 42 (flow_control -> drop_statement .)
    STDOUT          reduce using rule 42 (flow_control -> drop_statement .)
    COMMENT         reduce using rule 42 (flow_control -> drop_statement .)
    EXCLAMATION     reduce using rule 42 (flow_control -> drop_statement .)
    AT              reduce using rule 42 (flow_control -> drop_statement .)
    COLON           reduce using rule 42 (flow_control -> drop_statement .)
    SEMICOLON       reduce using rule 42 (flow_control -> drop_statement .)
    LEFT_PAREN      reduce using rule 42 (flow_control -> drop_statement .)
    RIGHT_PAREN     reduce using rule 42 (flow_control -> drop_statement .)
    IF              reduce using rule 42 (flow_control -> drop_statement .)
    ELSE            reduce using rule 42 (flow_control -> drop_statement .)
    WHILE           reduce using rule 42 (flow_control -> drop_statement .)
    BEGIN           reduce using rule 42 (flow_control -> drop_statement .)
    EXIT            reduce using rule 42 (flow_control -> drop_statement .)
    DROP            reduce using rule 42 (flow_control -> drop_statement .)
    $end            reduce using rule 42 (flow_control -> drop_statement .)
    LOOP            reduce using rule 42 (flow_control -> drop_statement .)


state 22

    (31) special_expression -> EXCLAMATION .

    NUMBER          reduce using rule 31 (special_expression -> EXCLAMATION .)
    STRING          reduce using rule 31 (special_expression -> EXCLAMATION .)
    VARIABLE        reduce using rule 31 (special_expression -> EXCLAMATION .)
    CHAR            reduce using rule 31 (special_expression -> EXCLAMATION .)
    EMIT            reduce using rule 31 (special_expression -> EXCLAMATION .)
    reserved_word   reduce using rule 31 (special_expression -> EXCLAMATION .)
    DOT             reduce using rule 31 (special_expression -> EXCLAMATION .)
    STDOUT          reduce using rule 31 (special_expression -> EXCLAMATION .)
    COMMENT         reduce using rule 31 (special_expression -> EXCLAMATION .)
    EXCLAMATION     reduce using rule 31 (special_expression -> EXCLAMATION .)
    AT              reduce using rule 31 (special_expression -> EXCLAMATION .)
    COLON           reduce using rule 31 (special_expression -> EXCLAMATION .)
    SEMICOLON       reduce using rule 31 (special_expression -> EXCLAMATION .)
    LEFT_PAREN      reduce using rule 31 (special_expression -> EXCLAMATION .)
    RIGHT_PAREN     reduce using rule 31 (special_expression -> EXCLAMATION .)
    IF              reduce using rule 31 (special_expression -> EXCLAMATION .)
    ELSE            reduce using rule 31 (special_expression -> EXCLAMATION .)
    WHILE           reduce using rule 31 (special_expression -> EXCLAMATION .)
    BEGIN           reduce using rule 31 (special_expression -> EXCLAMATION .)
    EXIT            reduce using rule 31 (special_expression -> EXCLAMATION .)
    DROP            reduce using rule 31 (special_expression -> EXCLAMATION .)
    $end            reduce using rule 31 (special_expression -> EXCLAMATION .)
    PLUS            reduce using rule 31 (special_expression -> EXCLAMATION .)
    MINUS           reduce using rule 31 (special_expression -> EXCLAMATION .)
    TIMES           reduce using rule 31 (special_expression -> EXCLAMATION .)
    DIVIDE          reduce using rule 31 (special_expression -> EXCLAMATION .)
    MOD             reduce using rule 31 (special_expression -> EXCLAMATION .)
    NOT             reduce using rule 31 (special_expression -> EXCLAMATION .)
    INF             reduce using rule 31 (special_expression -> EXCLAMATION .)
    SUP             reduce using rule 31 (special_expression -> EXCLAMATION .)
    INFEQ           reduce using rule 31 (special_expression -> EXCLAMATION .)
    SUPEQ           reduce using rule 31 (special_expression -> EXCLAMATION .)
    CONCAT          reduce using rule 31 (special_expression -> EXCLAMATION .)
    THEN            reduce using rule 31 (special_expression -> EXCLAMATION .)
    DO              reduce using rule 31 (special_expression -> EXCLAMATION .)
    LOOP            reduce using rule 31 (special_expression -> EXCLAMATION .)
    REPEAT          reduce using rule 31 (special_expression -> EXCLAMATION .)


state 23

    (32) special_expression -> AT .

    NUMBER          reduce using rule 32 (special_expression -> AT .)
    STRING          reduce using rule 32 (special_expression -> AT .)
    VARIABLE        reduce using rule 32 (special_expression -> AT .)
    CHAR            reduce using rule 32 (special_expression -> AT .)
    EMIT            reduce using rule 32 (special_expression -> AT .)
    reserved_word   reduce using rule 32 (special_expression -> AT .)
    DOT             reduce using rule 32 (special_expression -> AT .)
    STDOUT          reduce using rule 32 (special_expression -> AT .)
    COMMENT         reduce using rule 32 (special_expression -> AT .)
    EXCLAMATION     reduce using rule 32 (special_expression -> AT .)
    AT              reduce using rule 32 (special_expression -> AT .)
    COLON           reduce using rule 32 (special_expression -> AT .)
    SEMICOLON       reduce using rule 32 (special_expression -> AT .)
    LEFT_PAREN      reduce using rule 32 (special_expression -> AT .)
    RIGHT_PAREN     reduce using rule 32 (special_expression -> AT .)
    IF              reduce using rule 32 (special_expression -> AT .)
    ELSE            reduce using rule 32 (special_expression -> AT .)
    WHILE           reduce using rule 32 (special_expression -> AT .)
    BEGIN           reduce using rule 32 (special_expression -> AT .)
    EXIT            reduce using rule 32 (special_expression -> AT .)
    DROP            reduce using rule 32 (special_expression -> AT .)
    $end            reduce using rule 32 (special_expression -> AT .)
    PLUS            reduce using rule 32 (special_expression -> AT .)
    MINUS           reduce using rule 32 (special_expression -> AT .)
    TIMES           reduce using rule 32 (special_expression -> AT .)
    DIVIDE          reduce using rule 32 (special_expression -> AT .)
    MOD             reduce using rule 32 (special_expression -> AT .)
    NOT             reduce using rule 32 (special_expression -> AT .)
    INF             reduce using rule 32 (special_expression -> AT .)
    SUP             reduce using rule 32 (special_expression -> AT .)
    INFEQ           reduce using rule 32 (special_expression -> AT .)
    SUPEQ           reduce using rule 32 (special_expression -> AT .)
    CONCAT          reduce using rule 32 (special_expression -> AT .)
    THEN            reduce using rule 32 (special_expression -> AT .)
    DO              reduce using rule 32 (special_expression -> AT .)
    LOOP            reduce using rule 32 (special_expression -> AT .)
    REPEAT          reduce using rule 32 (special_expression -> AT .)


state 24

    (33) special_expression -> COLON .

    NUMBER          reduce using rule 33 (special_expression -> COLON .)
    STRING          reduce using rule 33 (special_expression -> COLON .)
    VARIABLE        reduce using rule 33 (special_expression -> COLON .)
    CHAR            reduce using rule 33 (special_expression -> COLON .)
    EMIT            reduce using rule 33 (special_expression -> COLON .)
    reserved_word   reduce using rule 33 (special_expression -> COLON .)
    DOT             reduce using rule 33 (special_expression -> COLON .)
    STDOUT          reduce using rule 33 (special_expression -> COLON .)
    COMMENT         reduce using rule 33 (special_expression -> COLON .)
    EXCLAMATION     reduce using rule 33 (special_expression -> COLON .)
    AT              reduce using rule 33 (special_expression -> COLON .)
    COLON           reduce using rule 33 (special_expression -> COLON .)
    SEMICOLON       reduce using rule 33 (special_expression -> COLON .)
    LEFT_PAREN      reduce using rule 33 (special_expression -> COLON .)
    RIGHT_PAREN     reduce using rule 33 (special_expression -> COLON .)
    IF              reduce using rule 33 (special_expression -> COLON .)
    ELSE            reduce using rule 33 (special_expression -> COLON .)
    WHILE           reduce using rule 33 (special_expression -> COLON .)
    BEGIN           reduce using rule 33 (special_expression -> COLON .)
    EXIT            reduce using rule 33 (special_expression -> COLON .)
    DROP            reduce using rule 33 (special_expression -> COLON .)
    $end            reduce using rule 33 (special_expression -> COLON .)
    PLUS            reduce using rule 33 (special_expression -> COLON .)
    MINUS           reduce using rule 33 (special_expression -> COLON .)
    TIMES           reduce using rule 33 (special_expression -> COLON .)
    DIVIDE          reduce using rule 33 (special_expression -> COLON .)
    MOD             reduce using rule 33 (special_expression -> COLON .)
    NOT             reduce using rule 33 (special_expression -> COLON .)
    INF             reduce using rule 33 (special_expression -> COLON .)
    SUP             reduce using rule 33 (special_expression -> COLON .)
    INFEQ           reduce using rule 33 (special_expression -> COLON .)
    SUPEQ           reduce using rule 33 (special_expression -> COLON .)
    CONCAT          reduce using rule 33 (special_expression -> COLON .)
    THEN            reduce using rule 33 (special_expression -> COLON .)
    DO              reduce using rule 33 (special_expression -> COLON .)
    LOOP            reduce using rule 33 (special_expression -> COLON .)
    REPEAT          reduce using rule 33 (special_expression -> COLON .)


state 25

    (34) special_expression -> SEMICOLON .

    NUMBER          reduce using rule 34 (special_expression -> SEMICOLON .)
    STRING          reduce using rule 34 (special_expression -> SEMICOLON .)
    VARIABLE        reduce using rule 34 (special_expression -> SEMICOLON .)
    CHAR            reduce using rule 34 (special_expression -> SEMICOLON .)
    EMIT            reduce using rule 34 (special_expression -> SEMICOLON .)
    reserved_word   reduce using rule 34 (special_expression -> SEMICOLON .)
    DOT             reduce using rule 34 (special_expression -> SEMICOLON .)
    STDOUT          reduce using rule 34 (special_expression -> SEMICOLON .)
    COMMENT         reduce using rule 34 (special_expression -> SEMICOLON .)
    EXCLAMATION     reduce using rule 34 (special_expression -> SEMICOLON .)
    AT              reduce using rule 34 (special_expression -> SEMICOLON .)
    COLON           reduce using rule 34 (special_expression -> SEMICOLON .)
    SEMICOLON       reduce using rule 34 (special_expression -> SEMICOLON .)
    LEFT_PAREN      reduce using rule 34 (special_expression -> SEMICOLON .)
    RIGHT_PAREN     reduce using rule 34 (special_expression -> SEMICOLON .)
    IF              reduce using rule 34 (special_expression -> SEMICOLON .)
    ELSE            reduce using rule 34 (special_expression -> SEMICOLON .)
    WHILE           reduce using rule 34 (special_expression -> SEMICOLON .)
    BEGIN           reduce using rule 34 (special_expression -> SEMICOLON .)
    EXIT            reduce using rule 34 (special_expression -> SEMICOLON .)
    DROP            reduce using rule 34 (special_expression -> SEMICOLON .)
    $end            reduce using rule 34 (special_expression -> SEMICOLON .)
    PLUS            reduce using rule 34 (special_expression -> SEMICOLON .)
    MINUS           reduce using rule 34 (special_expression -> SEMICOLON .)
    TIMES           reduce using rule 34 (special_expression -> SEMICOLON .)
    DIVIDE          reduce using rule 34 (special_expression -> SEMICOLON .)
    MOD             reduce using rule 34 (special_expression -> SEMICOLON .)
    NOT             reduce using rule 34 (special_expression -> SEMICOLON .)
    INF             reduce using rule 34 (special_expression -> SEMICOLON .)
    SUP             reduce using rule 34 (special_expression -> SEMICOLON .)
    INFEQ           reduce using rule 34 (special_expression -> SEMICOLON .)
    SUPEQ           reduce using rule 34 (special_expression -> SEMICOLON .)
    CONCAT          reduce using rule 34 (special_expression -> SEMICOLON .)
    THEN            reduce using rule 34 (special_expression -> SEMICOLON .)
    DO              reduce using rule 34 (special_expression -> SEMICOLON .)
    LOOP            reduce using rule 34 (special_expression -> SEMICOLON .)
    REPEAT          reduce using rule 34 (special_expression -> SEMICOLON .)


state 26

    (35) special_expression -> LEFT_PAREN .

    NUMBER          reduce using rule 35 (special_expression -> LEFT_PAREN .)
    STRING          reduce using rule 35 (special_expression -> LEFT_PAREN .)
    VARIABLE        reduce using rule 35 (special_expression -> LEFT_PAREN .)
    CHAR            reduce using rule 35 (special_expression -> LEFT_PAREN .)
    EMIT            reduce using rule 35 (special_expression -> LEFT_PAREN .)
    reserved_word   reduce using rule 35 (special_expression -> LEFT_PAREN .)
    DOT             reduce using rule 35 (special_expression -> LEFT_PAREN .)
    STDOUT          reduce using rule 35 (special_expression -> LEFT_PAREN .)
    COMMENT         reduce using rule 35 (special_expression -> LEFT_PAREN .)
    EXCLAMATION     reduce using rule 35 (special_expression -> LEFT_PAREN .)
    AT              reduce using rule 35 (special_expression -> LEFT_PAREN .)
    COLON           reduce using rule 35 (special_expression -> LEFT_PAREN .)
    SEMICOLON       reduce using rule 35 (special_expression -> LEFT_PAREN .)
    LEFT_PAREN      reduce using rule 35 (special_expression -> LEFT_PAREN .)
    RIGHT_PAREN     reduce using rule 35 (special_expression -> LEFT_PAREN .)
    IF              reduce using rule 35 (special_expression -> LEFT_PAREN .)
    ELSE            reduce using rule 35 (special_expression -> LEFT_PAREN .)
    WHILE           reduce using rule 35 (special_expression -> LEFT_PAREN .)
    BEGIN           reduce using rule 35 (special_expression -> LEFT_PAREN .)
    EXIT            reduce using rule 35 (special_expression -> LEFT_PAREN .)
    DROP            reduce using rule 35 (special_expression -> LEFT_PAREN .)
    $end            reduce using rule 35 (special_expression -> LEFT_PAREN .)
    PLUS            reduce using rule 35 (special_expression -> LEFT_PAREN .)
    MINUS           reduce using rule 35 (special_expression -> LEFT_PAREN .)
    TIMES           reduce using rule 35 (special_expression -> LEFT_PAREN .)
    DIVIDE          reduce using rule 35 (special_expression -> LEFT_PAREN .)
    MOD             reduce using rule 35 (special_expression -> LEFT_PAREN .)
    NOT             reduce using rule 35 (special_expression -> LEFT_PAREN .)
    INF             reduce using rule 35 (special_expression -> LEFT_PAREN .)
    SUP             reduce using rule 35 (special_expression -> LEFT_PAREN .)
    INFEQ           reduce using rule 35 (special_expression -> LEFT_PAREN .)
    SUPEQ           reduce using rule 35 (special_expression -> LEFT_PAREN .)
    CONCAT          reduce using rule 35 (special_expression -> LEFT_PAREN .)
    THEN            reduce using rule 35 (special_expression -> LEFT_PAREN .)
    DO              reduce using rule 35 (special_expression -> LEFT_PAREN .)
    LOOP            reduce using rule 35 (special_expression -> LEFT_PAREN .)
    REPEAT          reduce using rule 35 (special_expression -> LEFT_PAREN .)


state 27

    (36) special_expression -> RIGHT_PAREN .

    NUMBER          reduce using rule 36 (special_expression -> RIGHT_PAREN .)
    STRING          reduce using rule 36 (special_expression -> RIGHT_PAREN .)
    VARIABLE        reduce using rule 36 (special_expression -> RIGHT_PAREN .)
    CHAR            reduce using rule 36 (special_expression -> RIGHT_PAREN .)
    EMIT            reduce using rule 36 (special_expression -> RIGHT_PAREN .)
    reserved_word   reduce using rule 36 (special_expression -> RIGHT_PAREN .)
    DOT             reduce using rule 36 (special_expression -> RIGHT_PAREN .)
    STDOUT          reduce using rule 36 (special_expression -> RIGHT_PAREN .)
    COMMENT         reduce using rule 36 (special_expression -> RIGHT_PAREN .)
    EXCLAMATION     reduce using rule 36 (special_expression -> RIGHT_PAREN .)
    AT              reduce using rule 36 (special_expression -> RIGHT_PAREN .)
    COLON           reduce using rule 36 (special_expression -> RIGHT_PAREN .)
    SEMICOLON       reduce using rule 36 (special_expression -> RIGHT_PAREN .)
    LEFT_PAREN      reduce using rule 36 (special_expression -> RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 36 (special_expression -> RIGHT_PAREN .)
    IF              reduce using rule 36 (special_expression -> RIGHT_PAREN .)
    ELSE            reduce using rule 36 (special_expression -> RIGHT_PAREN .)
    WHILE           reduce using rule 36 (special_expression -> RIGHT_PAREN .)
    BEGIN           reduce using rule 36 (special_expression -> RIGHT_PAREN .)
    EXIT            reduce using rule 36 (special_expression -> RIGHT_PAREN .)
    DROP            reduce using rule 36 (special_expression -> RIGHT_PAREN .)
    $end            reduce using rule 36 (special_expression -> RIGHT_PAREN .)
    PLUS            reduce using rule 36 (special_expression -> RIGHT_PAREN .)
    MINUS           reduce using rule 36 (special_expression -> RIGHT_PAREN .)
    TIMES           reduce using rule 36 (special_expression -> RIGHT_PAREN .)
    DIVIDE          reduce using rule 36 (special_expression -> RIGHT_PAREN .)
    MOD             reduce using rule 36 (special_expression -> RIGHT_PAREN .)
    NOT             reduce using rule 36 (special_expression -> RIGHT_PAREN .)
    INF             reduce using rule 36 (special_expression -> RIGHT_PAREN .)
    SUP             reduce using rule 36 (special_expression -> RIGHT_PAREN .)
    INFEQ           reduce using rule 36 (special_expression -> RIGHT_PAREN .)
    SUPEQ           reduce using rule 36 (special_expression -> RIGHT_PAREN .)
    CONCAT          reduce using rule 36 (special_expression -> RIGHT_PAREN .)
    THEN            reduce using rule 36 (special_expression -> RIGHT_PAREN .)
    DO              reduce using rule 36 (special_expression -> RIGHT_PAREN .)
    LOOP            reduce using rule 36 (special_expression -> RIGHT_PAREN .)
    REPEAT          reduce using rule 36 (special_expression -> RIGHT_PAREN .)


state 28

    (43) if_statement -> IF . expression THEN statements
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (8) expression -> . VARIABLE
    (9) expression -> . CHAR
    (10) expression -> . EMIT
    (11) expression -> . special_expression
    (12) expression -> . reserved_word
    (13) expression -> . DOT
    (14) expression -> . STDOUT
    (16) expression -> . COMMENT
    (17) expression -> . expression expression arithmetic_op
    (23) expression -> . expression expression relational_op
    (29) expression -> . expression expression string_op
    (31) special_expression -> . EXCLAMATION
    (32) special_expression -> . AT
    (33) special_expression -> . COLON
    (34) special_expression -> . SEMICOLON
    (35) special_expression -> . LEFT_PAREN
    (36) special_expression -> . RIGHT_PAREN

    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    VARIABLE        shift and go to state 8
    CHAR            shift and go to state 9
    EMIT            shift and go to state 10
    reserved_word   shift and go to state 12
    DOT             shift and go to state 13
    STDOUT          shift and go to state 14
    COMMENT         shift and go to state 15
    EXCLAMATION     shift and go to state 22
    AT              shift and go to state 23
    COLON           shift and go to state 24
    SEMICOLON       shift and go to state 25
    LEFT_PAREN      shift and go to state 26
    RIGHT_PAREN     shift and go to state 27

    expression                     shift and go to state 36
    special_expression             shift and go to state 11

state 29

    (44) else_statement -> ELSE .

    NUMBER          reduce using rule 44 (else_statement -> ELSE .)
    STRING          reduce using rule 44 (else_statement -> ELSE .)
    VARIABLE        reduce using rule 44 (else_statement -> ELSE .)
    CHAR            reduce using rule 44 (else_statement -> ELSE .)
    EMIT            reduce using rule 44 (else_statement -> ELSE .)
    reserved_word   reduce using rule 44 (else_statement -> ELSE .)
    DOT             reduce using rule 44 (else_statement -> ELSE .)
    STDOUT          reduce using rule 44 (else_statement -> ELSE .)
    COMMENT         reduce using rule 44 (else_statement -> ELSE .)
    EXCLAMATION     reduce using rule 44 (else_statement -> ELSE .)
    AT              reduce using rule 44 (else_statement -> ELSE .)
    COLON           reduce using rule 44 (else_statement -> ELSE .)
    SEMICOLON       reduce using rule 44 (else_statement -> ELSE .)
    LEFT_PAREN      reduce using rule 44 (else_statement -> ELSE .)
    RIGHT_PAREN     reduce using rule 44 (else_statement -> ELSE .)
    IF              reduce using rule 44 (else_statement -> ELSE .)
    ELSE            reduce using rule 44 (else_statement -> ELSE .)
    WHILE           reduce using rule 44 (else_statement -> ELSE .)
    BEGIN           reduce using rule 44 (else_statement -> ELSE .)
    EXIT            reduce using rule 44 (else_statement -> ELSE .)
    DROP            reduce using rule 44 (else_statement -> ELSE .)
    $end            reduce using rule 44 (else_statement -> ELSE .)
    LOOP            reduce using rule 44 (else_statement -> ELSE .)


state 30

    (45) while_loop -> WHILE . expression DO statements LOOP
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (8) expression -> . VARIABLE
    (9) expression -> . CHAR
    (10) expression -> . EMIT
    (11) expression -> . special_expression
    (12) expression -> . reserved_word
    (13) expression -> . DOT
    (14) expression -> . STDOUT
    (16) expression -> . COMMENT
    (17) expression -> . expression expression arithmetic_op
    (23) expression -> . expression expression relational_op
    (29) expression -> . expression expression string_op
    (31) special_expression -> . EXCLAMATION
    (32) special_expression -> . AT
    (33) special_expression -> . COLON
    (34) special_expression -> . SEMICOLON
    (35) special_expression -> . LEFT_PAREN
    (36) special_expression -> . RIGHT_PAREN

    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    VARIABLE        shift and go to state 8
    CHAR            shift and go to state 9
    EMIT            shift and go to state 10
    reserved_word   shift and go to state 12
    DOT             shift and go to state 13
    STDOUT          shift and go to state 14
    COMMENT         shift and go to state 15
    EXCLAMATION     shift and go to state 22
    AT              shift and go to state 23
    COLON           shift and go to state 24
    SEMICOLON       shift and go to state 25
    LEFT_PAREN      shift and go to state 26
    RIGHT_PAREN     shift and go to state 27

    expression                     shift and go to state 37
    special_expression             shift and go to state 11

state 31

    (46) repeat_loop -> BEGIN . statements WHILE expression REPEAT
    (2) statements -> . statement
    (3) statements -> . statements statement
    (4) statement -> . expression
    (5) statement -> . flow_control
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (8) expression -> . VARIABLE
    (9) expression -> . CHAR
    (10) expression -> . EMIT
    (11) expression -> . special_expression
    (12) expression -> . reserved_word
    (13) expression -> . DOT
    (14) expression -> . STDOUT
    (16) expression -> . COMMENT
    (17) expression -> . expression expression arithmetic_op
    (23) expression -> . expression expression relational_op
    (29) expression -> . expression expression string_op
    (37) flow_control -> . if_statement
    (38) flow_control -> . else_statement
    (39) flow_control -> . while_loop
    (40) flow_control -> . repeat_loop
    (41) flow_control -> . exit_statement
    (42) flow_control -> . drop_statement
    (31) special_expression -> . EXCLAMATION
    (32) special_expression -> . AT
    (33) special_expression -> . COLON
    (34) special_expression -> . SEMICOLON
    (35) special_expression -> . LEFT_PAREN
    (36) special_expression -> . RIGHT_PAREN
    (43) if_statement -> . IF expression THEN statements
    (44) else_statement -> . ELSE
    (45) while_loop -> . WHILE expression DO statements LOOP
    (46) repeat_loop -> . BEGIN statements WHILE expression REPEAT
    (47) exit_statement -> . EXIT
    (48) drop_statement -> . DROP

    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    VARIABLE        shift and go to state 8
    CHAR            shift and go to state 9
    EMIT            shift and go to state 10
    reserved_word   shift and go to state 12
    DOT             shift and go to state 13
    STDOUT          shift and go to state 14
    COMMENT         shift and go to state 15
    EXCLAMATION     shift and go to state 22
    AT              shift and go to state 23
    COLON           shift and go to state 24
    SEMICOLON       shift and go to state 25
    LEFT_PAREN      shift and go to state 26
    RIGHT_PAREN     shift and go to state 27
    IF              shift and go to state 28
    ELSE            shift and go to state 29
    WHILE           shift and go to state 30
    BEGIN           shift and go to state 31
    EXIT            shift and go to state 32
    DROP            shift and go to state 33

    statements                     shift and go to state 38
    expression                     shift and go to state 4
    statement                      shift and go to state 3
    flow_control                   shift and go to state 5
    special_expression             shift and go to state 11
    if_statement                   shift and go to state 16
    else_statement                 shift and go to state 17
    while_loop                     shift and go to state 18
    repeat_loop                    shift and go to state 19
    exit_statement                 shift and go to state 20
    drop_statement                 shift and go to state 21

state 32

    (47) exit_statement -> EXIT .

    NUMBER          reduce using rule 47 (exit_statement -> EXIT .)
    STRING          reduce using rule 47 (exit_statement -> EXIT .)
    VARIABLE        reduce using rule 47 (exit_statement -> EXIT .)
    CHAR            reduce using rule 47 (exit_statement -> EXIT .)
    EMIT            reduce using rule 47 (exit_statement -> EXIT .)
    reserved_word   reduce using rule 47 (exit_statement -> EXIT .)
    DOT             reduce using rule 47 (exit_statement -> EXIT .)
    STDOUT          reduce using rule 47 (exit_statement -> EXIT .)
    COMMENT         reduce using rule 47 (exit_statement -> EXIT .)
    EXCLAMATION     reduce using rule 47 (exit_statement -> EXIT .)
    AT              reduce using rule 47 (exit_statement -> EXIT .)
    COLON           reduce using rule 47 (exit_statement -> EXIT .)
    SEMICOLON       reduce using rule 47 (exit_statement -> EXIT .)
    LEFT_PAREN      reduce using rule 47 (exit_statement -> EXIT .)
    RIGHT_PAREN     reduce using rule 47 (exit_statement -> EXIT .)
    IF              reduce using rule 47 (exit_statement -> EXIT .)
    ELSE            reduce using rule 47 (exit_statement -> EXIT .)
    WHILE           reduce using rule 47 (exit_statement -> EXIT .)
    BEGIN           reduce using rule 47 (exit_statement -> EXIT .)
    EXIT            reduce using rule 47 (exit_statement -> EXIT .)
    DROP            reduce using rule 47 (exit_statement -> EXIT .)
    $end            reduce using rule 47 (exit_statement -> EXIT .)
    LOOP            reduce using rule 47 (exit_statement -> EXIT .)


state 33

    (48) drop_statement -> DROP .

    NUMBER          reduce using rule 48 (drop_statement -> DROP .)
    STRING          reduce using rule 48 (drop_statement -> DROP .)
    VARIABLE        reduce using rule 48 (drop_statement -> DROP .)
    CHAR            reduce using rule 48 (drop_statement -> DROP .)
    EMIT            reduce using rule 48 (drop_statement -> DROP .)
    reserved_word   reduce using rule 48 (drop_statement -> DROP .)
    DOT             reduce using rule 48 (drop_statement -> DROP .)
    STDOUT          reduce using rule 48 (drop_statement -> DROP .)
    COMMENT         reduce using rule 48 (drop_statement -> DROP .)
    EXCLAMATION     reduce using rule 48 (drop_statement -> DROP .)
    AT              reduce using rule 48 (drop_statement -> DROP .)
    COLON           reduce using rule 48 (drop_statement -> DROP .)
    SEMICOLON       reduce using rule 48 (drop_statement -> DROP .)
    LEFT_PAREN      reduce using rule 48 (drop_statement -> DROP .)
    RIGHT_PAREN     reduce using rule 48 (drop_statement -> DROP .)
    IF              reduce using rule 48 (drop_statement -> DROP .)
    ELSE            reduce using rule 48 (drop_statement -> DROP .)
    WHILE           reduce using rule 48 (drop_statement -> DROP .)
    BEGIN           reduce using rule 48 (drop_statement -> DROP .)
    EXIT            reduce using rule 48 (drop_statement -> DROP .)
    DROP            reduce using rule 48 (drop_statement -> DROP .)
    $end            reduce using rule 48 (drop_statement -> DROP .)
    LOOP            reduce using rule 48 (drop_statement -> DROP .)


state 34

    (3) statements -> statements statement .

    NUMBER          reduce using rule 3 (statements -> statements statement .)
    STRING          reduce using rule 3 (statements -> statements statement .)
    VARIABLE        reduce using rule 3 (statements -> statements statement .)
    CHAR            reduce using rule 3 (statements -> statements statement .)
    EMIT            reduce using rule 3 (statements -> statements statement .)
    reserved_word   reduce using rule 3 (statements -> statements statement .)
    DOT             reduce using rule 3 (statements -> statements statement .)
    STDOUT          reduce using rule 3 (statements -> statements statement .)
    COMMENT         reduce using rule 3 (statements -> statements statement .)
    EXCLAMATION     reduce using rule 3 (statements -> statements statement .)
    AT              reduce using rule 3 (statements -> statements statement .)
    COLON           reduce using rule 3 (statements -> statements statement .)
    SEMICOLON       reduce using rule 3 (statements -> statements statement .)
    LEFT_PAREN      reduce using rule 3 (statements -> statements statement .)
    RIGHT_PAREN     reduce using rule 3 (statements -> statements statement .)
    IF              reduce using rule 3 (statements -> statements statement .)
    ELSE            reduce using rule 3 (statements -> statements statement .)
    WHILE           reduce using rule 3 (statements -> statements statement .)
    BEGIN           reduce using rule 3 (statements -> statements statement .)
    EXIT            reduce using rule 3 (statements -> statements statement .)
    DROP            reduce using rule 3 (statements -> statements statement .)
    $end            reduce using rule 3 (statements -> statements statement .)
    LOOP            reduce using rule 3 (statements -> statements statement .)


state 35

    (17) expression -> expression expression . arithmetic_op
    (23) expression -> expression expression . relational_op
    (29) expression -> expression expression . string_op
    (17) expression -> expression . expression arithmetic_op
    (23) expression -> expression . expression relational_op
    (29) expression -> expression . expression string_op
    (18) arithmetic_op -> . PLUS
    (19) arithmetic_op -> . MINUS
    (20) arithmetic_op -> . TIMES
    (21) arithmetic_op -> . DIVIDE
    (22) arithmetic_op -> . MOD
    (24) relational_op -> . NOT
    (25) relational_op -> . INF
    (26) relational_op -> . SUP
    (27) relational_op -> . INFEQ
    (28) relational_op -> . SUPEQ
    (30) string_op -> . CONCAT
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (8) expression -> . VARIABLE
    (9) expression -> . CHAR
    (10) expression -> . EMIT
    (11) expression -> . special_expression
    (12) expression -> . reserved_word
    (13) expression -> . DOT
    (14) expression -> . STDOUT
    (16) expression -> . COMMENT
    (17) expression -> . expression expression arithmetic_op
    (23) expression -> . expression expression relational_op
    (29) expression -> . expression expression string_op
    (31) special_expression -> . EXCLAMATION
    (32) special_expression -> . AT
    (33) special_expression -> . COLON
    (34) special_expression -> . SEMICOLON
    (35) special_expression -> . LEFT_PAREN
    (36) special_expression -> . RIGHT_PAREN

    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    MOD             shift and go to state 46
    NOT             shift and go to state 47
    INF             shift and go to state 48
    SUP             shift and go to state 49
    INFEQ           shift and go to state 50
    SUPEQ           shift and go to state 51
    CONCAT          shift and go to state 52
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    VARIABLE        shift and go to state 8
    CHAR            shift and go to state 9
    EMIT            shift and go to state 10
    reserved_word   shift and go to state 12
    DOT             shift and go to state 13
    STDOUT          shift and go to state 14
    COMMENT         shift and go to state 15
    EXCLAMATION     shift and go to state 22
    AT              shift and go to state 23
    COLON           shift and go to state 24
    SEMICOLON       shift and go to state 25
    LEFT_PAREN      shift and go to state 26
    RIGHT_PAREN     shift and go to state 27

    expression                     shift and go to state 35
    arithmetic_op                  shift and go to state 39
    relational_op                  shift and go to state 40
    string_op                      shift and go to state 41
    special_expression             shift and go to state 11

state 36

    (43) if_statement -> IF expression . THEN statements
    (17) expression -> expression . expression arithmetic_op
    (23) expression -> expression . expression relational_op
    (29) expression -> expression . expression string_op
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (8) expression -> . VARIABLE
    (9) expression -> . CHAR
    (10) expression -> . EMIT
    (11) expression -> . special_expression
    (12) expression -> . reserved_word
    (13) expression -> . DOT
    (14) expression -> . STDOUT
    (16) expression -> . COMMENT
    (17) expression -> . expression expression arithmetic_op
    (23) expression -> . expression expression relational_op
    (29) expression -> . expression expression string_op
    (31) special_expression -> . EXCLAMATION
    (32) special_expression -> . AT
    (33) special_expression -> . COLON
    (34) special_expression -> . SEMICOLON
    (35) special_expression -> . LEFT_PAREN
    (36) special_expression -> . RIGHT_PAREN

    THEN            shift and go to state 53
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    VARIABLE        shift and go to state 8
    CHAR            shift and go to state 9
    EMIT            shift and go to state 10
    reserved_word   shift and go to state 12
    DOT             shift and go to state 13
    STDOUT          shift and go to state 14
    COMMENT         shift and go to state 15
    EXCLAMATION     shift and go to state 22
    AT              shift and go to state 23
    COLON           shift and go to state 24
    SEMICOLON       shift and go to state 25
    LEFT_PAREN      shift and go to state 26
    RIGHT_PAREN     shift and go to state 27

    expression                     shift and go to state 35
    special_expression             shift and go to state 11

state 37

    (45) while_loop -> WHILE expression . DO statements LOOP
    (17) expression -> expression . expression arithmetic_op
    (23) expression -> expression . expression relational_op
    (29) expression -> expression . expression string_op
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (8) expression -> . VARIABLE
    (9) expression -> . CHAR
    (10) expression -> . EMIT
    (11) expression -> . special_expression
    (12) expression -> . reserved_word
    (13) expression -> . DOT
    (14) expression -> . STDOUT
    (16) expression -> . COMMENT
    (17) expression -> . expression expression arithmetic_op
    (23) expression -> . expression expression relational_op
    (29) expression -> . expression expression string_op
    (31) special_expression -> . EXCLAMATION
    (32) special_expression -> . AT
    (33) special_expression -> . COLON
    (34) special_expression -> . SEMICOLON
    (35) special_expression -> . LEFT_PAREN
    (36) special_expression -> . RIGHT_PAREN

    DO              shift and go to state 54
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    VARIABLE        shift and go to state 8
    CHAR            shift and go to state 9
    EMIT            shift and go to state 10
    reserved_word   shift and go to state 12
    DOT             shift and go to state 13
    STDOUT          shift and go to state 14
    COMMENT         shift and go to state 15
    EXCLAMATION     shift and go to state 22
    AT              shift and go to state 23
    COLON           shift and go to state 24
    SEMICOLON       shift and go to state 25
    LEFT_PAREN      shift and go to state 26
    RIGHT_PAREN     shift and go to state 27

    expression                     shift and go to state 35
    special_expression             shift and go to state 11

state 38

    (46) repeat_loop -> BEGIN statements . WHILE expression REPEAT
    (3) statements -> statements . statement
    (4) statement -> . expression
    (5) statement -> . flow_control
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (8) expression -> . VARIABLE
    (9) expression -> . CHAR
    (10) expression -> . EMIT
    (11) expression -> . special_expression
    (12) expression -> . reserved_word
    (13) expression -> . DOT
    (14) expression -> . STDOUT
    (16) expression -> . COMMENT
    (17) expression -> . expression expression arithmetic_op
    (23) expression -> . expression expression relational_op
    (29) expression -> . expression expression string_op
    (37) flow_control -> . if_statement
    (38) flow_control -> . else_statement
    (39) flow_control -> . while_loop
    (40) flow_control -> . repeat_loop
    (41) flow_control -> . exit_statement
    (42) flow_control -> . drop_statement
    (31) special_expression -> . EXCLAMATION
    (32) special_expression -> . AT
    (33) special_expression -> . COLON
    (34) special_expression -> . SEMICOLON
    (35) special_expression -> . LEFT_PAREN
    (36) special_expression -> . RIGHT_PAREN
    (43) if_statement -> . IF expression THEN statements
    (44) else_statement -> . ELSE
    (45) while_loop -> . WHILE expression DO statements LOOP
    (46) repeat_loop -> . BEGIN statements WHILE expression REPEAT
    (47) exit_statement -> . EXIT
    (48) drop_statement -> . DROP

    WHILE           shift and go to state 55
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    VARIABLE        shift and go to state 8
    CHAR            shift and go to state 9
    EMIT            shift and go to state 10
    reserved_word   shift and go to state 12
    DOT             shift and go to state 13
    STDOUT          shift and go to state 14
    COMMENT         shift and go to state 15
    EXCLAMATION     shift and go to state 22
    AT              shift and go to state 23
    COLON           shift and go to state 24
    SEMICOLON       shift and go to state 25
    LEFT_PAREN      shift and go to state 26
    RIGHT_PAREN     shift and go to state 27
    IF              shift and go to state 28
    ELSE            shift and go to state 29
    BEGIN           shift and go to state 31
    EXIT            shift and go to state 32
    DROP            shift and go to state 33

    expression                     shift and go to state 4
    statement                      shift and go to state 34
    flow_control                   shift and go to state 5
    special_expression             shift and go to state 11
    if_statement                   shift and go to state 16
    else_statement                 shift and go to state 17
    while_loop                     shift and go to state 18
    repeat_loop                    shift and go to state 19
    exit_statement                 shift and go to state 20
    drop_statement                 shift and go to state 21

state 39

    (17) expression -> expression expression arithmetic_op .

    NUMBER          reduce using rule 17 (expression -> expression expression arithmetic_op .)
    STRING          reduce using rule 17 (expression -> expression expression arithmetic_op .)
    VARIABLE        reduce using rule 17 (expression -> expression expression arithmetic_op .)
    CHAR            reduce using rule 17 (expression -> expression expression arithmetic_op .)
    EMIT            reduce using rule 17 (expression -> expression expression arithmetic_op .)
    reserved_word   reduce using rule 17 (expression -> expression expression arithmetic_op .)
    DOT             reduce using rule 17 (expression -> expression expression arithmetic_op .)
    STDOUT          reduce using rule 17 (expression -> expression expression arithmetic_op .)
    COMMENT         reduce using rule 17 (expression -> expression expression arithmetic_op .)
    EXCLAMATION     reduce using rule 17 (expression -> expression expression arithmetic_op .)
    AT              reduce using rule 17 (expression -> expression expression arithmetic_op .)
    COLON           reduce using rule 17 (expression -> expression expression arithmetic_op .)
    SEMICOLON       reduce using rule 17 (expression -> expression expression arithmetic_op .)
    LEFT_PAREN      reduce using rule 17 (expression -> expression expression arithmetic_op .)
    RIGHT_PAREN     reduce using rule 17 (expression -> expression expression arithmetic_op .)
    IF              reduce using rule 17 (expression -> expression expression arithmetic_op .)
    ELSE            reduce using rule 17 (expression -> expression expression arithmetic_op .)
    WHILE           reduce using rule 17 (expression -> expression expression arithmetic_op .)
    BEGIN           reduce using rule 17 (expression -> expression expression arithmetic_op .)
    EXIT            reduce using rule 17 (expression -> expression expression arithmetic_op .)
    DROP            reduce using rule 17 (expression -> expression expression arithmetic_op .)
    $end            reduce using rule 17 (expression -> expression expression arithmetic_op .)
    PLUS            reduce using rule 17 (expression -> expression expression arithmetic_op .)
    MINUS           reduce using rule 17 (expression -> expression expression arithmetic_op .)
    TIMES           reduce using rule 17 (expression -> expression expression arithmetic_op .)
    DIVIDE          reduce using rule 17 (expression -> expression expression arithmetic_op .)
    MOD             reduce using rule 17 (expression -> expression expression arithmetic_op .)
    NOT             reduce using rule 17 (expression -> expression expression arithmetic_op .)
    INF             reduce using rule 17 (expression -> expression expression arithmetic_op .)
    SUP             reduce using rule 17 (expression -> expression expression arithmetic_op .)
    INFEQ           reduce using rule 17 (expression -> expression expression arithmetic_op .)
    SUPEQ           reduce using rule 17 (expression -> expression expression arithmetic_op .)
    CONCAT          reduce using rule 17 (expression -> expression expression arithmetic_op .)
    THEN            reduce using rule 17 (expression -> expression expression arithmetic_op .)
    DO              reduce using rule 17 (expression -> expression expression arithmetic_op .)
    LOOP            reduce using rule 17 (expression -> expression expression arithmetic_op .)
    REPEAT          reduce using rule 17 (expression -> expression expression arithmetic_op .)


state 40

    (23) expression -> expression expression relational_op .

    NUMBER          reduce using rule 23 (expression -> expression expression relational_op .)
    STRING          reduce using rule 23 (expression -> expression expression relational_op .)
    VARIABLE        reduce using rule 23 (expression -> expression expression relational_op .)
    CHAR            reduce using rule 23 (expression -> expression expression relational_op .)
    EMIT            reduce using rule 23 (expression -> expression expression relational_op .)
    reserved_word   reduce using rule 23 (expression -> expression expression relational_op .)
    DOT             reduce using rule 23 (expression -> expression expression relational_op .)
    STDOUT          reduce using rule 23 (expression -> expression expression relational_op .)
    COMMENT         reduce using rule 23 (expression -> expression expression relational_op .)
    EXCLAMATION     reduce using rule 23 (expression -> expression expression relational_op .)
    AT              reduce using rule 23 (expression -> expression expression relational_op .)
    COLON           reduce using rule 23 (expression -> expression expression relational_op .)
    SEMICOLON       reduce using rule 23 (expression -> expression expression relational_op .)
    LEFT_PAREN      reduce using rule 23 (expression -> expression expression relational_op .)
    RIGHT_PAREN     reduce using rule 23 (expression -> expression expression relational_op .)
    IF              reduce using rule 23 (expression -> expression expression relational_op .)
    ELSE            reduce using rule 23 (expression -> expression expression relational_op .)
    WHILE           reduce using rule 23 (expression -> expression expression relational_op .)
    BEGIN           reduce using rule 23 (expression -> expression expression relational_op .)
    EXIT            reduce using rule 23 (expression -> expression expression relational_op .)
    DROP            reduce using rule 23 (expression -> expression expression relational_op .)
    $end            reduce using rule 23 (expression -> expression expression relational_op .)
    PLUS            reduce using rule 23 (expression -> expression expression relational_op .)
    MINUS           reduce using rule 23 (expression -> expression expression relational_op .)
    TIMES           reduce using rule 23 (expression -> expression expression relational_op .)
    DIVIDE          reduce using rule 23 (expression -> expression expression relational_op .)
    MOD             reduce using rule 23 (expression -> expression expression relational_op .)
    NOT             reduce using rule 23 (expression -> expression expression relational_op .)
    INF             reduce using rule 23 (expression -> expression expression relational_op .)
    SUP             reduce using rule 23 (expression -> expression expression relational_op .)
    INFEQ           reduce using rule 23 (expression -> expression expression relational_op .)
    SUPEQ           reduce using rule 23 (expression -> expression expression relational_op .)
    CONCAT          reduce using rule 23 (expression -> expression expression relational_op .)
    THEN            reduce using rule 23 (expression -> expression expression relational_op .)
    DO              reduce using rule 23 (expression -> expression expression relational_op .)
    LOOP            reduce using rule 23 (expression -> expression expression relational_op .)
    REPEAT          reduce using rule 23 (expression -> expression expression relational_op .)


state 41

    (29) expression -> expression expression string_op .

    NUMBER          reduce using rule 29 (expression -> expression expression string_op .)
    STRING          reduce using rule 29 (expression -> expression expression string_op .)
    VARIABLE        reduce using rule 29 (expression -> expression expression string_op .)
    CHAR            reduce using rule 29 (expression -> expression expression string_op .)
    EMIT            reduce using rule 29 (expression -> expression expression string_op .)
    reserved_word   reduce using rule 29 (expression -> expression expression string_op .)
    DOT             reduce using rule 29 (expression -> expression expression string_op .)
    STDOUT          reduce using rule 29 (expression -> expression expression string_op .)
    COMMENT         reduce using rule 29 (expression -> expression expression string_op .)
    EXCLAMATION     reduce using rule 29 (expression -> expression expression string_op .)
    AT              reduce using rule 29 (expression -> expression expression string_op .)
    COLON           reduce using rule 29 (expression -> expression expression string_op .)
    SEMICOLON       reduce using rule 29 (expression -> expression expression string_op .)
    LEFT_PAREN      reduce using rule 29 (expression -> expression expression string_op .)
    RIGHT_PAREN     reduce using rule 29 (expression -> expression expression string_op .)
    IF              reduce using rule 29 (expression -> expression expression string_op .)
    ELSE            reduce using rule 29 (expression -> expression expression string_op .)
    WHILE           reduce using rule 29 (expression -> expression expression string_op .)
    BEGIN           reduce using rule 29 (expression -> expression expression string_op .)
    EXIT            reduce using rule 29 (expression -> expression expression string_op .)
    DROP            reduce using rule 29 (expression -> expression expression string_op .)
    $end            reduce using rule 29 (expression -> expression expression string_op .)
    PLUS            reduce using rule 29 (expression -> expression expression string_op .)
    MINUS           reduce using rule 29 (expression -> expression expression string_op .)
    TIMES           reduce using rule 29 (expression -> expression expression string_op .)
    DIVIDE          reduce using rule 29 (expression -> expression expression string_op .)
    MOD             reduce using rule 29 (expression -> expression expression string_op .)
    NOT             reduce using rule 29 (expression -> expression expression string_op .)
    INF             reduce using rule 29 (expression -> expression expression string_op .)
    SUP             reduce using rule 29 (expression -> expression expression string_op .)
    INFEQ           reduce using rule 29 (expression -> expression expression string_op .)
    SUPEQ           reduce using rule 29 (expression -> expression expression string_op .)
    CONCAT          reduce using rule 29 (expression -> expression expression string_op .)
    THEN            reduce using rule 29 (expression -> expression expression string_op .)
    DO              reduce using rule 29 (expression -> expression expression string_op .)
    LOOP            reduce using rule 29 (expression -> expression expression string_op .)
    REPEAT          reduce using rule 29 (expression -> expression expression string_op .)


state 42

    (18) arithmetic_op -> PLUS .

    NUMBER          reduce using rule 18 (arithmetic_op -> PLUS .)
    STRING          reduce using rule 18 (arithmetic_op -> PLUS .)
    VARIABLE        reduce using rule 18 (arithmetic_op -> PLUS .)
    CHAR            reduce using rule 18 (arithmetic_op -> PLUS .)
    EMIT            reduce using rule 18 (arithmetic_op -> PLUS .)
    reserved_word   reduce using rule 18 (arithmetic_op -> PLUS .)
    DOT             reduce using rule 18 (arithmetic_op -> PLUS .)
    STDOUT          reduce using rule 18 (arithmetic_op -> PLUS .)
    COMMENT         reduce using rule 18 (arithmetic_op -> PLUS .)
    EXCLAMATION     reduce using rule 18 (arithmetic_op -> PLUS .)
    AT              reduce using rule 18 (arithmetic_op -> PLUS .)
    COLON           reduce using rule 18 (arithmetic_op -> PLUS .)
    SEMICOLON       reduce using rule 18 (arithmetic_op -> PLUS .)
    LEFT_PAREN      reduce using rule 18 (arithmetic_op -> PLUS .)
    RIGHT_PAREN     reduce using rule 18 (arithmetic_op -> PLUS .)
    IF              reduce using rule 18 (arithmetic_op -> PLUS .)
    ELSE            reduce using rule 18 (arithmetic_op -> PLUS .)
    WHILE           reduce using rule 18 (arithmetic_op -> PLUS .)
    BEGIN           reduce using rule 18 (arithmetic_op -> PLUS .)
    EXIT            reduce using rule 18 (arithmetic_op -> PLUS .)
    DROP            reduce using rule 18 (arithmetic_op -> PLUS .)
    $end            reduce using rule 18 (arithmetic_op -> PLUS .)
    PLUS            reduce using rule 18 (arithmetic_op -> PLUS .)
    MINUS           reduce using rule 18 (arithmetic_op -> PLUS .)
    TIMES           reduce using rule 18 (arithmetic_op -> PLUS .)
    DIVIDE          reduce using rule 18 (arithmetic_op -> PLUS .)
    MOD             reduce using rule 18 (arithmetic_op -> PLUS .)
    NOT             reduce using rule 18 (arithmetic_op -> PLUS .)
    INF             reduce using rule 18 (arithmetic_op -> PLUS .)
    SUP             reduce using rule 18 (arithmetic_op -> PLUS .)
    INFEQ           reduce using rule 18 (arithmetic_op -> PLUS .)
    SUPEQ           reduce using rule 18 (arithmetic_op -> PLUS .)
    CONCAT          reduce using rule 18 (arithmetic_op -> PLUS .)
    THEN            reduce using rule 18 (arithmetic_op -> PLUS .)
    DO              reduce using rule 18 (arithmetic_op -> PLUS .)
    LOOP            reduce using rule 18 (arithmetic_op -> PLUS .)
    REPEAT          reduce using rule 18 (arithmetic_op -> PLUS .)


state 43

    (19) arithmetic_op -> MINUS .

    NUMBER          reduce using rule 19 (arithmetic_op -> MINUS .)
    STRING          reduce using rule 19 (arithmetic_op -> MINUS .)
    VARIABLE        reduce using rule 19 (arithmetic_op -> MINUS .)
    CHAR            reduce using rule 19 (arithmetic_op -> MINUS .)
    EMIT            reduce using rule 19 (arithmetic_op -> MINUS .)
    reserved_word   reduce using rule 19 (arithmetic_op -> MINUS .)
    DOT             reduce using rule 19 (arithmetic_op -> MINUS .)
    STDOUT          reduce using rule 19 (arithmetic_op -> MINUS .)
    COMMENT         reduce using rule 19 (arithmetic_op -> MINUS .)
    EXCLAMATION     reduce using rule 19 (arithmetic_op -> MINUS .)
    AT              reduce using rule 19 (arithmetic_op -> MINUS .)
    COLON           reduce using rule 19 (arithmetic_op -> MINUS .)
    SEMICOLON       reduce using rule 19 (arithmetic_op -> MINUS .)
    LEFT_PAREN      reduce using rule 19 (arithmetic_op -> MINUS .)
    RIGHT_PAREN     reduce using rule 19 (arithmetic_op -> MINUS .)
    IF              reduce using rule 19 (arithmetic_op -> MINUS .)
    ELSE            reduce using rule 19 (arithmetic_op -> MINUS .)
    WHILE           reduce using rule 19 (arithmetic_op -> MINUS .)
    BEGIN           reduce using rule 19 (arithmetic_op -> MINUS .)
    EXIT            reduce using rule 19 (arithmetic_op -> MINUS .)
    DROP            reduce using rule 19 (arithmetic_op -> MINUS .)
    $end            reduce using rule 19 (arithmetic_op -> MINUS .)
    PLUS            reduce using rule 19 (arithmetic_op -> MINUS .)
    MINUS           reduce using rule 19 (arithmetic_op -> MINUS .)
    TIMES           reduce using rule 19 (arithmetic_op -> MINUS .)
    DIVIDE          reduce using rule 19 (arithmetic_op -> MINUS .)
    MOD             reduce using rule 19 (arithmetic_op -> MINUS .)
    NOT             reduce using rule 19 (arithmetic_op -> MINUS .)
    INF             reduce using rule 19 (arithmetic_op -> MINUS .)
    SUP             reduce using rule 19 (arithmetic_op -> MINUS .)
    INFEQ           reduce using rule 19 (arithmetic_op -> MINUS .)
    SUPEQ           reduce using rule 19 (arithmetic_op -> MINUS .)
    CONCAT          reduce using rule 19 (arithmetic_op -> MINUS .)
    THEN            reduce using rule 19 (arithmetic_op -> MINUS .)
    DO              reduce using rule 19 (arithmetic_op -> MINUS .)
    LOOP            reduce using rule 19 (arithmetic_op -> MINUS .)
    REPEAT          reduce using rule 19 (arithmetic_op -> MINUS .)


state 44

    (20) arithmetic_op -> TIMES .

    NUMBER          reduce using rule 20 (arithmetic_op -> TIMES .)
    STRING          reduce using rule 20 (arithmetic_op -> TIMES .)
    VARIABLE        reduce using rule 20 (arithmetic_op -> TIMES .)
    CHAR            reduce using rule 20 (arithmetic_op -> TIMES .)
    EMIT            reduce using rule 20 (arithmetic_op -> TIMES .)
    reserved_word   reduce using rule 20 (arithmetic_op -> TIMES .)
    DOT             reduce using rule 20 (arithmetic_op -> TIMES .)
    STDOUT          reduce using rule 20 (arithmetic_op -> TIMES .)
    COMMENT         reduce using rule 20 (arithmetic_op -> TIMES .)
    EXCLAMATION     reduce using rule 20 (arithmetic_op -> TIMES .)
    AT              reduce using rule 20 (arithmetic_op -> TIMES .)
    COLON           reduce using rule 20 (arithmetic_op -> TIMES .)
    SEMICOLON       reduce using rule 20 (arithmetic_op -> TIMES .)
    LEFT_PAREN      reduce using rule 20 (arithmetic_op -> TIMES .)
    RIGHT_PAREN     reduce using rule 20 (arithmetic_op -> TIMES .)
    IF              reduce using rule 20 (arithmetic_op -> TIMES .)
    ELSE            reduce using rule 20 (arithmetic_op -> TIMES .)
    WHILE           reduce using rule 20 (arithmetic_op -> TIMES .)
    BEGIN           reduce using rule 20 (arithmetic_op -> TIMES .)
    EXIT            reduce using rule 20 (arithmetic_op -> TIMES .)
    DROP            reduce using rule 20 (arithmetic_op -> TIMES .)
    $end            reduce using rule 20 (arithmetic_op -> TIMES .)
    PLUS            reduce using rule 20 (arithmetic_op -> TIMES .)
    MINUS           reduce using rule 20 (arithmetic_op -> TIMES .)
    TIMES           reduce using rule 20 (arithmetic_op -> TIMES .)
    DIVIDE          reduce using rule 20 (arithmetic_op -> TIMES .)
    MOD             reduce using rule 20 (arithmetic_op -> TIMES .)
    NOT             reduce using rule 20 (arithmetic_op -> TIMES .)
    INF             reduce using rule 20 (arithmetic_op -> TIMES .)
    SUP             reduce using rule 20 (arithmetic_op -> TIMES .)
    INFEQ           reduce using rule 20 (arithmetic_op -> TIMES .)
    SUPEQ           reduce using rule 20 (arithmetic_op -> TIMES .)
    CONCAT          reduce using rule 20 (arithmetic_op -> TIMES .)
    THEN            reduce using rule 20 (arithmetic_op -> TIMES .)
    DO              reduce using rule 20 (arithmetic_op -> TIMES .)
    LOOP            reduce using rule 20 (arithmetic_op -> TIMES .)
    REPEAT          reduce using rule 20 (arithmetic_op -> TIMES .)


state 45

    (21) arithmetic_op -> DIVIDE .

    NUMBER          reduce using rule 21 (arithmetic_op -> DIVIDE .)
    STRING          reduce using rule 21 (arithmetic_op -> DIVIDE .)
    VARIABLE        reduce using rule 21 (arithmetic_op -> DIVIDE .)
    CHAR            reduce using rule 21 (arithmetic_op -> DIVIDE .)
    EMIT            reduce using rule 21 (arithmetic_op -> DIVIDE .)
    reserved_word   reduce using rule 21 (arithmetic_op -> DIVIDE .)
    DOT             reduce using rule 21 (arithmetic_op -> DIVIDE .)
    STDOUT          reduce using rule 21 (arithmetic_op -> DIVIDE .)
    COMMENT         reduce using rule 21 (arithmetic_op -> DIVIDE .)
    EXCLAMATION     reduce using rule 21 (arithmetic_op -> DIVIDE .)
    AT              reduce using rule 21 (arithmetic_op -> DIVIDE .)
    COLON           reduce using rule 21 (arithmetic_op -> DIVIDE .)
    SEMICOLON       reduce using rule 21 (arithmetic_op -> DIVIDE .)
    LEFT_PAREN      reduce using rule 21 (arithmetic_op -> DIVIDE .)
    RIGHT_PAREN     reduce using rule 21 (arithmetic_op -> DIVIDE .)
    IF              reduce using rule 21 (arithmetic_op -> DIVIDE .)
    ELSE            reduce using rule 21 (arithmetic_op -> DIVIDE .)
    WHILE           reduce using rule 21 (arithmetic_op -> DIVIDE .)
    BEGIN           reduce using rule 21 (arithmetic_op -> DIVIDE .)
    EXIT            reduce using rule 21 (arithmetic_op -> DIVIDE .)
    DROP            reduce using rule 21 (arithmetic_op -> DIVIDE .)
    $end            reduce using rule 21 (arithmetic_op -> DIVIDE .)
    PLUS            reduce using rule 21 (arithmetic_op -> DIVIDE .)
    MINUS           reduce using rule 21 (arithmetic_op -> DIVIDE .)
    TIMES           reduce using rule 21 (arithmetic_op -> DIVIDE .)
    DIVIDE          reduce using rule 21 (arithmetic_op -> DIVIDE .)
    MOD             reduce using rule 21 (arithmetic_op -> DIVIDE .)
    NOT             reduce using rule 21 (arithmetic_op -> DIVIDE .)
    INF             reduce using rule 21 (arithmetic_op -> DIVIDE .)
    SUP             reduce using rule 21 (arithmetic_op -> DIVIDE .)
    INFEQ           reduce using rule 21 (arithmetic_op -> DIVIDE .)
    SUPEQ           reduce using rule 21 (arithmetic_op -> DIVIDE .)
    CONCAT          reduce using rule 21 (arithmetic_op -> DIVIDE .)
    THEN            reduce using rule 21 (arithmetic_op -> DIVIDE .)
    DO              reduce using rule 21 (arithmetic_op -> DIVIDE .)
    LOOP            reduce using rule 21 (arithmetic_op -> DIVIDE .)
    REPEAT          reduce using rule 21 (arithmetic_op -> DIVIDE .)


state 46

    (22) arithmetic_op -> MOD .

    NUMBER          reduce using rule 22 (arithmetic_op -> MOD .)
    STRING          reduce using rule 22 (arithmetic_op -> MOD .)
    VARIABLE        reduce using rule 22 (arithmetic_op -> MOD .)
    CHAR            reduce using rule 22 (arithmetic_op -> MOD .)
    EMIT            reduce using rule 22 (arithmetic_op -> MOD .)
    reserved_word   reduce using rule 22 (arithmetic_op -> MOD .)
    DOT             reduce using rule 22 (arithmetic_op -> MOD .)
    STDOUT          reduce using rule 22 (arithmetic_op -> MOD .)
    COMMENT         reduce using rule 22 (arithmetic_op -> MOD .)
    EXCLAMATION     reduce using rule 22 (arithmetic_op -> MOD .)
    AT              reduce using rule 22 (arithmetic_op -> MOD .)
    COLON           reduce using rule 22 (arithmetic_op -> MOD .)
    SEMICOLON       reduce using rule 22 (arithmetic_op -> MOD .)
    LEFT_PAREN      reduce using rule 22 (arithmetic_op -> MOD .)
    RIGHT_PAREN     reduce using rule 22 (arithmetic_op -> MOD .)
    IF              reduce using rule 22 (arithmetic_op -> MOD .)
    ELSE            reduce using rule 22 (arithmetic_op -> MOD .)
    WHILE           reduce using rule 22 (arithmetic_op -> MOD .)
    BEGIN           reduce using rule 22 (arithmetic_op -> MOD .)
    EXIT            reduce using rule 22 (arithmetic_op -> MOD .)
    DROP            reduce using rule 22 (arithmetic_op -> MOD .)
    $end            reduce using rule 22 (arithmetic_op -> MOD .)
    PLUS            reduce using rule 22 (arithmetic_op -> MOD .)
    MINUS           reduce using rule 22 (arithmetic_op -> MOD .)
    TIMES           reduce using rule 22 (arithmetic_op -> MOD .)
    DIVIDE          reduce using rule 22 (arithmetic_op -> MOD .)
    MOD             reduce using rule 22 (arithmetic_op -> MOD .)
    NOT             reduce using rule 22 (arithmetic_op -> MOD .)
    INF             reduce using rule 22 (arithmetic_op -> MOD .)
    SUP             reduce using rule 22 (arithmetic_op -> MOD .)
    INFEQ           reduce using rule 22 (arithmetic_op -> MOD .)
    SUPEQ           reduce using rule 22 (arithmetic_op -> MOD .)
    CONCAT          reduce using rule 22 (arithmetic_op -> MOD .)
    THEN            reduce using rule 22 (arithmetic_op -> MOD .)
    DO              reduce using rule 22 (arithmetic_op -> MOD .)
    LOOP            reduce using rule 22 (arithmetic_op -> MOD .)
    REPEAT          reduce using rule 22 (arithmetic_op -> MOD .)


state 47

    (24) relational_op -> NOT .

    NUMBER          reduce using rule 24 (relational_op -> NOT .)
    STRING          reduce using rule 24 (relational_op -> NOT .)
    VARIABLE        reduce using rule 24 (relational_op -> NOT .)
    CHAR            reduce using rule 24 (relational_op -> NOT .)
    EMIT            reduce using rule 24 (relational_op -> NOT .)
    reserved_word   reduce using rule 24 (relational_op -> NOT .)
    DOT             reduce using rule 24 (relational_op -> NOT .)
    STDOUT          reduce using rule 24 (relational_op -> NOT .)
    COMMENT         reduce using rule 24 (relational_op -> NOT .)
    EXCLAMATION     reduce using rule 24 (relational_op -> NOT .)
    AT              reduce using rule 24 (relational_op -> NOT .)
    COLON           reduce using rule 24 (relational_op -> NOT .)
    SEMICOLON       reduce using rule 24 (relational_op -> NOT .)
    LEFT_PAREN      reduce using rule 24 (relational_op -> NOT .)
    RIGHT_PAREN     reduce using rule 24 (relational_op -> NOT .)
    IF              reduce using rule 24 (relational_op -> NOT .)
    ELSE            reduce using rule 24 (relational_op -> NOT .)
    WHILE           reduce using rule 24 (relational_op -> NOT .)
    BEGIN           reduce using rule 24 (relational_op -> NOT .)
    EXIT            reduce using rule 24 (relational_op -> NOT .)
    DROP            reduce using rule 24 (relational_op -> NOT .)
    $end            reduce using rule 24 (relational_op -> NOT .)
    PLUS            reduce using rule 24 (relational_op -> NOT .)
    MINUS           reduce using rule 24 (relational_op -> NOT .)
    TIMES           reduce using rule 24 (relational_op -> NOT .)
    DIVIDE          reduce using rule 24 (relational_op -> NOT .)
    MOD             reduce using rule 24 (relational_op -> NOT .)
    NOT             reduce using rule 24 (relational_op -> NOT .)
    INF             reduce using rule 24 (relational_op -> NOT .)
    SUP             reduce using rule 24 (relational_op -> NOT .)
    INFEQ           reduce using rule 24 (relational_op -> NOT .)
    SUPEQ           reduce using rule 24 (relational_op -> NOT .)
    CONCAT          reduce using rule 24 (relational_op -> NOT .)
    THEN            reduce using rule 24 (relational_op -> NOT .)
    DO              reduce using rule 24 (relational_op -> NOT .)
    LOOP            reduce using rule 24 (relational_op -> NOT .)
    REPEAT          reduce using rule 24 (relational_op -> NOT .)


state 48

    (25) relational_op -> INF .

    NUMBER          reduce using rule 25 (relational_op -> INF .)
    STRING          reduce using rule 25 (relational_op -> INF .)
    VARIABLE        reduce using rule 25 (relational_op -> INF .)
    CHAR            reduce using rule 25 (relational_op -> INF .)
    EMIT            reduce using rule 25 (relational_op -> INF .)
    reserved_word   reduce using rule 25 (relational_op -> INF .)
    DOT             reduce using rule 25 (relational_op -> INF .)
    STDOUT          reduce using rule 25 (relational_op -> INF .)
    COMMENT         reduce using rule 25 (relational_op -> INF .)
    EXCLAMATION     reduce using rule 25 (relational_op -> INF .)
    AT              reduce using rule 25 (relational_op -> INF .)
    COLON           reduce using rule 25 (relational_op -> INF .)
    SEMICOLON       reduce using rule 25 (relational_op -> INF .)
    LEFT_PAREN      reduce using rule 25 (relational_op -> INF .)
    RIGHT_PAREN     reduce using rule 25 (relational_op -> INF .)
    IF              reduce using rule 25 (relational_op -> INF .)
    ELSE            reduce using rule 25 (relational_op -> INF .)
    WHILE           reduce using rule 25 (relational_op -> INF .)
    BEGIN           reduce using rule 25 (relational_op -> INF .)
    EXIT            reduce using rule 25 (relational_op -> INF .)
    DROP            reduce using rule 25 (relational_op -> INF .)
    $end            reduce using rule 25 (relational_op -> INF .)
    PLUS            reduce using rule 25 (relational_op -> INF .)
    MINUS           reduce using rule 25 (relational_op -> INF .)
    TIMES           reduce using rule 25 (relational_op -> INF .)
    DIVIDE          reduce using rule 25 (relational_op -> INF .)
    MOD             reduce using rule 25 (relational_op -> INF .)
    NOT             reduce using rule 25 (relational_op -> INF .)
    INF             reduce using rule 25 (relational_op -> INF .)
    SUP             reduce using rule 25 (relational_op -> INF .)
    INFEQ           reduce using rule 25 (relational_op -> INF .)
    SUPEQ           reduce using rule 25 (relational_op -> INF .)
    CONCAT          reduce using rule 25 (relational_op -> INF .)
    THEN            reduce using rule 25 (relational_op -> INF .)
    DO              reduce using rule 25 (relational_op -> INF .)
    LOOP            reduce using rule 25 (relational_op -> INF .)
    REPEAT          reduce using rule 25 (relational_op -> INF .)


state 49

    (26) relational_op -> SUP .

    NUMBER          reduce using rule 26 (relational_op -> SUP .)
    STRING          reduce using rule 26 (relational_op -> SUP .)
    VARIABLE        reduce using rule 26 (relational_op -> SUP .)
    CHAR            reduce using rule 26 (relational_op -> SUP .)
    EMIT            reduce using rule 26 (relational_op -> SUP .)
    reserved_word   reduce using rule 26 (relational_op -> SUP .)
    DOT             reduce using rule 26 (relational_op -> SUP .)
    STDOUT          reduce using rule 26 (relational_op -> SUP .)
    COMMENT         reduce using rule 26 (relational_op -> SUP .)
    EXCLAMATION     reduce using rule 26 (relational_op -> SUP .)
    AT              reduce using rule 26 (relational_op -> SUP .)
    COLON           reduce using rule 26 (relational_op -> SUP .)
    SEMICOLON       reduce using rule 26 (relational_op -> SUP .)
    LEFT_PAREN      reduce using rule 26 (relational_op -> SUP .)
    RIGHT_PAREN     reduce using rule 26 (relational_op -> SUP .)
    IF              reduce using rule 26 (relational_op -> SUP .)
    ELSE            reduce using rule 26 (relational_op -> SUP .)
    WHILE           reduce using rule 26 (relational_op -> SUP .)
    BEGIN           reduce using rule 26 (relational_op -> SUP .)
    EXIT            reduce using rule 26 (relational_op -> SUP .)
    DROP            reduce using rule 26 (relational_op -> SUP .)
    $end            reduce using rule 26 (relational_op -> SUP .)
    PLUS            reduce using rule 26 (relational_op -> SUP .)
    MINUS           reduce using rule 26 (relational_op -> SUP .)
    TIMES           reduce using rule 26 (relational_op -> SUP .)
    DIVIDE          reduce using rule 26 (relational_op -> SUP .)
    MOD             reduce using rule 26 (relational_op -> SUP .)
    NOT             reduce using rule 26 (relational_op -> SUP .)
    INF             reduce using rule 26 (relational_op -> SUP .)
    SUP             reduce using rule 26 (relational_op -> SUP .)
    INFEQ           reduce using rule 26 (relational_op -> SUP .)
    SUPEQ           reduce using rule 26 (relational_op -> SUP .)
    CONCAT          reduce using rule 26 (relational_op -> SUP .)
    THEN            reduce using rule 26 (relational_op -> SUP .)
    DO              reduce using rule 26 (relational_op -> SUP .)
    LOOP            reduce using rule 26 (relational_op -> SUP .)
    REPEAT          reduce using rule 26 (relational_op -> SUP .)


state 50

    (27) relational_op -> INFEQ .

    NUMBER          reduce using rule 27 (relational_op -> INFEQ .)
    STRING          reduce using rule 27 (relational_op -> INFEQ .)
    VARIABLE        reduce using rule 27 (relational_op -> INFEQ .)
    CHAR            reduce using rule 27 (relational_op -> INFEQ .)
    EMIT            reduce using rule 27 (relational_op -> INFEQ .)
    reserved_word   reduce using rule 27 (relational_op -> INFEQ .)
    DOT             reduce using rule 27 (relational_op -> INFEQ .)
    STDOUT          reduce using rule 27 (relational_op -> INFEQ .)
    COMMENT         reduce using rule 27 (relational_op -> INFEQ .)
    EXCLAMATION     reduce using rule 27 (relational_op -> INFEQ .)
    AT              reduce using rule 27 (relational_op -> INFEQ .)
    COLON           reduce using rule 27 (relational_op -> INFEQ .)
    SEMICOLON       reduce using rule 27 (relational_op -> INFEQ .)
    LEFT_PAREN      reduce using rule 27 (relational_op -> INFEQ .)
    RIGHT_PAREN     reduce using rule 27 (relational_op -> INFEQ .)
    IF              reduce using rule 27 (relational_op -> INFEQ .)
    ELSE            reduce using rule 27 (relational_op -> INFEQ .)
    WHILE           reduce using rule 27 (relational_op -> INFEQ .)
    BEGIN           reduce using rule 27 (relational_op -> INFEQ .)
    EXIT            reduce using rule 27 (relational_op -> INFEQ .)
    DROP            reduce using rule 27 (relational_op -> INFEQ .)
    $end            reduce using rule 27 (relational_op -> INFEQ .)
    PLUS            reduce using rule 27 (relational_op -> INFEQ .)
    MINUS           reduce using rule 27 (relational_op -> INFEQ .)
    TIMES           reduce using rule 27 (relational_op -> INFEQ .)
    DIVIDE          reduce using rule 27 (relational_op -> INFEQ .)
    MOD             reduce using rule 27 (relational_op -> INFEQ .)
    NOT             reduce using rule 27 (relational_op -> INFEQ .)
    INF             reduce using rule 27 (relational_op -> INFEQ .)
    SUP             reduce using rule 27 (relational_op -> INFEQ .)
    INFEQ           reduce using rule 27 (relational_op -> INFEQ .)
    SUPEQ           reduce using rule 27 (relational_op -> INFEQ .)
    CONCAT          reduce using rule 27 (relational_op -> INFEQ .)
    THEN            reduce using rule 27 (relational_op -> INFEQ .)
    DO              reduce using rule 27 (relational_op -> INFEQ .)
    LOOP            reduce using rule 27 (relational_op -> INFEQ .)
    REPEAT          reduce using rule 27 (relational_op -> INFEQ .)


state 51

    (28) relational_op -> SUPEQ .

    NUMBER          reduce using rule 28 (relational_op -> SUPEQ .)
    STRING          reduce using rule 28 (relational_op -> SUPEQ .)
    VARIABLE        reduce using rule 28 (relational_op -> SUPEQ .)
    CHAR            reduce using rule 28 (relational_op -> SUPEQ .)
    EMIT            reduce using rule 28 (relational_op -> SUPEQ .)
    reserved_word   reduce using rule 28 (relational_op -> SUPEQ .)
    DOT             reduce using rule 28 (relational_op -> SUPEQ .)
    STDOUT          reduce using rule 28 (relational_op -> SUPEQ .)
    COMMENT         reduce using rule 28 (relational_op -> SUPEQ .)
    EXCLAMATION     reduce using rule 28 (relational_op -> SUPEQ .)
    AT              reduce using rule 28 (relational_op -> SUPEQ .)
    COLON           reduce using rule 28 (relational_op -> SUPEQ .)
    SEMICOLON       reduce using rule 28 (relational_op -> SUPEQ .)
    LEFT_PAREN      reduce using rule 28 (relational_op -> SUPEQ .)
    RIGHT_PAREN     reduce using rule 28 (relational_op -> SUPEQ .)
    IF              reduce using rule 28 (relational_op -> SUPEQ .)
    ELSE            reduce using rule 28 (relational_op -> SUPEQ .)
    WHILE           reduce using rule 28 (relational_op -> SUPEQ .)
    BEGIN           reduce using rule 28 (relational_op -> SUPEQ .)
    EXIT            reduce using rule 28 (relational_op -> SUPEQ .)
    DROP            reduce using rule 28 (relational_op -> SUPEQ .)
    $end            reduce using rule 28 (relational_op -> SUPEQ .)
    PLUS            reduce using rule 28 (relational_op -> SUPEQ .)
    MINUS           reduce using rule 28 (relational_op -> SUPEQ .)
    TIMES           reduce using rule 28 (relational_op -> SUPEQ .)
    DIVIDE          reduce using rule 28 (relational_op -> SUPEQ .)
    MOD             reduce using rule 28 (relational_op -> SUPEQ .)
    NOT             reduce using rule 28 (relational_op -> SUPEQ .)
    INF             reduce using rule 28 (relational_op -> SUPEQ .)
    SUP             reduce using rule 28 (relational_op -> SUPEQ .)
    INFEQ           reduce using rule 28 (relational_op -> SUPEQ .)
    SUPEQ           reduce using rule 28 (relational_op -> SUPEQ .)
    CONCAT          reduce using rule 28 (relational_op -> SUPEQ .)
    THEN            reduce using rule 28 (relational_op -> SUPEQ .)
    DO              reduce using rule 28 (relational_op -> SUPEQ .)
    LOOP            reduce using rule 28 (relational_op -> SUPEQ .)
    REPEAT          reduce using rule 28 (relational_op -> SUPEQ .)


state 52

    (30) string_op -> CONCAT .

    NUMBER          reduce using rule 30 (string_op -> CONCAT .)
    STRING          reduce using rule 30 (string_op -> CONCAT .)
    VARIABLE        reduce using rule 30 (string_op -> CONCAT .)
    CHAR            reduce using rule 30 (string_op -> CONCAT .)
    EMIT            reduce using rule 30 (string_op -> CONCAT .)
    reserved_word   reduce using rule 30 (string_op -> CONCAT .)
    DOT             reduce using rule 30 (string_op -> CONCAT .)
    STDOUT          reduce using rule 30 (string_op -> CONCAT .)
    COMMENT         reduce using rule 30 (string_op -> CONCAT .)
    EXCLAMATION     reduce using rule 30 (string_op -> CONCAT .)
    AT              reduce using rule 30 (string_op -> CONCAT .)
    COLON           reduce using rule 30 (string_op -> CONCAT .)
    SEMICOLON       reduce using rule 30 (string_op -> CONCAT .)
    LEFT_PAREN      reduce using rule 30 (string_op -> CONCAT .)
    RIGHT_PAREN     reduce using rule 30 (string_op -> CONCAT .)
    IF              reduce using rule 30 (string_op -> CONCAT .)
    ELSE            reduce using rule 30 (string_op -> CONCAT .)
    WHILE           reduce using rule 30 (string_op -> CONCAT .)
    BEGIN           reduce using rule 30 (string_op -> CONCAT .)
    EXIT            reduce using rule 30 (string_op -> CONCAT .)
    DROP            reduce using rule 30 (string_op -> CONCAT .)
    $end            reduce using rule 30 (string_op -> CONCAT .)
    PLUS            reduce using rule 30 (string_op -> CONCAT .)
    MINUS           reduce using rule 30 (string_op -> CONCAT .)
    TIMES           reduce using rule 30 (string_op -> CONCAT .)
    DIVIDE          reduce using rule 30 (string_op -> CONCAT .)
    MOD             reduce using rule 30 (string_op -> CONCAT .)
    NOT             reduce using rule 30 (string_op -> CONCAT .)
    INF             reduce using rule 30 (string_op -> CONCAT .)
    SUP             reduce using rule 30 (string_op -> CONCAT .)
    INFEQ           reduce using rule 30 (string_op -> CONCAT .)
    SUPEQ           reduce using rule 30 (string_op -> CONCAT .)
    CONCAT          reduce using rule 30 (string_op -> CONCAT .)
    THEN            reduce using rule 30 (string_op -> CONCAT .)
    DO              reduce using rule 30 (string_op -> CONCAT .)
    LOOP            reduce using rule 30 (string_op -> CONCAT .)
    REPEAT          reduce using rule 30 (string_op -> CONCAT .)


state 53

    (43) if_statement -> IF expression THEN . statements
    (2) statements -> . statement
    (3) statements -> . statements statement
    (4) statement -> . expression
    (5) statement -> . flow_control
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (8) expression -> . VARIABLE
    (9) expression -> . CHAR
    (10) expression -> . EMIT
    (11) expression -> . special_expression
    (12) expression -> . reserved_word
    (13) expression -> . DOT
    (14) expression -> . STDOUT
    (16) expression -> . COMMENT
    (17) expression -> . expression expression arithmetic_op
    (23) expression -> . expression expression relational_op
    (29) expression -> . expression expression string_op
    (37) flow_control -> . if_statement
    (38) flow_control -> . else_statement
    (39) flow_control -> . while_loop
    (40) flow_control -> . repeat_loop
    (41) flow_control -> . exit_statement
    (42) flow_control -> . drop_statement
    (31) special_expression -> . EXCLAMATION
    (32) special_expression -> . AT
    (33) special_expression -> . COLON
    (34) special_expression -> . SEMICOLON
    (35) special_expression -> . LEFT_PAREN
    (36) special_expression -> . RIGHT_PAREN
    (43) if_statement -> . IF expression THEN statements
    (44) else_statement -> . ELSE
    (45) while_loop -> . WHILE expression DO statements LOOP
    (46) repeat_loop -> . BEGIN statements WHILE expression REPEAT
    (47) exit_statement -> . EXIT
    (48) drop_statement -> . DROP

    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    VARIABLE        shift and go to state 8
    CHAR            shift and go to state 9
    EMIT            shift and go to state 10
    reserved_word   shift and go to state 12
    DOT             shift and go to state 13
    STDOUT          shift and go to state 14
    COMMENT         shift and go to state 15
    EXCLAMATION     shift and go to state 22
    AT              shift and go to state 23
    COLON           shift and go to state 24
    SEMICOLON       shift and go to state 25
    LEFT_PAREN      shift and go to state 26
    RIGHT_PAREN     shift and go to state 27
    IF              shift and go to state 28
    ELSE            shift and go to state 29
    WHILE           shift and go to state 30
    BEGIN           shift and go to state 31
    EXIT            shift and go to state 32
    DROP            shift and go to state 33

    expression                     shift and go to state 4
    statements                     shift and go to state 56
    statement                      shift and go to state 3
    flow_control                   shift and go to state 5
    special_expression             shift and go to state 11
    if_statement                   shift and go to state 16
    else_statement                 shift and go to state 17
    while_loop                     shift and go to state 18
    repeat_loop                    shift and go to state 19
    exit_statement                 shift and go to state 20
    drop_statement                 shift and go to state 21

state 54

    (45) while_loop -> WHILE expression DO . statements LOOP
    (2) statements -> . statement
    (3) statements -> . statements statement
    (4) statement -> . expression
    (5) statement -> . flow_control
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (8) expression -> . VARIABLE
    (9) expression -> . CHAR
    (10) expression -> . EMIT
    (11) expression -> . special_expression
    (12) expression -> . reserved_word
    (13) expression -> . DOT
    (14) expression -> . STDOUT
    (16) expression -> . COMMENT
    (17) expression -> . expression expression arithmetic_op
    (23) expression -> . expression expression relational_op
    (29) expression -> . expression expression string_op
    (37) flow_control -> . if_statement
    (38) flow_control -> . else_statement
    (39) flow_control -> . while_loop
    (40) flow_control -> . repeat_loop
    (41) flow_control -> . exit_statement
    (42) flow_control -> . drop_statement
    (31) special_expression -> . EXCLAMATION
    (32) special_expression -> . AT
    (33) special_expression -> . COLON
    (34) special_expression -> . SEMICOLON
    (35) special_expression -> . LEFT_PAREN
    (36) special_expression -> . RIGHT_PAREN
    (43) if_statement -> . IF expression THEN statements
    (44) else_statement -> . ELSE
    (45) while_loop -> . WHILE expression DO statements LOOP
    (46) repeat_loop -> . BEGIN statements WHILE expression REPEAT
    (47) exit_statement -> . EXIT
    (48) drop_statement -> . DROP

    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    VARIABLE        shift and go to state 8
    CHAR            shift and go to state 9
    EMIT            shift and go to state 10
    reserved_word   shift and go to state 12
    DOT             shift and go to state 13
    STDOUT          shift and go to state 14
    COMMENT         shift and go to state 15
    EXCLAMATION     shift and go to state 22
    AT              shift and go to state 23
    COLON           shift and go to state 24
    SEMICOLON       shift and go to state 25
    LEFT_PAREN      shift and go to state 26
    RIGHT_PAREN     shift and go to state 27
    IF              shift and go to state 28
    ELSE            shift and go to state 29
    WHILE           shift and go to state 30
    BEGIN           shift and go to state 31
    EXIT            shift and go to state 32
    DROP            shift and go to state 33

    expression                     shift and go to state 4
    statements                     shift and go to state 57
    statement                      shift and go to state 3
    flow_control                   shift and go to state 5
    special_expression             shift and go to state 11
    if_statement                   shift and go to state 16
    else_statement                 shift and go to state 17
    while_loop                     shift and go to state 18
    repeat_loop                    shift and go to state 19
    exit_statement                 shift and go to state 20
    drop_statement                 shift and go to state 21

state 55

    (46) repeat_loop -> BEGIN statements WHILE . expression REPEAT
    (45) while_loop -> WHILE . expression DO statements LOOP
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (8) expression -> . VARIABLE
    (9) expression -> . CHAR
    (10) expression -> . EMIT
    (11) expression -> . special_expression
    (12) expression -> . reserved_word
    (13) expression -> . DOT
    (14) expression -> . STDOUT
    (16) expression -> . COMMENT
    (17) expression -> . expression expression arithmetic_op
    (23) expression -> . expression expression relational_op
    (29) expression -> . expression expression string_op
    (31) special_expression -> . EXCLAMATION
    (32) special_expression -> . AT
    (33) special_expression -> . COLON
    (34) special_expression -> . SEMICOLON
    (35) special_expression -> . LEFT_PAREN
    (36) special_expression -> . RIGHT_PAREN

    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    VARIABLE        shift and go to state 8
    CHAR            shift and go to state 9
    EMIT            shift and go to state 10
    reserved_word   shift and go to state 12
    DOT             shift and go to state 13
    STDOUT          shift and go to state 14
    COMMENT         shift and go to state 15
    EXCLAMATION     shift and go to state 22
    AT              shift and go to state 23
    COLON           shift and go to state 24
    SEMICOLON       shift and go to state 25
    LEFT_PAREN      shift and go to state 26
    RIGHT_PAREN     shift and go to state 27

    expression                     shift and go to state 58
    special_expression             shift and go to state 11

state 56

    (43) if_statement -> IF expression THEN statements .
    (3) statements -> statements . statement
    (4) statement -> . expression
    (5) statement -> . flow_control
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (8) expression -> . VARIABLE
    (9) expression -> . CHAR
    (10) expression -> . EMIT
    (11) expression -> . special_expression
    (12) expression -> . reserved_word
    (13) expression -> . DOT
    (14) expression -> . STDOUT
    (16) expression -> . COMMENT
    (17) expression -> . expression expression arithmetic_op
    (23) expression -> . expression expression relational_op
    (29) expression -> . expression expression string_op
    (37) flow_control -> . if_statement
    (38) flow_control -> . else_statement
    (39) flow_control -> . while_loop
    (40) flow_control -> . repeat_loop
    (41) flow_control -> . exit_statement
    (42) flow_control -> . drop_statement
    (31) special_expression -> . EXCLAMATION
    (32) special_expression -> . AT
    (33) special_expression -> . COLON
    (34) special_expression -> . SEMICOLON
    (35) special_expression -> . LEFT_PAREN
    (36) special_expression -> . RIGHT_PAREN
    (43) if_statement -> . IF expression THEN statements
    (44) else_statement -> . ELSE
    (45) while_loop -> . WHILE expression DO statements LOOP
    (46) repeat_loop -> . BEGIN statements WHILE expression REPEAT
    (47) exit_statement -> . EXIT
    (48) drop_statement -> . DROP

  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for EMIT resolved as shift
  ! shift/reduce conflict for reserved_word resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for STDOUT resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for EXCLAMATION resolved as shift
  ! shift/reduce conflict for AT resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for RIGHT_PAREN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for EXIT resolved as shift
  ! shift/reduce conflict for DROP resolved as shift
    $end            reduce using rule 43 (if_statement -> IF expression THEN statements .)
    LOOP            reduce using rule 43 (if_statement -> IF expression THEN statements .)
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    VARIABLE        shift and go to state 8
    CHAR            shift and go to state 9
    EMIT            shift and go to state 10
    reserved_word   shift and go to state 12
    DOT             shift and go to state 13
    STDOUT          shift and go to state 14
    COMMENT         shift and go to state 15
    EXCLAMATION     shift and go to state 22
    AT              shift and go to state 23
    COLON           shift and go to state 24
    SEMICOLON       shift and go to state 25
    LEFT_PAREN      shift and go to state 26
    RIGHT_PAREN     shift and go to state 27
    IF              shift and go to state 28
    ELSE            shift and go to state 29
    WHILE           shift and go to state 30
    BEGIN           shift and go to state 31
    EXIT            shift and go to state 32
    DROP            shift and go to state 33

  ! NUMBER          [ reduce using rule 43 (if_statement -> IF expression THEN statements .) ]
  ! STRING          [ reduce using rule 43 (if_statement -> IF expression THEN statements .) ]
  ! VARIABLE        [ reduce using rule 43 (if_statement -> IF expression THEN statements .) ]
  ! CHAR            [ reduce using rule 43 (if_statement -> IF expression THEN statements .) ]
  ! EMIT            [ reduce using rule 43 (if_statement -> IF expression THEN statements .) ]
  ! reserved_word   [ reduce using rule 43 (if_statement -> IF expression THEN statements .) ]
  ! DOT             [ reduce using rule 43 (if_statement -> IF expression THEN statements .) ]
  ! STDOUT          [ reduce using rule 43 (if_statement -> IF expression THEN statements .) ]
  ! COMMENT         [ reduce using rule 43 (if_statement -> IF expression THEN statements .) ]
  ! EXCLAMATION     [ reduce using rule 43 (if_statement -> IF expression THEN statements .) ]
  ! AT              [ reduce using rule 43 (if_statement -> IF expression THEN statements .) ]
  ! COLON           [ reduce using rule 43 (if_statement -> IF expression THEN statements .) ]
  ! SEMICOLON       [ reduce using rule 43 (if_statement -> IF expression THEN statements .) ]
  ! LEFT_PAREN      [ reduce using rule 43 (if_statement -> IF expression THEN statements .) ]
  ! RIGHT_PAREN     [ reduce using rule 43 (if_statement -> IF expression THEN statements .) ]
  ! IF              [ reduce using rule 43 (if_statement -> IF expression THEN statements .) ]
  ! ELSE            [ reduce using rule 43 (if_statement -> IF expression THEN statements .) ]
  ! WHILE           [ reduce using rule 43 (if_statement -> IF expression THEN statements .) ]
  ! BEGIN           [ reduce using rule 43 (if_statement -> IF expression THEN statements .) ]
  ! EXIT            [ reduce using rule 43 (if_statement -> IF expression THEN statements .) ]
  ! DROP            [ reduce using rule 43 (if_statement -> IF expression THEN statements .) ]

    expression                     shift and go to state 4
    statement                      shift and go to state 34
    flow_control                   shift and go to state 5
    special_expression             shift and go to state 11
    if_statement                   shift and go to state 16
    else_statement                 shift and go to state 17
    while_loop                     shift and go to state 18
    repeat_loop                    shift and go to state 19
    exit_statement                 shift and go to state 20
    drop_statement                 shift and go to state 21

state 57

    (45) while_loop -> WHILE expression DO statements . LOOP
    (3) statements -> statements . statement
    (4) statement -> . expression
    (5) statement -> . flow_control
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (8) expression -> . VARIABLE
    (9) expression -> . CHAR
    (10) expression -> . EMIT
    (11) expression -> . special_expression
    (12) expression -> . reserved_word
    (13) expression -> . DOT
    (14) expression -> . STDOUT
    (16) expression -> . COMMENT
    (17) expression -> . expression expression arithmetic_op
    (23) expression -> . expression expression relational_op
    (29) expression -> . expression expression string_op
    (37) flow_control -> . if_statement
    (38) flow_control -> . else_statement
    (39) flow_control -> . while_loop
    (40) flow_control -> . repeat_loop
    (41) flow_control -> . exit_statement
    (42) flow_control -> . drop_statement
    (31) special_expression -> . EXCLAMATION
    (32) special_expression -> . AT
    (33) special_expression -> . COLON
    (34) special_expression -> . SEMICOLON
    (35) special_expression -> . LEFT_PAREN
    (36) special_expression -> . RIGHT_PAREN
    (43) if_statement -> . IF expression THEN statements
    (44) else_statement -> . ELSE
    (45) while_loop -> . WHILE expression DO statements LOOP
    (46) repeat_loop -> . BEGIN statements WHILE expression REPEAT
    (47) exit_statement -> . EXIT
    (48) drop_statement -> . DROP

    LOOP            shift and go to state 59
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    VARIABLE        shift and go to state 8
    CHAR            shift and go to state 9
    EMIT            shift and go to state 10
    reserved_word   shift and go to state 12
    DOT             shift and go to state 13
    STDOUT          shift and go to state 14
    COMMENT         shift and go to state 15
    EXCLAMATION     shift and go to state 22
    AT              shift and go to state 23
    COLON           shift and go to state 24
    SEMICOLON       shift and go to state 25
    LEFT_PAREN      shift and go to state 26
    RIGHT_PAREN     shift and go to state 27
    IF              shift and go to state 28
    ELSE            shift and go to state 29
    WHILE           shift and go to state 30
    BEGIN           shift and go to state 31
    EXIT            shift and go to state 32
    DROP            shift and go to state 33

    expression                     shift and go to state 4
    statement                      shift and go to state 34
    flow_control                   shift and go to state 5
    special_expression             shift and go to state 11
    if_statement                   shift and go to state 16
    else_statement                 shift and go to state 17
    while_loop                     shift and go to state 18
    repeat_loop                    shift and go to state 19
    exit_statement                 shift and go to state 20
    drop_statement                 shift and go to state 21

state 58

    (46) repeat_loop -> BEGIN statements WHILE expression . REPEAT
    (45) while_loop -> WHILE expression . DO statements LOOP
    (17) expression -> expression . expression arithmetic_op
    (23) expression -> expression . expression relational_op
    (29) expression -> expression . expression string_op
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (8) expression -> . VARIABLE
    (9) expression -> . CHAR
    (10) expression -> . EMIT
    (11) expression -> . special_expression
    (12) expression -> . reserved_word
    (13) expression -> . DOT
    (14) expression -> . STDOUT
    (16) expression -> . COMMENT
    (17) expression -> . expression expression arithmetic_op
    (23) expression -> . expression expression relational_op
    (29) expression -> . expression expression string_op
    (31) special_expression -> . EXCLAMATION
    (32) special_expression -> . AT
    (33) special_expression -> . COLON
    (34) special_expression -> . SEMICOLON
    (35) special_expression -> . LEFT_PAREN
    (36) special_expression -> . RIGHT_PAREN

    REPEAT          shift and go to state 60
    DO              shift and go to state 54
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    VARIABLE        shift and go to state 8
    CHAR            shift and go to state 9
    EMIT            shift and go to state 10
    reserved_word   shift and go to state 12
    DOT             shift and go to state 13
    STDOUT          shift and go to state 14
    COMMENT         shift and go to state 15
    EXCLAMATION     shift and go to state 22
    AT              shift and go to state 23
    COLON           shift and go to state 24
    SEMICOLON       shift and go to state 25
    LEFT_PAREN      shift and go to state 26
    RIGHT_PAREN     shift and go to state 27

    expression                     shift and go to state 35
    special_expression             shift and go to state 11

state 59

    (45) while_loop -> WHILE expression DO statements LOOP .

    NUMBER          reduce using rule 45 (while_loop -> WHILE expression DO statements LOOP .)
    STRING          reduce using rule 45 (while_loop -> WHILE expression DO statements LOOP .)
    VARIABLE        reduce using rule 45 (while_loop -> WHILE expression DO statements LOOP .)
    CHAR            reduce using rule 45 (while_loop -> WHILE expression DO statements LOOP .)
    EMIT            reduce using rule 45 (while_loop -> WHILE expression DO statements LOOP .)
    reserved_word   reduce using rule 45 (while_loop -> WHILE expression DO statements LOOP .)
    DOT             reduce using rule 45 (while_loop -> WHILE expression DO statements LOOP .)
    STDOUT          reduce using rule 45 (while_loop -> WHILE expression DO statements LOOP .)
    COMMENT         reduce using rule 45 (while_loop -> WHILE expression DO statements LOOP .)
    EXCLAMATION     reduce using rule 45 (while_loop -> WHILE expression DO statements LOOP .)
    AT              reduce using rule 45 (while_loop -> WHILE expression DO statements LOOP .)
    COLON           reduce using rule 45 (while_loop -> WHILE expression DO statements LOOP .)
    SEMICOLON       reduce using rule 45 (while_loop -> WHILE expression DO statements LOOP .)
    LEFT_PAREN      reduce using rule 45 (while_loop -> WHILE expression DO statements LOOP .)
    RIGHT_PAREN     reduce using rule 45 (while_loop -> WHILE expression DO statements LOOP .)
    IF              reduce using rule 45 (while_loop -> WHILE expression DO statements LOOP .)
    ELSE            reduce using rule 45 (while_loop -> WHILE expression DO statements LOOP .)
    WHILE           reduce using rule 45 (while_loop -> WHILE expression DO statements LOOP .)
    BEGIN           reduce using rule 45 (while_loop -> WHILE expression DO statements LOOP .)
    EXIT            reduce using rule 45 (while_loop -> WHILE expression DO statements LOOP .)
    DROP            reduce using rule 45 (while_loop -> WHILE expression DO statements LOOP .)
    $end            reduce using rule 45 (while_loop -> WHILE expression DO statements LOOP .)
    LOOP            reduce using rule 45 (while_loop -> WHILE expression DO statements LOOP .)


state 60

    (46) repeat_loop -> BEGIN statements WHILE expression REPEAT .

    NUMBER          reduce using rule 46 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    STRING          reduce using rule 46 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    VARIABLE        reduce using rule 46 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    CHAR            reduce using rule 46 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    EMIT            reduce using rule 46 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    reserved_word   reduce using rule 46 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    DOT             reduce using rule 46 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    STDOUT          reduce using rule 46 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    COMMENT         reduce using rule 46 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    EXCLAMATION     reduce using rule 46 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    AT              reduce using rule 46 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    COLON           reduce using rule 46 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    SEMICOLON       reduce using rule 46 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    LEFT_PAREN      reduce using rule 46 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    RIGHT_PAREN     reduce using rule 46 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    IF              reduce using rule 46 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    ELSE            reduce using rule 46 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    WHILE           reduce using rule 46 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    BEGIN           reduce using rule 46 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    EXIT            reduce using rule 46 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    DROP            reduce using rule 46 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    $end            reduce using rule 46 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    LOOP            reduce using rule 46 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NUMBER in state 4 resolved as shift
WARNING: shift/reduce conflict for STRING in state 4 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 4 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 4 resolved as shift
WARNING: shift/reduce conflict for EMIT in state 4 resolved as shift
WARNING: shift/reduce conflict for reserved_word in state 4 resolved as shift
WARNING: shift/reduce conflict for DOT in state 4 resolved as shift
WARNING: shift/reduce conflict for STDOUT in state 4 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 4 resolved as shift
WARNING: shift/reduce conflict for EXCLAMATION in state 4 resolved as shift
WARNING: shift/reduce conflict for AT in state 4 resolved as shift
WARNING: shift/reduce conflict for COLON in state 4 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 4 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 4 resolved as shift
WARNING: shift/reduce conflict for RIGHT_PAREN in state 4 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 56 resolved as shift
WARNING: shift/reduce conflict for STRING in state 56 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 56 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 56 resolved as shift
WARNING: shift/reduce conflict for EMIT in state 56 resolved as shift
WARNING: shift/reduce conflict for reserved_word in state 56 resolved as shift
WARNING: shift/reduce conflict for DOT in state 56 resolved as shift
WARNING: shift/reduce conflict for STDOUT in state 56 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 56 resolved as shift
WARNING: shift/reduce conflict for EXCLAMATION in state 56 resolved as shift
WARNING: shift/reduce conflict for AT in state 56 resolved as shift
WARNING: shift/reduce conflict for COLON in state 56 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 56 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 56 resolved as shift
WARNING: shift/reduce conflict for RIGHT_PAREN in state 56 resolved as shift
WARNING: shift/reduce conflict for IF in state 56 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 56 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 56 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 56 resolved as shift
WARNING: shift/reduce conflict for EXIT in state 56 resolved as shift
WARNING: shift/reduce conflict for DROP in state 56 resolved as shift
