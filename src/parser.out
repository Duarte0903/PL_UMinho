Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statement
Rule 3     statements -> statements statement
Rule 4     statement -> expression
Rule 5     statement -> flow_control
Rule 6     expression -> NUMBER
Rule 7     expression -> STRING
Rule 8     expression -> VARIABLE
Rule 9     expression -> special_expression
Rule 10    expression -> reserved_word
Rule 11    expression -> DOT
Rule 12    expression -> expression expression arithmetic_op
Rule 13    arithmetic_op -> PLUS
Rule 14    arithmetic_op -> MINUS
Rule 15    arithmetic_op -> TIMES
Rule 16    arithmetic_op -> DIVIDE
Rule 17    arithmetic_op -> MOD
Rule 18    expression -> expression expression relational_op
Rule 19    relational_op -> NOT
Rule 20    relational_op -> INF
Rule 21    relational_op -> SUP
Rule 22    relational_op -> INFEQ
Rule 23    relational_op -> SUPEQ
Rule 24    expression -> expression expression string_op
Rule 25    string_op -> CONCAT
Rule 26    special_expression -> EXCLAMATION
Rule 27    special_expression -> AT
Rule 28    special_expression -> COLON
Rule 29    special_expression -> SEMICOLON
Rule 30    special_expression -> LEFT_PAREN
Rule 31    special_expression -> RIGHT_PAREN
Rule 32    flow_control -> if_statement
Rule 33    flow_control -> else_statement
Rule 34    flow_control -> while_loop
Rule 35    flow_control -> repeat_loop
Rule 36    flow_control -> exit_statement
Rule 37    flow_control -> drop_statement
Rule 38    flow_control -> dup_statement
Rule 39    flow_control -> swap_statement
Rule 40    flow_control -> rot_statement
Rule 41    flow_control -> over_statement
Rule 42    if_statement -> expression IF statements THEN
Rule 43    else_statement -> ELSE
Rule 44    while_loop -> WHILE expression DO statements LOOP
Rule 45    repeat_loop -> BEGIN statements WHILE expression REPEAT
Rule 46    exit_statement -> EXIT
Rule 47    drop_statement -> DROP
Rule 48    dup_statement -> DUP
Rule 49    swap_statement -> SWAP
Rule 50    rot_statement -> ROT
Rule 51    over_statement -> OVER

Terminals, with rules where they appear

AT                   : 27
BEGIN                : 45
COLON                : 28
CONCAT               : 25
DIVIDE               : 16
DO                   : 44
DOT                  : 11
DROP                 : 47
DUP                  : 48
ELSE                 : 43
EXCLAMATION          : 26
EXIT                 : 46
IF                   : 42
INF                  : 20
INFEQ                : 22
LEFT_PAREN           : 30
LOOP                 : 44
MINUS                : 14
MOD                  : 17
NOT                  : 19
NUMBER               : 6
OVER                 : 51
PLUS                 : 13
REPEAT               : 45
RIGHT_PAREN          : 31
ROT                  : 50
SEMICOLON            : 29
STRING               : 7
SUP                  : 21
SUPEQ                : 23
SWAP                 : 49
THEN                 : 42
TIMES                : 15
VARIABLE             : 8
WHILE                : 44 45
error                : 
reserved_word        : 10

Nonterminals, with rules where they appear

arithmetic_op        : 12
drop_statement       : 37
dup_statement        : 38
else_statement       : 33
exit_statement       : 36
expression           : 4 12 12 18 18 24 24 42 44 45
flow_control         : 5
if_statement         : 32
over_statement       : 41
program              : 0
relational_op        : 18
repeat_loop          : 35
rot_statement        : 40
special_expression   : 9
statement            : 2 3
statements           : 1 3 42 44 45
string_op            : 24
swap_statement       : 39
while_loop           : 34

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statement
    (3) statements -> . statements statement
    (4) statement -> . expression
    (5) statement -> . flow_control
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (8) expression -> . VARIABLE
    (9) expression -> . special_expression
    (10) expression -> . reserved_word
    (11) expression -> . DOT
    (12) expression -> . expression expression arithmetic_op
    (18) expression -> . expression expression relational_op
    (24) expression -> . expression expression string_op
    (32) flow_control -> . if_statement
    (33) flow_control -> . else_statement
    (34) flow_control -> . while_loop
    (35) flow_control -> . repeat_loop
    (36) flow_control -> . exit_statement
    (37) flow_control -> . drop_statement
    (38) flow_control -> . dup_statement
    (39) flow_control -> . swap_statement
    (40) flow_control -> . rot_statement
    (41) flow_control -> . over_statement
    (26) special_expression -> . EXCLAMATION
    (27) special_expression -> . AT
    (28) special_expression -> . COLON
    (29) special_expression -> . SEMICOLON
    (30) special_expression -> . LEFT_PAREN
    (31) special_expression -> . RIGHT_PAREN
    (42) if_statement -> . expression IF statements THEN
    (43) else_statement -> . ELSE
    (44) while_loop -> . WHILE expression DO statements LOOP
    (45) repeat_loop -> . BEGIN statements WHILE expression REPEAT
    (46) exit_statement -> . EXIT
    (47) drop_statement -> . DROP
    (48) dup_statement -> . DUP
    (49) swap_statement -> . SWAP
    (50) rot_statement -> . ROT
    (51) over_statement -> . OVER

    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    VARIABLE        shift and go to state 8
    reserved_word   shift and go to state 10
    DOT             shift and go to state 11
    EXCLAMATION     shift and go to state 22
    AT              shift and go to state 23
    COLON           shift and go to state 24
    SEMICOLON       shift and go to state 25
    LEFT_PAREN      shift and go to state 26
    RIGHT_PAREN     shift and go to state 27
    ELSE            shift and go to state 28
    WHILE           shift and go to state 29
    BEGIN           shift and go to state 30
    EXIT            shift and go to state 31
    DROP            shift and go to state 32
    DUP             shift and go to state 33
    SWAP            shift and go to state 34
    ROT             shift and go to state 35
    OVER            shift and go to state 36

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    expression                     shift and go to state 4
    flow_control                   shift and go to state 5
    special_expression             shift and go to state 9
    if_statement                   shift and go to state 12
    else_statement                 shift and go to state 13
    while_loop                     shift and go to state 14
    repeat_loop                    shift and go to state 15
    exit_statement                 shift and go to state 16
    drop_statement                 shift and go to state 17
    dup_statement                  shift and go to state 18
    swap_statement                 shift and go to state 19
    rot_statement                  shift and go to state 20
    over_statement                 shift and go to state 21

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .
    (3) statements -> statements . statement
    (4) statement -> . expression
    (5) statement -> . flow_control
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (8) expression -> . VARIABLE
    (9) expression -> . special_expression
    (10) expression -> . reserved_word
    (11) expression -> . DOT
    (12) expression -> . expression expression arithmetic_op
    (18) expression -> . expression expression relational_op
    (24) expression -> . expression expression string_op
    (32) flow_control -> . if_statement
    (33) flow_control -> . else_statement
    (34) flow_control -> . while_loop
    (35) flow_control -> . repeat_loop
    (36) flow_control -> . exit_statement
    (37) flow_control -> . drop_statement
    (38) flow_control -> . dup_statement
    (39) flow_control -> . swap_statement
    (40) flow_control -> . rot_statement
    (41) flow_control -> . over_statement
    (26) special_expression -> . EXCLAMATION
    (27) special_expression -> . AT
    (28) special_expression -> . COLON
    (29) special_expression -> . SEMICOLON
    (30) special_expression -> . LEFT_PAREN
    (31) special_expression -> . RIGHT_PAREN
    (42) if_statement -> . expression IF statements THEN
    (43) else_statement -> . ELSE
    (44) while_loop -> . WHILE expression DO statements LOOP
    (45) repeat_loop -> . BEGIN statements WHILE expression REPEAT
    (46) exit_statement -> . EXIT
    (47) drop_statement -> . DROP
    (48) dup_statement -> . DUP
    (49) swap_statement -> . SWAP
    (50) rot_statement -> . ROT
    (51) over_statement -> . OVER

    $end            reduce using rule 1 (program -> statements .)
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    VARIABLE        shift and go to state 8
    reserved_word   shift and go to state 10
    DOT             shift and go to state 11
    EXCLAMATION     shift and go to state 22
    AT              shift and go to state 23
    COLON           shift and go to state 24
    SEMICOLON       shift and go to state 25
    LEFT_PAREN      shift and go to state 26
    RIGHT_PAREN     shift and go to state 27
    ELSE            shift and go to state 28
    WHILE           shift and go to state 29
    BEGIN           shift and go to state 30
    EXIT            shift and go to state 31
    DROP            shift and go to state 32
    DUP             shift and go to state 33
    SWAP            shift and go to state 34
    ROT             shift and go to state 35
    OVER            shift and go to state 36

    statement                      shift and go to state 37
    expression                     shift and go to state 4
    flow_control                   shift and go to state 5
    special_expression             shift and go to state 9
    if_statement                   shift and go to state 12
    else_statement                 shift and go to state 13
    while_loop                     shift and go to state 14
    repeat_loop                    shift and go to state 15
    exit_statement                 shift and go to state 16
    drop_statement                 shift and go to state 17
    dup_statement                  shift and go to state 18
    swap_statement                 shift and go to state 19
    rot_statement                  shift and go to state 20
    over_statement                 shift and go to state 21

state 3

    (2) statements -> statement .

    NUMBER          reduce using rule 2 (statements -> statement .)
    STRING          reduce using rule 2 (statements -> statement .)
    VARIABLE        reduce using rule 2 (statements -> statement .)
    reserved_word   reduce using rule 2 (statements -> statement .)
    DOT             reduce using rule 2 (statements -> statement .)
    EXCLAMATION     reduce using rule 2 (statements -> statement .)
    AT              reduce using rule 2 (statements -> statement .)
    COLON           reduce using rule 2 (statements -> statement .)
    SEMICOLON       reduce using rule 2 (statements -> statement .)
    LEFT_PAREN      reduce using rule 2 (statements -> statement .)
    RIGHT_PAREN     reduce using rule 2 (statements -> statement .)
    ELSE            reduce using rule 2 (statements -> statement .)
    WHILE           reduce using rule 2 (statements -> statement .)
    BEGIN           reduce using rule 2 (statements -> statement .)
    EXIT            reduce using rule 2 (statements -> statement .)
    DROP            reduce using rule 2 (statements -> statement .)
    DUP             reduce using rule 2 (statements -> statement .)
    SWAP            reduce using rule 2 (statements -> statement .)
    ROT             reduce using rule 2 (statements -> statement .)
    OVER            reduce using rule 2 (statements -> statement .)
    $end            reduce using rule 2 (statements -> statement .)
    THEN            reduce using rule 2 (statements -> statement .)
    LOOP            reduce using rule 2 (statements -> statement .)


state 4

    (4) statement -> expression .
    (12) expression -> expression . expression arithmetic_op
    (18) expression -> expression . expression relational_op
    (24) expression -> expression . expression string_op
    (42) if_statement -> expression . IF statements THEN
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (8) expression -> . VARIABLE
    (9) expression -> . special_expression
    (10) expression -> . reserved_word
    (11) expression -> . DOT
    (12) expression -> . expression expression arithmetic_op
    (18) expression -> . expression expression relational_op
    (24) expression -> . expression expression string_op
    (26) special_expression -> . EXCLAMATION
    (27) special_expression -> . AT
    (28) special_expression -> . COLON
    (29) special_expression -> . SEMICOLON
    (30) special_expression -> . LEFT_PAREN
    (31) special_expression -> . RIGHT_PAREN

  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for reserved_word resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for EXCLAMATION resolved as shift
  ! shift/reduce conflict for AT resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for RIGHT_PAREN resolved as shift
    ELSE            reduce using rule 4 (statement -> expression .)
    WHILE           reduce using rule 4 (statement -> expression .)
    BEGIN           reduce using rule 4 (statement -> expression .)
    EXIT            reduce using rule 4 (statement -> expression .)
    DROP            reduce using rule 4 (statement -> expression .)
    DUP             reduce using rule 4 (statement -> expression .)
    SWAP            reduce using rule 4 (statement -> expression .)
    ROT             reduce using rule 4 (statement -> expression .)
    OVER            reduce using rule 4 (statement -> expression .)
    $end            reduce using rule 4 (statement -> expression .)
    THEN            reduce using rule 4 (statement -> expression .)
    LOOP            reduce using rule 4 (statement -> expression .)
    IF              shift and go to state 39
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    VARIABLE        shift and go to state 8
    reserved_word   shift and go to state 10
    DOT             shift and go to state 11
    EXCLAMATION     shift and go to state 22
    AT              shift and go to state 23
    COLON           shift and go to state 24
    SEMICOLON       shift and go to state 25
    LEFT_PAREN      shift and go to state 26
    RIGHT_PAREN     shift and go to state 27

  ! NUMBER          [ reduce using rule 4 (statement -> expression .) ]
  ! STRING          [ reduce using rule 4 (statement -> expression .) ]
  ! VARIABLE        [ reduce using rule 4 (statement -> expression .) ]
  ! reserved_word   [ reduce using rule 4 (statement -> expression .) ]
  ! DOT             [ reduce using rule 4 (statement -> expression .) ]
  ! EXCLAMATION     [ reduce using rule 4 (statement -> expression .) ]
  ! AT              [ reduce using rule 4 (statement -> expression .) ]
  ! COLON           [ reduce using rule 4 (statement -> expression .) ]
  ! SEMICOLON       [ reduce using rule 4 (statement -> expression .) ]
  ! LEFT_PAREN      [ reduce using rule 4 (statement -> expression .) ]
  ! RIGHT_PAREN     [ reduce using rule 4 (statement -> expression .) ]

    expression                     shift and go to state 38
    special_expression             shift and go to state 9

state 5

    (5) statement -> flow_control .

    NUMBER          reduce using rule 5 (statement -> flow_control .)
    STRING          reduce using rule 5 (statement -> flow_control .)
    VARIABLE        reduce using rule 5 (statement -> flow_control .)
    reserved_word   reduce using rule 5 (statement -> flow_control .)
    DOT             reduce using rule 5 (statement -> flow_control .)
    EXCLAMATION     reduce using rule 5 (statement -> flow_control .)
    AT              reduce using rule 5 (statement -> flow_control .)
    COLON           reduce using rule 5 (statement -> flow_control .)
    SEMICOLON       reduce using rule 5 (statement -> flow_control .)
    LEFT_PAREN      reduce using rule 5 (statement -> flow_control .)
    RIGHT_PAREN     reduce using rule 5 (statement -> flow_control .)
    ELSE            reduce using rule 5 (statement -> flow_control .)
    WHILE           reduce using rule 5 (statement -> flow_control .)
    BEGIN           reduce using rule 5 (statement -> flow_control .)
    EXIT            reduce using rule 5 (statement -> flow_control .)
    DROP            reduce using rule 5 (statement -> flow_control .)
    DUP             reduce using rule 5 (statement -> flow_control .)
    SWAP            reduce using rule 5 (statement -> flow_control .)
    ROT             reduce using rule 5 (statement -> flow_control .)
    OVER            reduce using rule 5 (statement -> flow_control .)
    $end            reduce using rule 5 (statement -> flow_control .)
    THEN            reduce using rule 5 (statement -> flow_control .)
    LOOP            reduce using rule 5 (statement -> flow_control .)


state 6

    (6) expression -> NUMBER .

    IF              reduce using rule 6 (expression -> NUMBER .)
    NUMBER          reduce using rule 6 (expression -> NUMBER .)
    STRING          reduce using rule 6 (expression -> NUMBER .)
    VARIABLE        reduce using rule 6 (expression -> NUMBER .)
    reserved_word   reduce using rule 6 (expression -> NUMBER .)
    DOT             reduce using rule 6 (expression -> NUMBER .)
    EXCLAMATION     reduce using rule 6 (expression -> NUMBER .)
    AT              reduce using rule 6 (expression -> NUMBER .)
    COLON           reduce using rule 6 (expression -> NUMBER .)
    SEMICOLON       reduce using rule 6 (expression -> NUMBER .)
    LEFT_PAREN      reduce using rule 6 (expression -> NUMBER .)
    RIGHT_PAREN     reduce using rule 6 (expression -> NUMBER .)
    ELSE            reduce using rule 6 (expression -> NUMBER .)
    WHILE           reduce using rule 6 (expression -> NUMBER .)
    BEGIN           reduce using rule 6 (expression -> NUMBER .)
    EXIT            reduce using rule 6 (expression -> NUMBER .)
    DROP            reduce using rule 6 (expression -> NUMBER .)
    DUP             reduce using rule 6 (expression -> NUMBER .)
    SWAP            reduce using rule 6 (expression -> NUMBER .)
    ROT             reduce using rule 6 (expression -> NUMBER .)
    OVER            reduce using rule 6 (expression -> NUMBER .)
    $end            reduce using rule 6 (expression -> NUMBER .)
    PLUS            reduce using rule 6 (expression -> NUMBER .)
    MINUS           reduce using rule 6 (expression -> NUMBER .)
    TIMES           reduce using rule 6 (expression -> NUMBER .)
    DIVIDE          reduce using rule 6 (expression -> NUMBER .)
    MOD             reduce using rule 6 (expression -> NUMBER .)
    NOT             reduce using rule 6 (expression -> NUMBER .)
    INF             reduce using rule 6 (expression -> NUMBER .)
    SUP             reduce using rule 6 (expression -> NUMBER .)
    INFEQ           reduce using rule 6 (expression -> NUMBER .)
    SUPEQ           reduce using rule 6 (expression -> NUMBER .)
    CONCAT          reduce using rule 6 (expression -> NUMBER .)
    DO              reduce using rule 6 (expression -> NUMBER .)
    THEN            reduce using rule 6 (expression -> NUMBER .)
    LOOP            reduce using rule 6 (expression -> NUMBER .)
    REPEAT          reduce using rule 6 (expression -> NUMBER .)


state 7

    (7) expression -> STRING .

    IF              reduce using rule 7 (expression -> STRING .)
    NUMBER          reduce using rule 7 (expression -> STRING .)
    STRING          reduce using rule 7 (expression -> STRING .)
    VARIABLE        reduce using rule 7 (expression -> STRING .)
    reserved_word   reduce using rule 7 (expression -> STRING .)
    DOT             reduce using rule 7 (expression -> STRING .)
    EXCLAMATION     reduce using rule 7 (expression -> STRING .)
    AT              reduce using rule 7 (expression -> STRING .)
    COLON           reduce using rule 7 (expression -> STRING .)
    SEMICOLON       reduce using rule 7 (expression -> STRING .)
    LEFT_PAREN      reduce using rule 7 (expression -> STRING .)
    RIGHT_PAREN     reduce using rule 7 (expression -> STRING .)
    ELSE            reduce using rule 7 (expression -> STRING .)
    WHILE           reduce using rule 7 (expression -> STRING .)
    BEGIN           reduce using rule 7 (expression -> STRING .)
    EXIT            reduce using rule 7 (expression -> STRING .)
    DROP            reduce using rule 7 (expression -> STRING .)
    DUP             reduce using rule 7 (expression -> STRING .)
    SWAP            reduce using rule 7 (expression -> STRING .)
    ROT             reduce using rule 7 (expression -> STRING .)
    OVER            reduce using rule 7 (expression -> STRING .)
    $end            reduce using rule 7 (expression -> STRING .)
    PLUS            reduce using rule 7 (expression -> STRING .)
    MINUS           reduce using rule 7 (expression -> STRING .)
    TIMES           reduce using rule 7 (expression -> STRING .)
    DIVIDE          reduce using rule 7 (expression -> STRING .)
    MOD             reduce using rule 7 (expression -> STRING .)
    NOT             reduce using rule 7 (expression -> STRING .)
    INF             reduce using rule 7 (expression -> STRING .)
    SUP             reduce using rule 7 (expression -> STRING .)
    INFEQ           reduce using rule 7 (expression -> STRING .)
    SUPEQ           reduce using rule 7 (expression -> STRING .)
    CONCAT          reduce using rule 7 (expression -> STRING .)
    DO              reduce using rule 7 (expression -> STRING .)
    THEN            reduce using rule 7 (expression -> STRING .)
    LOOP            reduce using rule 7 (expression -> STRING .)
    REPEAT          reduce using rule 7 (expression -> STRING .)


state 8

    (8) expression -> VARIABLE .

    IF              reduce using rule 8 (expression -> VARIABLE .)
    NUMBER          reduce using rule 8 (expression -> VARIABLE .)
    STRING          reduce using rule 8 (expression -> VARIABLE .)
    VARIABLE        reduce using rule 8 (expression -> VARIABLE .)
    reserved_word   reduce using rule 8 (expression -> VARIABLE .)
    DOT             reduce using rule 8 (expression -> VARIABLE .)
    EXCLAMATION     reduce using rule 8 (expression -> VARIABLE .)
    AT              reduce using rule 8 (expression -> VARIABLE .)
    COLON           reduce using rule 8 (expression -> VARIABLE .)
    SEMICOLON       reduce using rule 8 (expression -> VARIABLE .)
    LEFT_PAREN      reduce using rule 8 (expression -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 8 (expression -> VARIABLE .)
    ELSE            reduce using rule 8 (expression -> VARIABLE .)
    WHILE           reduce using rule 8 (expression -> VARIABLE .)
    BEGIN           reduce using rule 8 (expression -> VARIABLE .)
    EXIT            reduce using rule 8 (expression -> VARIABLE .)
    DROP            reduce using rule 8 (expression -> VARIABLE .)
    DUP             reduce using rule 8 (expression -> VARIABLE .)
    SWAP            reduce using rule 8 (expression -> VARIABLE .)
    ROT             reduce using rule 8 (expression -> VARIABLE .)
    OVER            reduce using rule 8 (expression -> VARIABLE .)
    $end            reduce using rule 8 (expression -> VARIABLE .)
    PLUS            reduce using rule 8 (expression -> VARIABLE .)
    MINUS           reduce using rule 8 (expression -> VARIABLE .)
    TIMES           reduce using rule 8 (expression -> VARIABLE .)
    DIVIDE          reduce using rule 8 (expression -> VARIABLE .)
    MOD             reduce using rule 8 (expression -> VARIABLE .)
    NOT             reduce using rule 8 (expression -> VARIABLE .)
    INF             reduce using rule 8 (expression -> VARIABLE .)
    SUP             reduce using rule 8 (expression -> VARIABLE .)
    INFEQ           reduce using rule 8 (expression -> VARIABLE .)
    SUPEQ           reduce using rule 8 (expression -> VARIABLE .)
    CONCAT          reduce using rule 8 (expression -> VARIABLE .)
    DO              reduce using rule 8 (expression -> VARIABLE .)
    THEN            reduce using rule 8 (expression -> VARIABLE .)
    LOOP            reduce using rule 8 (expression -> VARIABLE .)
    REPEAT          reduce using rule 8 (expression -> VARIABLE .)


state 9

    (9) expression -> special_expression .

    IF              reduce using rule 9 (expression -> special_expression .)
    NUMBER          reduce using rule 9 (expression -> special_expression .)
    STRING          reduce using rule 9 (expression -> special_expression .)
    VARIABLE        reduce using rule 9 (expression -> special_expression .)
    reserved_word   reduce using rule 9 (expression -> special_expression .)
    DOT             reduce using rule 9 (expression -> special_expression .)
    EXCLAMATION     reduce using rule 9 (expression -> special_expression .)
    AT              reduce using rule 9 (expression -> special_expression .)
    COLON           reduce using rule 9 (expression -> special_expression .)
    SEMICOLON       reduce using rule 9 (expression -> special_expression .)
    LEFT_PAREN      reduce using rule 9 (expression -> special_expression .)
    RIGHT_PAREN     reduce using rule 9 (expression -> special_expression .)
    ELSE            reduce using rule 9 (expression -> special_expression .)
    WHILE           reduce using rule 9 (expression -> special_expression .)
    BEGIN           reduce using rule 9 (expression -> special_expression .)
    EXIT            reduce using rule 9 (expression -> special_expression .)
    DROP            reduce using rule 9 (expression -> special_expression .)
    DUP             reduce using rule 9 (expression -> special_expression .)
    SWAP            reduce using rule 9 (expression -> special_expression .)
    ROT             reduce using rule 9 (expression -> special_expression .)
    OVER            reduce using rule 9 (expression -> special_expression .)
    $end            reduce using rule 9 (expression -> special_expression .)
    PLUS            reduce using rule 9 (expression -> special_expression .)
    MINUS           reduce using rule 9 (expression -> special_expression .)
    TIMES           reduce using rule 9 (expression -> special_expression .)
    DIVIDE          reduce using rule 9 (expression -> special_expression .)
    MOD             reduce using rule 9 (expression -> special_expression .)
    NOT             reduce using rule 9 (expression -> special_expression .)
    INF             reduce using rule 9 (expression -> special_expression .)
    SUP             reduce using rule 9 (expression -> special_expression .)
    INFEQ           reduce using rule 9 (expression -> special_expression .)
    SUPEQ           reduce using rule 9 (expression -> special_expression .)
    CONCAT          reduce using rule 9 (expression -> special_expression .)
    DO              reduce using rule 9 (expression -> special_expression .)
    THEN            reduce using rule 9 (expression -> special_expression .)
    LOOP            reduce using rule 9 (expression -> special_expression .)
    REPEAT          reduce using rule 9 (expression -> special_expression .)


state 10

    (10) expression -> reserved_word .

    IF              reduce using rule 10 (expression -> reserved_word .)
    NUMBER          reduce using rule 10 (expression -> reserved_word .)
    STRING          reduce using rule 10 (expression -> reserved_word .)
    VARIABLE        reduce using rule 10 (expression -> reserved_word .)
    reserved_word   reduce using rule 10 (expression -> reserved_word .)
    DOT             reduce using rule 10 (expression -> reserved_word .)
    EXCLAMATION     reduce using rule 10 (expression -> reserved_word .)
    AT              reduce using rule 10 (expression -> reserved_word .)
    COLON           reduce using rule 10 (expression -> reserved_word .)
    SEMICOLON       reduce using rule 10 (expression -> reserved_word .)
    LEFT_PAREN      reduce using rule 10 (expression -> reserved_word .)
    RIGHT_PAREN     reduce using rule 10 (expression -> reserved_word .)
    ELSE            reduce using rule 10 (expression -> reserved_word .)
    WHILE           reduce using rule 10 (expression -> reserved_word .)
    BEGIN           reduce using rule 10 (expression -> reserved_word .)
    EXIT            reduce using rule 10 (expression -> reserved_word .)
    DROP            reduce using rule 10 (expression -> reserved_word .)
    DUP             reduce using rule 10 (expression -> reserved_word .)
    SWAP            reduce using rule 10 (expression -> reserved_word .)
    ROT             reduce using rule 10 (expression -> reserved_word .)
    OVER            reduce using rule 10 (expression -> reserved_word .)
    $end            reduce using rule 10 (expression -> reserved_word .)
    PLUS            reduce using rule 10 (expression -> reserved_word .)
    MINUS           reduce using rule 10 (expression -> reserved_word .)
    TIMES           reduce using rule 10 (expression -> reserved_word .)
    DIVIDE          reduce using rule 10 (expression -> reserved_word .)
    MOD             reduce using rule 10 (expression -> reserved_word .)
    NOT             reduce using rule 10 (expression -> reserved_word .)
    INF             reduce using rule 10 (expression -> reserved_word .)
    SUP             reduce using rule 10 (expression -> reserved_word .)
    INFEQ           reduce using rule 10 (expression -> reserved_word .)
    SUPEQ           reduce using rule 10 (expression -> reserved_word .)
    CONCAT          reduce using rule 10 (expression -> reserved_word .)
    DO              reduce using rule 10 (expression -> reserved_word .)
    THEN            reduce using rule 10 (expression -> reserved_word .)
    LOOP            reduce using rule 10 (expression -> reserved_word .)
    REPEAT          reduce using rule 10 (expression -> reserved_word .)


state 11

    (11) expression -> DOT .

    IF              reduce using rule 11 (expression -> DOT .)
    NUMBER          reduce using rule 11 (expression -> DOT .)
    STRING          reduce using rule 11 (expression -> DOT .)
    VARIABLE        reduce using rule 11 (expression -> DOT .)
    reserved_word   reduce using rule 11 (expression -> DOT .)
    DOT             reduce using rule 11 (expression -> DOT .)
    EXCLAMATION     reduce using rule 11 (expression -> DOT .)
    AT              reduce using rule 11 (expression -> DOT .)
    COLON           reduce using rule 11 (expression -> DOT .)
    SEMICOLON       reduce using rule 11 (expression -> DOT .)
    LEFT_PAREN      reduce using rule 11 (expression -> DOT .)
    RIGHT_PAREN     reduce using rule 11 (expression -> DOT .)
    ELSE            reduce using rule 11 (expression -> DOT .)
    WHILE           reduce using rule 11 (expression -> DOT .)
    BEGIN           reduce using rule 11 (expression -> DOT .)
    EXIT            reduce using rule 11 (expression -> DOT .)
    DROP            reduce using rule 11 (expression -> DOT .)
    DUP             reduce using rule 11 (expression -> DOT .)
    SWAP            reduce using rule 11 (expression -> DOT .)
    ROT             reduce using rule 11 (expression -> DOT .)
    OVER            reduce using rule 11 (expression -> DOT .)
    $end            reduce using rule 11 (expression -> DOT .)
    PLUS            reduce using rule 11 (expression -> DOT .)
    MINUS           reduce using rule 11 (expression -> DOT .)
    TIMES           reduce using rule 11 (expression -> DOT .)
    DIVIDE          reduce using rule 11 (expression -> DOT .)
    MOD             reduce using rule 11 (expression -> DOT .)
    NOT             reduce using rule 11 (expression -> DOT .)
    INF             reduce using rule 11 (expression -> DOT .)
    SUP             reduce using rule 11 (expression -> DOT .)
    INFEQ           reduce using rule 11 (expression -> DOT .)
    SUPEQ           reduce using rule 11 (expression -> DOT .)
    CONCAT          reduce using rule 11 (expression -> DOT .)
    DO              reduce using rule 11 (expression -> DOT .)
    THEN            reduce using rule 11 (expression -> DOT .)
    LOOP            reduce using rule 11 (expression -> DOT .)
    REPEAT          reduce using rule 11 (expression -> DOT .)


state 12

    (32) flow_control -> if_statement .

    NUMBER          reduce using rule 32 (flow_control -> if_statement .)
    STRING          reduce using rule 32 (flow_control -> if_statement .)
    VARIABLE        reduce using rule 32 (flow_control -> if_statement .)
    reserved_word   reduce using rule 32 (flow_control -> if_statement .)
    DOT             reduce using rule 32 (flow_control -> if_statement .)
    EXCLAMATION     reduce using rule 32 (flow_control -> if_statement .)
    AT              reduce using rule 32 (flow_control -> if_statement .)
    COLON           reduce using rule 32 (flow_control -> if_statement .)
    SEMICOLON       reduce using rule 32 (flow_control -> if_statement .)
    LEFT_PAREN      reduce using rule 32 (flow_control -> if_statement .)
    RIGHT_PAREN     reduce using rule 32 (flow_control -> if_statement .)
    ELSE            reduce using rule 32 (flow_control -> if_statement .)
    WHILE           reduce using rule 32 (flow_control -> if_statement .)
    BEGIN           reduce using rule 32 (flow_control -> if_statement .)
    EXIT            reduce using rule 32 (flow_control -> if_statement .)
    DROP            reduce using rule 32 (flow_control -> if_statement .)
    DUP             reduce using rule 32 (flow_control -> if_statement .)
    SWAP            reduce using rule 32 (flow_control -> if_statement .)
    ROT             reduce using rule 32 (flow_control -> if_statement .)
    OVER            reduce using rule 32 (flow_control -> if_statement .)
    $end            reduce using rule 32 (flow_control -> if_statement .)
    THEN            reduce using rule 32 (flow_control -> if_statement .)
    LOOP            reduce using rule 32 (flow_control -> if_statement .)


state 13

    (33) flow_control -> else_statement .

    NUMBER          reduce using rule 33 (flow_control -> else_statement .)
    STRING          reduce using rule 33 (flow_control -> else_statement .)
    VARIABLE        reduce using rule 33 (flow_control -> else_statement .)
    reserved_word   reduce using rule 33 (flow_control -> else_statement .)
    DOT             reduce using rule 33 (flow_control -> else_statement .)
    EXCLAMATION     reduce using rule 33 (flow_control -> else_statement .)
    AT              reduce using rule 33 (flow_control -> else_statement .)
    COLON           reduce using rule 33 (flow_control -> else_statement .)
    SEMICOLON       reduce using rule 33 (flow_control -> else_statement .)
    LEFT_PAREN      reduce using rule 33 (flow_control -> else_statement .)
    RIGHT_PAREN     reduce using rule 33 (flow_control -> else_statement .)
    ELSE            reduce using rule 33 (flow_control -> else_statement .)
    WHILE           reduce using rule 33 (flow_control -> else_statement .)
    BEGIN           reduce using rule 33 (flow_control -> else_statement .)
    EXIT            reduce using rule 33 (flow_control -> else_statement .)
    DROP            reduce using rule 33 (flow_control -> else_statement .)
    DUP             reduce using rule 33 (flow_control -> else_statement .)
    SWAP            reduce using rule 33 (flow_control -> else_statement .)
    ROT             reduce using rule 33 (flow_control -> else_statement .)
    OVER            reduce using rule 33 (flow_control -> else_statement .)
    $end            reduce using rule 33 (flow_control -> else_statement .)
    THEN            reduce using rule 33 (flow_control -> else_statement .)
    LOOP            reduce using rule 33 (flow_control -> else_statement .)


state 14

    (34) flow_control -> while_loop .

    NUMBER          reduce using rule 34 (flow_control -> while_loop .)
    STRING          reduce using rule 34 (flow_control -> while_loop .)
    VARIABLE        reduce using rule 34 (flow_control -> while_loop .)
    reserved_word   reduce using rule 34 (flow_control -> while_loop .)
    DOT             reduce using rule 34 (flow_control -> while_loop .)
    EXCLAMATION     reduce using rule 34 (flow_control -> while_loop .)
    AT              reduce using rule 34 (flow_control -> while_loop .)
    COLON           reduce using rule 34 (flow_control -> while_loop .)
    SEMICOLON       reduce using rule 34 (flow_control -> while_loop .)
    LEFT_PAREN      reduce using rule 34 (flow_control -> while_loop .)
    RIGHT_PAREN     reduce using rule 34 (flow_control -> while_loop .)
    ELSE            reduce using rule 34 (flow_control -> while_loop .)
    WHILE           reduce using rule 34 (flow_control -> while_loop .)
    BEGIN           reduce using rule 34 (flow_control -> while_loop .)
    EXIT            reduce using rule 34 (flow_control -> while_loop .)
    DROP            reduce using rule 34 (flow_control -> while_loop .)
    DUP             reduce using rule 34 (flow_control -> while_loop .)
    SWAP            reduce using rule 34 (flow_control -> while_loop .)
    ROT             reduce using rule 34 (flow_control -> while_loop .)
    OVER            reduce using rule 34 (flow_control -> while_loop .)
    $end            reduce using rule 34 (flow_control -> while_loop .)
    THEN            reduce using rule 34 (flow_control -> while_loop .)
    LOOP            reduce using rule 34 (flow_control -> while_loop .)


state 15

    (35) flow_control -> repeat_loop .

    NUMBER          reduce using rule 35 (flow_control -> repeat_loop .)
    STRING          reduce using rule 35 (flow_control -> repeat_loop .)
    VARIABLE        reduce using rule 35 (flow_control -> repeat_loop .)
    reserved_word   reduce using rule 35 (flow_control -> repeat_loop .)
    DOT             reduce using rule 35 (flow_control -> repeat_loop .)
    EXCLAMATION     reduce using rule 35 (flow_control -> repeat_loop .)
    AT              reduce using rule 35 (flow_control -> repeat_loop .)
    COLON           reduce using rule 35 (flow_control -> repeat_loop .)
    SEMICOLON       reduce using rule 35 (flow_control -> repeat_loop .)
    LEFT_PAREN      reduce using rule 35 (flow_control -> repeat_loop .)
    RIGHT_PAREN     reduce using rule 35 (flow_control -> repeat_loop .)
    ELSE            reduce using rule 35 (flow_control -> repeat_loop .)
    WHILE           reduce using rule 35 (flow_control -> repeat_loop .)
    BEGIN           reduce using rule 35 (flow_control -> repeat_loop .)
    EXIT            reduce using rule 35 (flow_control -> repeat_loop .)
    DROP            reduce using rule 35 (flow_control -> repeat_loop .)
    DUP             reduce using rule 35 (flow_control -> repeat_loop .)
    SWAP            reduce using rule 35 (flow_control -> repeat_loop .)
    ROT             reduce using rule 35 (flow_control -> repeat_loop .)
    OVER            reduce using rule 35 (flow_control -> repeat_loop .)
    $end            reduce using rule 35 (flow_control -> repeat_loop .)
    THEN            reduce using rule 35 (flow_control -> repeat_loop .)
    LOOP            reduce using rule 35 (flow_control -> repeat_loop .)


state 16

    (36) flow_control -> exit_statement .

    NUMBER          reduce using rule 36 (flow_control -> exit_statement .)
    STRING          reduce using rule 36 (flow_control -> exit_statement .)
    VARIABLE        reduce using rule 36 (flow_control -> exit_statement .)
    reserved_word   reduce using rule 36 (flow_control -> exit_statement .)
    DOT             reduce using rule 36 (flow_control -> exit_statement .)
    EXCLAMATION     reduce using rule 36 (flow_control -> exit_statement .)
    AT              reduce using rule 36 (flow_control -> exit_statement .)
    COLON           reduce using rule 36 (flow_control -> exit_statement .)
    SEMICOLON       reduce using rule 36 (flow_control -> exit_statement .)
    LEFT_PAREN      reduce using rule 36 (flow_control -> exit_statement .)
    RIGHT_PAREN     reduce using rule 36 (flow_control -> exit_statement .)
    ELSE            reduce using rule 36 (flow_control -> exit_statement .)
    WHILE           reduce using rule 36 (flow_control -> exit_statement .)
    BEGIN           reduce using rule 36 (flow_control -> exit_statement .)
    EXIT            reduce using rule 36 (flow_control -> exit_statement .)
    DROP            reduce using rule 36 (flow_control -> exit_statement .)
    DUP             reduce using rule 36 (flow_control -> exit_statement .)
    SWAP            reduce using rule 36 (flow_control -> exit_statement .)
    ROT             reduce using rule 36 (flow_control -> exit_statement .)
    OVER            reduce using rule 36 (flow_control -> exit_statement .)
    $end            reduce using rule 36 (flow_control -> exit_statement .)
    THEN            reduce using rule 36 (flow_control -> exit_statement .)
    LOOP            reduce using rule 36 (flow_control -> exit_statement .)


state 17

    (37) flow_control -> drop_statement .

    NUMBER          reduce using rule 37 (flow_control -> drop_statement .)
    STRING          reduce using rule 37 (flow_control -> drop_statement .)
    VARIABLE        reduce using rule 37 (flow_control -> drop_statement .)
    reserved_word   reduce using rule 37 (flow_control -> drop_statement .)
    DOT             reduce using rule 37 (flow_control -> drop_statement .)
    EXCLAMATION     reduce using rule 37 (flow_control -> drop_statement .)
    AT              reduce using rule 37 (flow_control -> drop_statement .)
    COLON           reduce using rule 37 (flow_control -> drop_statement .)
    SEMICOLON       reduce using rule 37 (flow_control -> drop_statement .)
    LEFT_PAREN      reduce using rule 37 (flow_control -> drop_statement .)
    RIGHT_PAREN     reduce using rule 37 (flow_control -> drop_statement .)
    ELSE            reduce using rule 37 (flow_control -> drop_statement .)
    WHILE           reduce using rule 37 (flow_control -> drop_statement .)
    BEGIN           reduce using rule 37 (flow_control -> drop_statement .)
    EXIT            reduce using rule 37 (flow_control -> drop_statement .)
    DROP            reduce using rule 37 (flow_control -> drop_statement .)
    DUP             reduce using rule 37 (flow_control -> drop_statement .)
    SWAP            reduce using rule 37 (flow_control -> drop_statement .)
    ROT             reduce using rule 37 (flow_control -> drop_statement .)
    OVER            reduce using rule 37 (flow_control -> drop_statement .)
    $end            reduce using rule 37 (flow_control -> drop_statement .)
    THEN            reduce using rule 37 (flow_control -> drop_statement .)
    LOOP            reduce using rule 37 (flow_control -> drop_statement .)


state 18

    (38) flow_control -> dup_statement .

    NUMBER          reduce using rule 38 (flow_control -> dup_statement .)
    STRING          reduce using rule 38 (flow_control -> dup_statement .)
    VARIABLE        reduce using rule 38 (flow_control -> dup_statement .)
    reserved_word   reduce using rule 38 (flow_control -> dup_statement .)
    DOT             reduce using rule 38 (flow_control -> dup_statement .)
    EXCLAMATION     reduce using rule 38 (flow_control -> dup_statement .)
    AT              reduce using rule 38 (flow_control -> dup_statement .)
    COLON           reduce using rule 38 (flow_control -> dup_statement .)
    SEMICOLON       reduce using rule 38 (flow_control -> dup_statement .)
    LEFT_PAREN      reduce using rule 38 (flow_control -> dup_statement .)
    RIGHT_PAREN     reduce using rule 38 (flow_control -> dup_statement .)
    ELSE            reduce using rule 38 (flow_control -> dup_statement .)
    WHILE           reduce using rule 38 (flow_control -> dup_statement .)
    BEGIN           reduce using rule 38 (flow_control -> dup_statement .)
    EXIT            reduce using rule 38 (flow_control -> dup_statement .)
    DROP            reduce using rule 38 (flow_control -> dup_statement .)
    DUP             reduce using rule 38 (flow_control -> dup_statement .)
    SWAP            reduce using rule 38 (flow_control -> dup_statement .)
    ROT             reduce using rule 38 (flow_control -> dup_statement .)
    OVER            reduce using rule 38 (flow_control -> dup_statement .)
    $end            reduce using rule 38 (flow_control -> dup_statement .)
    THEN            reduce using rule 38 (flow_control -> dup_statement .)
    LOOP            reduce using rule 38 (flow_control -> dup_statement .)


state 19

    (39) flow_control -> swap_statement .

    NUMBER          reduce using rule 39 (flow_control -> swap_statement .)
    STRING          reduce using rule 39 (flow_control -> swap_statement .)
    VARIABLE        reduce using rule 39 (flow_control -> swap_statement .)
    reserved_word   reduce using rule 39 (flow_control -> swap_statement .)
    DOT             reduce using rule 39 (flow_control -> swap_statement .)
    EXCLAMATION     reduce using rule 39 (flow_control -> swap_statement .)
    AT              reduce using rule 39 (flow_control -> swap_statement .)
    COLON           reduce using rule 39 (flow_control -> swap_statement .)
    SEMICOLON       reduce using rule 39 (flow_control -> swap_statement .)
    LEFT_PAREN      reduce using rule 39 (flow_control -> swap_statement .)
    RIGHT_PAREN     reduce using rule 39 (flow_control -> swap_statement .)
    ELSE            reduce using rule 39 (flow_control -> swap_statement .)
    WHILE           reduce using rule 39 (flow_control -> swap_statement .)
    BEGIN           reduce using rule 39 (flow_control -> swap_statement .)
    EXIT            reduce using rule 39 (flow_control -> swap_statement .)
    DROP            reduce using rule 39 (flow_control -> swap_statement .)
    DUP             reduce using rule 39 (flow_control -> swap_statement .)
    SWAP            reduce using rule 39 (flow_control -> swap_statement .)
    ROT             reduce using rule 39 (flow_control -> swap_statement .)
    OVER            reduce using rule 39 (flow_control -> swap_statement .)
    $end            reduce using rule 39 (flow_control -> swap_statement .)
    THEN            reduce using rule 39 (flow_control -> swap_statement .)
    LOOP            reduce using rule 39 (flow_control -> swap_statement .)


state 20

    (40) flow_control -> rot_statement .

    NUMBER          reduce using rule 40 (flow_control -> rot_statement .)
    STRING          reduce using rule 40 (flow_control -> rot_statement .)
    VARIABLE        reduce using rule 40 (flow_control -> rot_statement .)
    reserved_word   reduce using rule 40 (flow_control -> rot_statement .)
    DOT             reduce using rule 40 (flow_control -> rot_statement .)
    EXCLAMATION     reduce using rule 40 (flow_control -> rot_statement .)
    AT              reduce using rule 40 (flow_control -> rot_statement .)
    COLON           reduce using rule 40 (flow_control -> rot_statement .)
    SEMICOLON       reduce using rule 40 (flow_control -> rot_statement .)
    LEFT_PAREN      reduce using rule 40 (flow_control -> rot_statement .)
    RIGHT_PAREN     reduce using rule 40 (flow_control -> rot_statement .)
    ELSE            reduce using rule 40 (flow_control -> rot_statement .)
    WHILE           reduce using rule 40 (flow_control -> rot_statement .)
    BEGIN           reduce using rule 40 (flow_control -> rot_statement .)
    EXIT            reduce using rule 40 (flow_control -> rot_statement .)
    DROP            reduce using rule 40 (flow_control -> rot_statement .)
    DUP             reduce using rule 40 (flow_control -> rot_statement .)
    SWAP            reduce using rule 40 (flow_control -> rot_statement .)
    ROT             reduce using rule 40 (flow_control -> rot_statement .)
    OVER            reduce using rule 40 (flow_control -> rot_statement .)
    $end            reduce using rule 40 (flow_control -> rot_statement .)
    THEN            reduce using rule 40 (flow_control -> rot_statement .)
    LOOP            reduce using rule 40 (flow_control -> rot_statement .)


state 21

    (41) flow_control -> over_statement .

    NUMBER          reduce using rule 41 (flow_control -> over_statement .)
    STRING          reduce using rule 41 (flow_control -> over_statement .)
    VARIABLE        reduce using rule 41 (flow_control -> over_statement .)
    reserved_word   reduce using rule 41 (flow_control -> over_statement .)
    DOT             reduce using rule 41 (flow_control -> over_statement .)
    EXCLAMATION     reduce using rule 41 (flow_control -> over_statement .)
    AT              reduce using rule 41 (flow_control -> over_statement .)
    COLON           reduce using rule 41 (flow_control -> over_statement .)
    SEMICOLON       reduce using rule 41 (flow_control -> over_statement .)
    LEFT_PAREN      reduce using rule 41 (flow_control -> over_statement .)
    RIGHT_PAREN     reduce using rule 41 (flow_control -> over_statement .)
    ELSE            reduce using rule 41 (flow_control -> over_statement .)
    WHILE           reduce using rule 41 (flow_control -> over_statement .)
    BEGIN           reduce using rule 41 (flow_control -> over_statement .)
    EXIT            reduce using rule 41 (flow_control -> over_statement .)
    DROP            reduce using rule 41 (flow_control -> over_statement .)
    DUP             reduce using rule 41 (flow_control -> over_statement .)
    SWAP            reduce using rule 41 (flow_control -> over_statement .)
    ROT             reduce using rule 41 (flow_control -> over_statement .)
    OVER            reduce using rule 41 (flow_control -> over_statement .)
    $end            reduce using rule 41 (flow_control -> over_statement .)
    THEN            reduce using rule 41 (flow_control -> over_statement .)
    LOOP            reduce using rule 41 (flow_control -> over_statement .)


state 22

    (26) special_expression -> EXCLAMATION .

    IF              reduce using rule 26 (special_expression -> EXCLAMATION .)
    NUMBER          reduce using rule 26 (special_expression -> EXCLAMATION .)
    STRING          reduce using rule 26 (special_expression -> EXCLAMATION .)
    VARIABLE        reduce using rule 26 (special_expression -> EXCLAMATION .)
    reserved_word   reduce using rule 26 (special_expression -> EXCLAMATION .)
    DOT             reduce using rule 26 (special_expression -> EXCLAMATION .)
    EXCLAMATION     reduce using rule 26 (special_expression -> EXCLAMATION .)
    AT              reduce using rule 26 (special_expression -> EXCLAMATION .)
    COLON           reduce using rule 26 (special_expression -> EXCLAMATION .)
    SEMICOLON       reduce using rule 26 (special_expression -> EXCLAMATION .)
    LEFT_PAREN      reduce using rule 26 (special_expression -> EXCLAMATION .)
    RIGHT_PAREN     reduce using rule 26 (special_expression -> EXCLAMATION .)
    ELSE            reduce using rule 26 (special_expression -> EXCLAMATION .)
    WHILE           reduce using rule 26 (special_expression -> EXCLAMATION .)
    BEGIN           reduce using rule 26 (special_expression -> EXCLAMATION .)
    EXIT            reduce using rule 26 (special_expression -> EXCLAMATION .)
    DROP            reduce using rule 26 (special_expression -> EXCLAMATION .)
    DUP             reduce using rule 26 (special_expression -> EXCLAMATION .)
    SWAP            reduce using rule 26 (special_expression -> EXCLAMATION .)
    ROT             reduce using rule 26 (special_expression -> EXCLAMATION .)
    OVER            reduce using rule 26 (special_expression -> EXCLAMATION .)
    $end            reduce using rule 26 (special_expression -> EXCLAMATION .)
    PLUS            reduce using rule 26 (special_expression -> EXCLAMATION .)
    MINUS           reduce using rule 26 (special_expression -> EXCLAMATION .)
    TIMES           reduce using rule 26 (special_expression -> EXCLAMATION .)
    DIVIDE          reduce using rule 26 (special_expression -> EXCLAMATION .)
    MOD             reduce using rule 26 (special_expression -> EXCLAMATION .)
    NOT             reduce using rule 26 (special_expression -> EXCLAMATION .)
    INF             reduce using rule 26 (special_expression -> EXCLAMATION .)
    SUP             reduce using rule 26 (special_expression -> EXCLAMATION .)
    INFEQ           reduce using rule 26 (special_expression -> EXCLAMATION .)
    SUPEQ           reduce using rule 26 (special_expression -> EXCLAMATION .)
    CONCAT          reduce using rule 26 (special_expression -> EXCLAMATION .)
    DO              reduce using rule 26 (special_expression -> EXCLAMATION .)
    THEN            reduce using rule 26 (special_expression -> EXCLAMATION .)
    LOOP            reduce using rule 26 (special_expression -> EXCLAMATION .)
    REPEAT          reduce using rule 26 (special_expression -> EXCLAMATION .)


state 23

    (27) special_expression -> AT .

    IF              reduce using rule 27 (special_expression -> AT .)
    NUMBER          reduce using rule 27 (special_expression -> AT .)
    STRING          reduce using rule 27 (special_expression -> AT .)
    VARIABLE        reduce using rule 27 (special_expression -> AT .)
    reserved_word   reduce using rule 27 (special_expression -> AT .)
    DOT             reduce using rule 27 (special_expression -> AT .)
    EXCLAMATION     reduce using rule 27 (special_expression -> AT .)
    AT              reduce using rule 27 (special_expression -> AT .)
    COLON           reduce using rule 27 (special_expression -> AT .)
    SEMICOLON       reduce using rule 27 (special_expression -> AT .)
    LEFT_PAREN      reduce using rule 27 (special_expression -> AT .)
    RIGHT_PAREN     reduce using rule 27 (special_expression -> AT .)
    ELSE            reduce using rule 27 (special_expression -> AT .)
    WHILE           reduce using rule 27 (special_expression -> AT .)
    BEGIN           reduce using rule 27 (special_expression -> AT .)
    EXIT            reduce using rule 27 (special_expression -> AT .)
    DROP            reduce using rule 27 (special_expression -> AT .)
    DUP             reduce using rule 27 (special_expression -> AT .)
    SWAP            reduce using rule 27 (special_expression -> AT .)
    ROT             reduce using rule 27 (special_expression -> AT .)
    OVER            reduce using rule 27 (special_expression -> AT .)
    $end            reduce using rule 27 (special_expression -> AT .)
    PLUS            reduce using rule 27 (special_expression -> AT .)
    MINUS           reduce using rule 27 (special_expression -> AT .)
    TIMES           reduce using rule 27 (special_expression -> AT .)
    DIVIDE          reduce using rule 27 (special_expression -> AT .)
    MOD             reduce using rule 27 (special_expression -> AT .)
    NOT             reduce using rule 27 (special_expression -> AT .)
    INF             reduce using rule 27 (special_expression -> AT .)
    SUP             reduce using rule 27 (special_expression -> AT .)
    INFEQ           reduce using rule 27 (special_expression -> AT .)
    SUPEQ           reduce using rule 27 (special_expression -> AT .)
    CONCAT          reduce using rule 27 (special_expression -> AT .)
    DO              reduce using rule 27 (special_expression -> AT .)
    THEN            reduce using rule 27 (special_expression -> AT .)
    LOOP            reduce using rule 27 (special_expression -> AT .)
    REPEAT          reduce using rule 27 (special_expression -> AT .)


state 24

    (28) special_expression -> COLON .

    IF              reduce using rule 28 (special_expression -> COLON .)
    NUMBER          reduce using rule 28 (special_expression -> COLON .)
    STRING          reduce using rule 28 (special_expression -> COLON .)
    VARIABLE        reduce using rule 28 (special_expression -> COLON .)
    reserved_word   reduce using rule 28 (special_expression -> COLON .)
    DOT             reduce using rule 28 (special_expression -> COLON .)
    EXCLAMATION     reduce using rule 28 (special_expression -> COLON .)
    AT              reduce using rule 28 (special_expression -> COLON .)
    COLON           reduce using rule 28 (special_expression -> COLON .)
    SEMICOLON       reduce using rule 28 (special_expression -> COLON .)
    LEFT_PAREN      reduce using rule 28 (special_expression -> COLON .)
    RIGHT_PAREN     reduce using rule 28 (special_expression -> COLON .)
    ELSE            reduce using rule 28 (special_expression -> COLON .)
    WHILE           reduce using rule 28 (special_expression -> COLON .)
    BEGIN           reduce using rule 28 (special_expression -> COLON .)
    EXIT            reduce using rule 28 (special_expression -> COLON .)
    DROP            reduce using rule 28 (special_expression -> COLON .)
    DUP             reduce using rule 28 (special_expression -> COLON .)
    SWAP            reduce using rule 28 (special_expression -> COLON .)
    ROT             reduce using rule 28 (special_expression -> COLON .)
    OVER            reduce using rule 28 (special_expression -> COLON .)
    $end            reduce using rule 28 (special_expression -> COLON .)
    PLUS            reduce using rule 28 (special_expression -> COLON .)
    MINUS           reduce using rule 28 (special_expression -> COLON .)
    TIMES           reduce using rule 28 (special_expression -> COLON .)
    DIVIDE          reduce using rule 28 (special_expression -> COLON .)
    MOD             reduce using rule 28 (special_expression -> COLON .)
    NOT             reduce using rule 28 (special_expression -> COLON .)
    INF             reduce using rule 28 (special_expression -> COLON .)
    SUP             reduce using rule 28 (special_expression -> COLON .)
    INFEQ           reduce using rule 28 (special_expression -> COLON .)
    SUPEQ           reduce using rule 28 (special_expression -> COLON .)
    CONCAT          reduce using rule 28 (special_expression -> COLON .)
    DO              reduce using rule 28 (special_expression -> COLON .)
    THEN            reduce using rule 28 (special_expression -> COLON .)
    LOOP            reduce using rule 28 (special_expression -> COLON .)
    REPEAT          reduce using rule 28 (special_expression -> COLON .)


state 25

    (29) special_expression -> SEMICOLON .

    IF              reduce using rule 29 (special_expression -> SEMICOLON .)
    NUMBER          reduce using rule 29 (special_expression -> SEMICOLON .)
    STRING          reduce using rule 29 (special_expression -> SEMICOLON .)
    VARIABLE        reduce using rule 29 (special_expression -> SEMICOLON .)
    reserved_word   reduce using rule 29 (special_expression -> SEMICOLON .)
    DOT             reduce using rule 29 (special_expression -> SEMICOLON .)
    EXCLAMATION     reduce using rule 29 (special_expression -> SEMICOLON .)
    AT              reduce using rule 29 (special_expression -> SEMICOLON .)
    COLON           reduce using rule 29 (special_expression -> SEMICOLON .)
    SEMICOLON       reduce using rule 29 (special_expression -> SEMICOLON .)
    LEFT_PAREN      reduce using rule 29 (special_expression -> SEMICOLON .)
    RIGHT_PAREN     reduce using rule 29 (special_expression -> SEMICOLON .)
    ELSE            reduce using rule 29 (special_expression -> SEMICOLON .)
    WHILE           reduce using rule 29 (special_expression -> SEMICOLON .)
    BEGIN           reduce using rule 29 (special_expression -> SEMICOLON .)
    EXIT            reduce using rule 29 (special_expression -> SEMICOLON .)
    DROP            reduce using rule 29 (special_expression -> SEMICOLON .)
    DUP             reduce using rule 29 (special_expression -> SEMICOLON .)
    SWAP            reduce using rule 29 (special_expression -> SEMICOLON .)
    ROT             reduce using rule 29 (special_expression -> SEMICOLON .)
    OVER            reduce using rule 29 (special_expression -> SEMICOLON .)
    $end            reduce using rule 29 (special_expression -> SEMICOLON .)
    PLUS            reduce using rule 29 (special_expression -> SEMICOLON .)
    MINUS           reduce using rule 29 (special_expression -> SEMICOLON .)
    TIMES           reduce using rule 29 (special_expression -> SEMICOLON .)
    DIVIDE          reduce using rule 29 (special_expression -> SEMICOLON .)
    MOD             reduce using rule 29 (special_expression -> SEMICOLON .)
    NOT             reduce using rule 29 (special_expression -> SEMICOLON .)
    INF             reduce using rule 29 (special_expression -> SEMICOLON .)
    SUP             reduce using rule 29 (special_expression -> SEMICOLON .)
    INFEQ           reduce using rule 29 (special_expression -> SEMICOLON .)
    SUPEQ           reduce using rule 29 (special_expression -> SEMICOLON .)
    CONCAT          reduce using rule 29 (special_expression -> SEMICOLON .)
    DO              reduce using rule 29 (special_expression -> SEMICOLON .)
    THEN            reduce using rule 29 (special_expression -> SEMICOLON .)
    LOOP            reduce using rule 29 (special_expression -> SEMICOLON .)
    REPEAT          reduce using rule 29 (special_expression -> SEMICOLON .)


state 26

    (30) special_expression -> LEFT_PAREN .

    IF              reduce using rule 30 (special_expression -> LEFT_PAREN .)
    NUMBER          reduce using rule 30 (special_expression -> LEFT_PAREN .)
    STRING          reduce using rule 30 (special_expression -> LEFT_PAREN .)
    VARIABLE        reduce using rule 30 (special_expression -> LEFT_PAREN .)
    reserved_word   reduce using rule 30 (special_expression -> LEFT_PAREN .)
    DOT             reduce using rule 30 (special_expression -> LEFT_PAREN .)
    EXCLAMATION     reduce using rule 30 (special_expression -> LEFT_PAREN .)
    AT              reduce using rule 30 (special_expression -> LEFT_PAREN .)
    COLON           reduce using rule 30 (special_expression -> LEFT_PAREN .)
    SEMICOLON       reduce using rule 30 (special_expression -> LEFT_PAREN .)
    LEFT_PAREN      reduce using rule 30 (special_expression -> LEFT_PAREN .)
    RIGHT_PAREN     reduce using rule 30 (special_expression -> LEFT_PAREN .)
    ELSE            reduce using rule 30 (special_expression -> LEFT_PAREN .)
    WHILE           reduce using rule 30 (special_expression -> LEFT_PAREN .)
    BEGIN           reduce using rule 30 (special_expression -> LEFT_PAREN .)
    EXIT            reduce using rule 30 (special_expression -> LEFT_PAREN .)
    DROP            reduce using rule 30 (special_expression -> LEFT_PAREN .)
    DUP             reduce using rule 30 (special_expression -> LEFT_PAREN .)
    SWAP            reduce using rule 30 (special_expression -> LEFT_PAREN .)
    ROT             reduce using rule 30 (special_expression -> LEFT_PAREN .)
    OVER            reduce using rule 30 (special_expression -> LEFT_PAREN .)
    $end            reduce using rule 30 (special_expression -> LEFT_PAREN .)
    PLUS            reduce using rule 30 (special_expression -> LEFT_PAREN .)
    MINUS           reduce using rule 30 (special_expression -> LEFT_PAREN .)
    TIMES           reduce using rule 30 (special_expression -> LEFT_PAREN .)
    DIVIDE          reduce using rule 30 (special_expression -> LEFT_PAREN .)
    MOD             reduce using rule 30 (special_expression -> LEFT_PAREN .)
    NOT             reduce using rule 30 (special_expression -> LEFT_PAREN .)
    INF             reduce using rule 30 (special_expression -> LEFT_PAREN .)
    SUP             reduce using rule 30 (special_expression -> LEFT_PAREN .)
    INFEQ           reduce using rule 30 (special_expression -> LEFT_PAREN .)
    SUPEQ           reduce using rule 30 (special_expression -> LEFT_PAREN .)
    CONCAT          reduce using rule 30 (special_expression -> LEFT_PAREN .)
    DO              reduce using rule 30 (special_expression -> LEFT_PAREN .)
    THEN            reduce using rule 30 (special_expression -> LEFT_PAREN .)
    LOOP            reduce using rule 30 (special_expression -> LEFT_PAREN .)
    REPEAT          reduce using rule 30 (special_expression -> LEFT_PAREN .)


state 27

    (31) special_expression -> RIGHT_PAREN .

    IF              reduce using rule 31 (special_expression -> RIGHT_PAREN .)
    NUMBER          reduce using rule 31 (special_expression -> RIGHT_PAREN .)
    STRING          reduce using rule 31 (special_expression -> RIGHT_PAREN .)
    VARIABLE        reduce using rule 31 (special_expression -> RIGHT_PAREN .)
    reserved_word   reduce using rule 31 (special_expression -> RIGHT_PAREN .)
    DOT             reduce using rule 31 (special_expression -> RIGHT_PAREN .)
    EXCLAMATION     reduce using rule 31 (special_expression -> RIGHT_PAREN .)
    AT              reduce using rule 31 (special_expression -> RIGHT_PAREN .)
    COLON           reduce using rule 31 (special_expression -> RIGHT_PAREN .)
    SEMICOLON       reduce using rule 31 (special_expression -> RIGHT_PAREN .)
    LEFT_PAREN      reduce using rule 31 (special_expression -> RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 31 (special_expression -> RIGHT_PAREN .)
    ELSE            reduce using rule 31 (special_expression -> RIGHT_PAREN .)
    WHILE           reduce using rule 31 (special_expression -> RIGHT_PAREN .)
    BEGIN           reduce using rule 31 (special_expression -> RIGHT_PAREN .)
    EXIT            reduce using rule 31 (special_expression -> RIGHT_PAREN .)
    DROP            reduce using rule 31 (special_expression -> RIGHT_PAREN .)
    DUP             reduce using rule 31 (special_expression -> RIGHT_PAREN .)
    SWAP            reduce using rule 31 (special_expression -> RIGHT_PAREN .)
    ROT             reduce using rule 31 (special_expression -> RIGHT_PAREN .)
    OVER            reduce using rule 31 (special_expression -> RIGHT_PAREN .)
    $end            reduce using rule 31 (special_expression -> RIGHT_PAREN .)
    PLUS            reduce using rule 31 (special_expression -> RIGHT_PAREN .)
    MINUS           reduce using rule 31 (special_expression -> RIGHT_PAREN .)
    TIMES           reduce using rule 31 (special_expression -> RIGHT_PAREN .)
    DIVIDE          reduce using rule 31 (special_expression -> RIGHT_PAREN .)
    MOD             reduce using rule 31 (special_expression -> RIGHT_PAREN .)
    NOT             reduce using rule 31 (special_expression -> RIGHT_PAREN .)
    INF             reduce using rule 31 (special_expression -> RIGHT_PAREN .)
    SUP             reduce using rule 31 (special_expression -> RIGHT_PAREN .)
    INFEQ           reduce using rule 31 (special_expression -> RIGHT_PAREN .)
    SUPEQ           reduce using rule 31 (special_expression -> RIGHT_PAREN .)
    CONCAT          reduce using rule 31 (special_expression -> RIGHT_PAREN .)
    DO              reduce using rule 31 (special_expression -> RIGHT_PAREN .)
    THEN            reduce using rule 31 (special_expression -> RIGHT_PAREN .)
    LOOP            reduce using rule 31 (special_expression -> RIGHT_PAREN .)
    REPEAT          reduce using rule 31 (special_expression -> RIGHT_PAREN .)


state 28

    (43) else_statement -> ELSE .

    NUMBER          reduce using rule 43 (else_statement -> ELSE .)
    STRING          reduce using rule 43 (else_statement -> ELSE .)
    VARIABLE        reduce using rule 43 (else_statement -> ELSE .)
    reserved_word   reduce using rule 43 (else_statement -> ELSE .)
    DOT             reduce using rule 43 (else_statement -> ELSE .)
    EXCLAMATION     reduce using rule 43 (else_statement -> ELSE .)
    AT              reduce using rule 43 (else_statement -> ELSE .)
    COLON           reduce using rule 43 (else_statement -> ELSE .)
    SEMICOLON       reduce using rule 43 (else_statement -> ELSE .)
    LEFT_PAREN      reduce using rule 43 (else_statement -> ELSE .)
    RIGHT_PAREN     reduce using rule 43 (else_statement -> ELSE .)
    ELSE            reduce using rule 43 (else_statement -> ELSE .)
    WHILE           reduce using rule 43 (else_statement -> ELSE .)
    BEGIN           reduce using rule 43 (else_statement -> ELSE .)
    EXIT            reduce using rule 43 (else_statement -> ELSE .)
    DROP            reduce using rule 43 (else_statement -> ELSE .)
    DUP             reduce using rule 43 (else_statement -> ELSE .)
    SWAP            reduce using rule 43 (else_statement -> ELSE .)
    ROT             reduce using rule 43 (else_statement -> ELSE .)
    OVER            reduce using rule 43 (else_statement -> ELSE .)
    $end            reduce using rule 43 (else_statement -> ELSE .)
    THEN            reduce using rule 43 (else_statement -> ELSE .)
    LOOP            reduce using rule 43 (else_statement -> ELSE .)


state 29

    (44) while_loop -> WHILE . expression DO statements LOOP
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (8) expression -> . VARIABLE
    (9) expression -> . special_expression
    (10) expression -> . reserved_word
    (11) expression -> . DOT
    (12) expression -> . expression expression arithmetic_op
    (18) expression -> . expression expression relational_op
    (24) expression -> . expression expression string_op
    (26) special_expression -> . EXCLAMATION
    (27) special_expression -> . AT
    (28) special_expression -> . COLON
    (29) special_expression -> . SEMICOLON
    (30) special_expression -> . LEFT_PAREN
    (31) special_expression -> . RIGHT_PAREN

    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    VARIABLE        shift and go to state 8
    reserved_word   shift and go to state 10
    DOT             shift and go to state 11
    EXCLAMATION     shift and go to state 22
    AT              shift and go to state 23
    COLON           shift and go to state 24
    SEMICOLON       shift and go to state 25
    LEFT_PAREN      shift and go to state 26
    RIGHT_PAREN     shift and go to state 27

    expression                     shift and go to state 40
    special_expression             shift and go to state 9

state 30

    (45) repeat_loop -> BEGIN . statements WHILE expression REPEAT
    (2) statements -> . statement
    (3) statements -> . statements statement
    (4) statement -> . expression
    (5) statement -> . flow_control
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (8) expression -> . VARIABLE
    (9) expression -> . special_expression
    (10) expression -> . reserved_word
    (11) expression -> . DOT
    (12) expression -> . expression expression arithmetic_op
    (18) expression -> . expression expression relational_op
    (24) expression -> . expression expression string_op
    (32) flow_control -> . if_statement
    (33) flow_control -> . else_statement
    (34) flow_control -> . while_loop
    (35) flow_control -> . repeat_loop
    (36) flow_control -> . exit_statement
    (37) flow_control -> . drop_statement
    (38) flow_control -> . dup_statement
    (39) flow_control -> . swap_statement
    (40) flow_control -> . rot_statement
    (41) flow_control -> . over_statement
    (26) special_expression -> . EXCLAMATION
    (27) special_expression -> . AT
    (28) special_expression -> . COLON
    (29) special_expression -> . SEMICOLON
    (30) special_expression -> . LEFT_PAREN
    (31) special_expression -> . RIGHT_PAREN
    (42) if_statement -> . expression IF statements THEN
    (43) else_statement -> . ELSE
    (44) while_loop -> . WHILE expression DO statements LOOP
    (45) repeat_loop -> . BEGIN statements WHILE expression REPEAT
    (46) exit_statement -> . EXIT
    (47) drop_statement -> . DROP
    (48) dup_statement -> . DUP
    (49) swap_statement -> . SWAP
    (50) rot_statement -> . ROT
    (51) over_statement -> . OVER

    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    VARIABLE        shift and go to state 8
    reserved_word   shift and go to state 10
    DOT             shift and go to state 11
    EXCLAMATION     shift and go to state 22
    AT              shift and go to state 23
    COLON           shift and go to state 24
    SEMICOLON       shift and go to state 25
    LEFT_PAREN      shift and go to state 26
    RIGHT_PAREN     shift and go to state 27
    ELSE            shift and go to state 28
    WHILE           shift and go to state 29
    BEGIN           shift and go to state 30
    EXIT            shift and go to state 31
    DROP            shift and go to state 32
    DUP             shift and go to state 33
    SWAP            shift and go to state 34
    ROT             shift and go to state 35
    OVER            shift and go to state 36

    statements                     shift and go to state 41
    expression                     shift and go to state 4
    statement                      shift and go to state 3
    flow_control                   shift and go to state 5
    special_expression             shift and go to state 9
    if_statement                   shift and go to state 12
    else_statement                 shift and go to state 13
    while_loop                     shift and go to state 14
    repeat_loop                    shift and go to state 15
    exit_statement                 shift and go to state 16
    drop_statement                 shift and go to state 17
    dup_statement                  shift and go to state 18
    swap_statement                 shift and go to state 19
    rot_statement                  shift and go to state 20
    over_statement                 shift and go to state 21

state 31

    (46) exit_statement -> EXIT .

    NUMBER          reduce using rule 46 (exit_statement -> EXIT .)
    STRING          reduce using rule 46 (exit_statement -> EXIT .)
    VARIABLE        reduce using rule 46 (exit_statement -> EXIT .)
    reserved_word   reduce using rule 46 (exit_statement -> EXIT .)
    DOT             reduce using rule 46 (exit_statement -> EXIT .)
    EXCLAMATION     reduce using rule 46 (exit_statement -> EXIT .)
    AT              reduce using rule 46 (exit_statement -> EXIT .)
    COLON           reduce using rule 46 (exit_statement -> EXIT .)
    SEMICOLON       reduce using rule 46 (exit_statement -> EXIT .)
    LEFT_PAREN      reduce using rule 46 (exit_statement -> EXIT .)
    RIGHT_PAREN     reduce using rule 46 (exit_statement -> EXIT .)
    ELSE            reduce using rule 46 (exit_statement -> EXIT .)
    WHILE           reduce using rule 46 (exit_statement -> EXIT .)
    BEGIN           reduce using rule 46 (exit_statement -> EXIT .)
    EXIT            reduce using rule 46 (exit_statement -> EXIT .)
    DROP            reduce using rule 46 (exit_statement -> EXIT .)
    DUP             reduce using rule 46 (exit_statement -> EXIT .)
    SWAP            reduce using rule 46 (exit_statement -> EXIT .)
    ROT             reduce using rule 46 (exit_statement -> EXIT .)
    OVER            reduce using rule 46 (exit_statement -> EXIT .)
    $end            reduce using rule 46 (exit_statement -> EXIT .)
    THEN            reduce using rule 46 (exit_statement -> EXIT .)
    LOOP            reduce using rule 46 (exit_statement -> EXIT .)


state 32

    (47) drop_statement -> DROP .

    NUMBER          reduce using rule 47 (drop_statement -> DROP .)
    STRING          reduce using rule 47 (drop_statement -> DROP .)
    VARIABLE        reduce using rule 47 (drop_statement -> DROP .)
    reserved_word   reduce using rule 47 (drop_statement -> DROP .)
    DOT             reduce using rule 47 (drop_statement -> DROP .)
    EXCLAMATION     reduce using rule 47 (drop_statement -> DROP .)
    AT              reduce using rule 47 (drop_statement -> DROP .)
    COLON           reduce using rule 47 (drop_statement -> DROP .)
    SEMICOLON       reduce using rule 47 (drop_statement -> DROP .)
    LEFT_PAREN      reduce using rule 47 (drop_statement -> DROP .)
    RIGHT_PAREN     reduce using rule 47 (drop_statement -> DROP .)
    ELSE            reduce using rule 47 (drop_statement -> DROP .)
    WHILE           reduce using rule 47 (drop_statement -> DROP .)
    BEGIN           reduce using rule 47 (drop_statement -> DROP .)
    EXIT            reduce using rule 47 (drop_statement -> DROP .)
    DROP            reduce using rule 47 (drop_statement -> DROP .)
    DUP             reduce using rule 47 (drop_statement -> DROP .)
    SWAP            reduce using rule 47 (drop_statement -> DROP .)
    ROT             reduce using rule 47 (drop_statement -> DROP .)
    OVER            reduce using rule 47 (drop_statement -> DROP .)
    $end            reduce using rule 47 (drop_statement -> DROP .)
    THEN            reduce using rule 47 (drop_statement -> DROP .)
    LOOP            reduce using rule 47 (drop_statement -> DROP .)


state 33

    (48) dup_statement -> DUP .

    NUMBER          reduce using rule 48 (dup_statement -> DUP .)
    STRING          reduce using rule 48 (dup_statement -> DUP .)
    VARIABLE        reduce using rule 48 (dup_statement -> DUP .)
    reserved_word   reduce using rule 48 (dup_statement -> DUP .)
    DOT             reduce using rule 48 (dup_statement -> DUP .)
    EXCLAMATION     reduce using rule 48 (dup_statement -> DUP .)
    AT              reduce using rule 48 (dup_statement -> DUP .)
    COLON           reduce using rule 48 (dup_statement -> DUP .)
    SEMICOLON       reduce using rule 48 (dup_statement -> DUP .)
    LEFT_PAREN      reduce using rule 48 (dup_statement -> DUP .)
    RIGHT_PAREN     reduce using rule 48 (dup_statement -> DUP .)
    ELSE            reduce using rule 48 (dup_statement -> DUP .)
    WHILE           reduce using rule 48 (dup_statement -> DUP .)
    BEGIN           reduce using rule 48 (dup_statement -> DUP .)
    EXIT            reduce using rule 48 (dup_statement -> DUP .)
    DROP            reduce using rule 48 (dup_statement -> DUP .)
    DUP             reduce using rule 48 (dup_statement -> DUP .)
    SWAP            reduce using rule 48 (dup_statement -> DUP .)
    ROT             reduce using rule 48 (dup_statement -> DUP .)
    OVER            reduce using rule 48 (dup_statement -> DUP .)
    $end            reduce using rule 48 (dup_statement -> DUP .)
    THEN            reduce using rule 48 (dup_statement -> DUP .)
    LOOP            reduce using rule 48 (dup_statement -> DUP .)


state 34

    (49) swap_statement -> SWAP .

    NUMBER          reduce using rule 49 (swap_statement -> SWAP .)
    STRING          reduce using rule 49 (swap_statement -> SWAP .)
    VARIABLE        reduce using rule 49 (swap_statement -> SWAP .)
    reserved_word   reduce using rule 49 (swap_statement -> SWAP .)
    DOT             reduce using rule 49 (swap_statement -> SWAP .)
    EXCLAMATION     reduce using rule 49 (swap_statement -> SWAP .)
    AT              reduce using rule 49 (swap_statement -> SWAP .)
    COLON           reduce using rule 49 (swap_statement -> SWAP .)
    SEMICOLON       reduce using rule 49 (swap_statement -> SWAP .)
    LEFT_PAREN      reduce using rule 49 (swap_statement -> SWAP .)
    RIGHT_PAREN     reduce using rule 49 (swap_statement -> SWAP .)
    ELSE            reduce using rule 49 (swap_statement -> SWAP .)
    WHILE           reduce using rule 49 (swap_statement -> SWAP .)
    BEGIN           reduce using rule 49 (swap_statement -> SWAP .)
    EXIT            reduce using rule 49 (swap_statement -> SWAP .)
    DROP            reduce using rule 49 (swap_statement -> SWAP .)
    DUP             reduce using rule 49 (swap_statement -> SWAP .)
    SWAP            reduce using rule 49 (swap_statement -> SWAP .)
    ROT             reduce using rule 49 (swap_statement -> SWAP .)
    OVER            reduce using rule 49 (swap_statement -> SWAP .)
    $end            reduce using rule 49 (swap_statement -> SWAP .)
    THEN            reduce using rule 49 (swap_statement -> SWAP .)
    LOOP            reduce using rule 49 (swap_statement -> SWAP .)


state 35

    (50) rot_statement -> ROT .

    NUMBER          reduce using rule 50 (rot_statement -> ROT .)
    STRING          reduce using rule 50 (rot_statement -> ROT .)
    VARIABLE        reduce using rule 50 (rot_statement -> ROT .)
    reserved_word   reduce using rule 50 (rot_statement -> ROT .)
    DOT             reduce using rule 50 (rot_statement -> ROT .)
    EXCLAMATION     reduce using rule 50 (rot_statement -> ROT .)
    AT              reduce using rule 50 (rot_statement -> ROT .)
    COLON           reduce using rule 50 (rot_statement -> ROT .)
    SEMICOLON       reduce using rule 50 (rot_statement -> ROT .)
    LEFT_PAREN      reduce using rule 50 (rot_statement -> ROT .)
    RIGHT_PAREN     reduce using rule 50 (rot_statement -> ROT .)
    ELSE            reduce using rule 50 (rot_statement -> ROT .)
    WHILE           reduce using rule 50 (rot_statement -> ROT .)
    BEGIN           reduce using rule 50 (rot_statement -> ROT .)
    EXIT            reduce using rule 50 (rot_statement -> ROT .)
    DROP            reduce using rule 50 (rot_statement -> ROT .)
    DUP             reduce using rule 50 (rot_statement -> ROT .)
    SWAP            reduce using rule 50 (rot_statement -> ROT .)
    ROT             reduce using rule 50 (rot_statement -> ROT .)
    OVER            reduce using rule 50 (rot_statement -> ROT .)
    $end            reduce using rule 50 (rot_statement -> ROT .)
    THEN            reduce using rule 50 (rot_statement -> ROT .)
    LOOP            reduce using rule 50 (rot_statement -> ROT .)


state 36

    (51) over_statement -> OVER .

    NUMBER          reduce using rule 51 (over_statement -> OVER .)
    STRING          reduce using rule 51 (over_statement -> OVER .)
    VARIABLE        reduce using rule 51 (over_statement -> OVER .)
    reserved_word   reduce using rule 51 (over_statement -> OVER .)
    DOT             reduce using rule 51 (over_statement -> OVER .)
    EXCLAMATION     reduce using rule 51 (over_statement -> OVER .)
    AT              reduce using rule 51 (over_statement -> OVER .)
    COLON           reduce using rule 51 (over_statement -> OVER .)
    SEMICOLON       reduce using rule 51 (over_statement -> OVER .)
    LEFT_PAREN      reduce using rule 51 (over_statement -> OVER .)
    RIGHT_PAREN     reduce using rule 51 (over_statement -> OVER .)
    ELSE            reduce using rule 51 (over_statement -> OVER .)
    WHILE           reduce using rule 51 (over_statement -> OVER .)
    BEGIN           reduce using rule 51 (over_statement -> OVER .)
    EXIT            reduce using rule 51 (over_statement -> OVER .)
    DROP            reduce using rule 51 (over_statement -> OVER .)
    DUP             reduce using rule 51 (over_statement -> OVER .)
    SWAP            reduce using rule 51 (over_statement -> OVER .)
    ROT             reduce using rule 51 (over_statement -> OVER .)
    OVER            reduce using rule 51 (over_statement -> OVER .)
    $end            reduce using rule 51 (over_statement -> OVER .)
    THEN            reduce using rule 51 (over_statement -> OVER .)
    LOOP            reduce using rule 51 (over_statement -> OVER .)


state 37

    (3) statements -> statements statement .

    NUMBER          reduce using rule 3 (statements -> statements statement .)
    STRING          reduce using rule 3 (statements -> statements statement .)
    VARIABLE        reduce using rule 3 (statements -> statements statement .)
    reserved_word   reduce using rule 3 (statements -> statements statement .)
    DOT             reduce using rule 3 (statements -> statements statement .)
    EXCLAMATION     reduce using rule 3 (statements -> statements statement .)
    AT              reduce using rule 3 (statements -> statements statement .)
    COLON           reduce using rule 3 (statements -> statements statement .)
    SEMICOLON       reduce using rule 3 (statements -> statements statement .)
    LEFT_PAREN      reduce using rule 3 (statements -> statements statement .)
    RIGHT_PAREN     reduce using rule 3 (statements -> statements statement .)
    ELSE            reduce using rule 3 (statements -> statements statement .)
    WHILE           reduce using rule 3 (statements -> statements statement .)
    BEGIN           reduce using rule 3 (statements -> statements statement .)
    EXIT            reduce using rule 3 (statements -> statements statement .)
    DROP            reduce using rule 3 (statements -> statements statement .)
    DUP             reduce using rule 3 (statements -> statements statement .)
    SWAP            reduce using rule 3 (statements -> statements statement .)
    ROT             reduce using rule 3 (statements -> statements statement .)
    OVER            reduce using rule 3 (statements -> statements statement .)
    $end            reduce using rule 3 (statements -> statements statement .)
    THEN            reduce using rule 3 (statements -> statements statement .)
    LOOP            reduce using rule 3 (statements -> statements statement .)


state 38

    (12) expression -> expression expression . arithmetic_op
    (18) expression -> expression expression . relational_op
    (24) expression -> expression expression . string_op
    (12) expression -> expression . expression arithmetic_op
    (18) expression -> expression . expression relational_op
    (24) expression -> expression . expression string_op
    (13) arithmetic_op -> . PLUS
    (14) arithmetic_op -> . MINUS
    (15) arithmetic_op -> . TIMES
    (16) arithmetic_op -> . DIVIDE
    (17) arithmetic_op -> . MOD
    (19) relational_op -> . NOT
    (20) relational_op -> . INF
    (21) relational_op -> . SUP
    (22) relational_op -> . INFEQ
    (23) relational_op -> . SUPEQ
    (25) string_op -> . CONCAT
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (8) expression -> . VARIABLE
    (9) expression -> . special_expression
    (10) expression -> . reserved_word
    (11) expression -> . DOT
    (12) expression -> . expression expression arithmetic_op
    (18) expression -> . expression expression relational_op
    (24) expression -> . expression expression string_op
    (26) special_expression -> . EXCLAMATION
    (27) special_expression -> . AT
    (28) special_expression -> . COLON
    (29) special_expression -> . SEMICOLON
    (30) special_expression -> . LEFT_PAREN
    (31) special_expression -> . RIGHT_PAREN

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIVIDE          shift and go to state 48
    MOD             shift and go to state 49
    NOT             shift and go to state 50
    INF             shift and go to state 51
    SUP             shift and go to state 52
    INFEQ           shift and go to state 53
    SUPEQ           shift and go to state 54
    CONCAT          shift and go to state 55
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    VARIABLE        shift and go to state 8
    reserved_word   shift and go to state 10
    DOT             shift and go to state 11
    EXCLAMATION     shift and go to state 22
    AT              shift and go to state 23
    COLON           shift and go to state 24
    SEMICOLON       shift and go to state 25
    LEFT_PAREN      shift and go to state 26
    RIGHT_PAREN     shift and go to state 27

    expression                     shift and go to state 38
    arithmetic_op                  shift and go to state 42
    relational_op                  shift and go to state 43
    string_op                      shift and go to state 44
    special_expression             shift and go to state 9

state 39

    (42) if_statement -> expression IF . statements THEN
    (2) statements -> . statement
    (3) statements -> . statements statement
    (4) statement -> . expression
    (5) statement -> . flow_control
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (8) expression -> . VARIABLE
    (9) expression -> . special_expression
    (10) expression -> . reserved_word
    (11) expression -> . DOT
    (12) expression -> . expression expression arithmetic_op
    (18) expression -> . expression expression relational_op
    (24) expression -> . expression expression string_op
    (32) flow_control -> . if_statement
    (33) flow_control -> . else_statement
    (34) flow_control -> . while_loop
    (35) flow_control -> . repeat_loop
    (36) flow_control -> . exit_statement
    (37) flow_control -> . drop_statement
    (38) flow_control -> . dup_statement
    (39) flow_control -> . swap_statement
    (40) flow_control -> . rot_statement
    (41) flow_control -> . over_statement
    (26) special_expression -> . EXCLAMATION
    (27) special_expression -> . AT
    (28) special_expression -> . COLON
    (29) special_expression -> . SEMICOLON
    (30) special_expression -> . LEFT_PAREN
    (31) special_expression -> . RIGHT_PAREN
    (42) if_statement -> . expression IF statements THEN
    (43) else_statement -> . ELSE
    (44) while_loop -> . WHILE expression DO statements LOOP
    (45) repeat_loop -> . BEGIN statements WHILE expression REPEAT
    (46) exit_statement -> . EXIT
    (47) drop_statement -> . DROP
    (48) dup_statement -> . DUP
    (49) swap_statement -> . SWAP
    (50) rot_statement -> . ROT
    (51) over_statement -> . OVER

    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    VARIABLE        shift and go to state 8
    reserved_word   shift and go to state 10
    DOT             shift and go to state 11
    EXCLAMATION     shift and go to state 22
    AT              shift and go to state 23
    COLON           shift and go to state 24
    SEMICOLON       shift and go to state 25
    LEFT_PAREN      shift and go to state 26
    RIGHT_PAREN     shift and go to state 27
    ELSE            shift and go to state 28
    WHILE           shift and go to state 29
    BEGIN           shift and go to state 30
    EXIT            shift and go to state 31
    DROP            shift and go to state 32
    DUP             shift and go to state 33
    SWAP            shift and go to state 34
    ROT             shift and go to state 35
    OVER            shift and go to state 36

    expression                     shift and go to state 4
    statements                     shift and go to state 56
    statement                      shift and go to state 3
    flow_control                   shift and go to state 5
    special_expression             shift and go to state 9
    if_statement                   shift and go to state 12
    else_statement                 shift and go to state 13
    while_loop                     shift and go to state 14
    repeat_loop                    shift and go to state 15
    exit_statement                 shift and go to state 16
    drop_statement                 shift and go to state 17
    dup_statement                  shift and go to state 18
    swap_statement                 shift and go to state 19
    rot_statement                  shift and go to state 20
    over_statement                 shift and go to state 21

state 40

    (44) while_loop -> WHILE expression . DO statements LOOP
    (12) expression -> expression . expression arithmetic_op
    (18) expression -> expression . expression relational_op
    (24) expression -> expression . expression string_op
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (8) expression -> . VARIABLE
    (9) expression -> . special_expression
    (10) expression -> . reserved_word
    (11) expression -> . DOT
    (12) expression -> . expression expression arithmetic_op
    (18) expression -> . expression expression relational_op
    (24) expression -> . expression expression string_op
    (26) special_expression -> . EXCLAMATION
    (27) special_expression -> . AT
    (28) special_expression -> . COLON
    (29) special_expression -> . SEMICOLON
    (30) special_expression -> . LEFT_PAREN
    (31) special_expression -> . RIGHT_PAREN

    DO              shift and go to state 57
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    VARIABLE        shift and go to state 8
    reserved_word   shift and go to state 10
    DOT             shift and go to state 11
    EXCLAMATION     shift and go to state 22
    AT              shift and go to state 23
    COLON           shift and go to state 24
    SEMICOLON       shift and go to state 25
    LEFT_PAREN      shift and go to state 26
    RIGHT_PAREN     shift and go to state 27

    expression                     shift and go to state 38
    special_expression             shift and go to state 9

state 41

    (45) repeat_loop -> BEGIN statements . WHILE expression REPEAT
    (3) statements -> statements . statement
    (4) statement -> . expression
    (5) statement -> . flow_control
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (8) expression -> . VARIABLE
    (9) expression -> . special_expression
    (10) expression -> . reserved_word
    (11) expression -> . DOT
    (12) expression -> . expression expression arithmetic_op
    (18) expression -> . expression expression relational_op
    (24) expression -> . expression expression string_op
    (32) flow_control -> . if_statement
    (33) flow_control -> . else_statement
    (34) flow_control -> . while_loop
    (35) flow_control -> . repeat_loop
    (36) flow_control -> . exit_statement
    (37) flow_control -> . drop_statement
    (38) flow_control -> . dup_statement
    (39) flow_control -> . swap_statement
    (40) flow_control -> . rot_statement
    (41) flow_control -> . over_statement
    (26) special_expression -> . EXCLAMATION
    (27) special_expression -> . AT
    (28) special_expression -> . COLON
    (29) special_expression -> . SEMICOLON
    (30) special_expression -> . LEFT_PAREN
    (31) special_expression -> . RIGHT_PAREN
    (42) if_statement -> . expression IF statements THEN
    (43) else_statement -> . ELSE
    (44) while_loop -> . WHILE expression DO statements LOOP
    (45) repeat_loop -> . BEGIN statements WHILE expression REPEAT
    (46) exit_statement -> . EXIT
    (47) drop_statement -> . DROP
    (48) dup_statement -> . DUP
    (49) swap_statement -> . SWAP
    (50) rot_statement -> . ROT
    (51) over_statement -> . OVER

    WHILE           shift and go to state 58
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    VARIABLE        shift and go to state 8
    reserved_word   shift and go to state 10
    DOT             shift and go to state 11
    EXCLAMATION     shift and go to state 22
    AT              shift and go to state 23
    COLON           shift and go to state 24
    SEMICOLON       shift and go to state 25
    LEFT_PAREN      shift and go to state 26
    RIGHT_PAREN     shift and go to state 27
    ELSE            shift and go to state 28
    BEGIN           shift and go to state 30
    EXIT            shift and go to state 31
    DROP            shift and go to state 32
    DUP             shift and go to state 33
    SWAP            shift and go to state 34
    ROT             shift and go to state 35
    OVER            shift and go to state 36

    expression                     shift and go to state 4
    statement                      shift and go to state 37
    flow_control                   shift and go to state 5
    special_expression             shift and go to state 9
    if_statement                   shift and go to state 12
    else_statement                 shift and go to state 13
    while_loop                     shift and go to state 14
    repeat_loop                    shift and go to state 15
    exit_statement                 shift and go to state 16
    drop_statement                 shift and go to state 17
    dup_statement                  shift and go to state 18
    swap_statement                 shift and go to state 19
    rot_statement                  shift and go to state 20
    over_statement                 shift and go to state 21

state 42

    (12) expression -> expression expression arithmetic_op .

    IF              reduce using rule 12 (expression -> expression expression arithmetic_op .)
    NUMBER          reduce using rule 12 (expression -> expression expression arithmetic_op .)
    STRING          reduce using rule 12 (expression -> expression expression arithmetic_op .)
    VARIABLE        reduce using rule 12 (expression -> expression expression arithmetic_op .)
    reserved_word   reduce using rule 12 (expression -> expression expression arithmetic_op .)
    DOT             reduce using rule 12 (expression -> expression expression arithmetic_op .)
    EXCLAMATION     reduce using rule 12 (expression -> expression expression arithmetic_op .)
    AT              reduce using rule 12 (expression -> expression expression arithmetic_op .)
    COLON           reduce using rule 12 (expression -> expression expression arithmetic_op .)
    SEMICOLON       reduce using rule 12 (expression -> expression expression arithmetic_op .)
    LEFT_PAREN      reduce using rule 12 (expression -> expression expression arithmetic_op .)
    RIGHT_PAREN     reduce using rule 12 (expression -> expression expression arithmetic_op .)
    ELSE            reduce using rule 12 (expression -> expression expression arithmetic_op .)
    WHILE           reduce using rule 12 (expression -> expression expression arithmetic_op .)
    BEGIN           reduce using rule 12 (expression -> expression expression arithmetic_op .)
    EXIT            reduce using rule 12 (expression -> expression expression arithmetic_op .)
    DROP            reduce using rule 12 (expression -> expression expression arithmetic_op .)
    DUP             reduce using rule 12 (expression -> expression expression arithmetic_op .)
    SWAP            reduce using rule 12 (expression -> expression expression arithmetic_op .)
    ROT             reduce using rule 12 (expression -> expression expression arithmetic_op .)
    OVER            reduce using rule 12 (expression -> expression expression arithmetic_op .)
    $end            reduce using rule 12 (expression -> expression expression arithmetic_op .)
    PLUS            reduce using rule 12 (expression -> expression expression arithmetic_op .)
    MINUS           reduce using rule 12 (expression -> expression expression arithmetic_op .)
    TIMES           reduce using rule 12 (expression -> expression expression arithmetic_op .)
    DIVIDE          reduce using rule 12 (expression -> expression expression arithmetic_op .)
    MOD             reduce using rule 12 (expression -> expression expression arithmetic_op .)
    NOT             reduce using rule 12 (expression -> expression expression arithmetic_op .)
    INF             reduce using rule 12 (expression -> expression expression arithmetic_op .)
    SUP             reduce using rule 12 (expression -> expression expression arithmetic_op .)
    INFEQ           reduce using rule 12 (expression -> expression expression arithmetic_op .)
    SUPEQ           reduce using rule 12 (expression -> expression expression arithmetic_op .)
    CONCAT          reduce using rule 12 (expression -> expression expression arithmetic_op .)
    DO              reduce using rule 12 (expression -> expression expression arithmetic_op .)
    THEN            reduce using rule 12 (expression -> expression expression arithmetic_op .)
    LOOP            reduce using rule 12 (expression -> expression expression arithmetic_op .)
    REPEAT          reduce using rule 12 (expression -> expression expression arithmetic_op .)


state 43

    (18) expression -> expression expression relational_op .

    IF              reduce using rule 18 (expression -> expression expression relational_op .)
    NUMBER          reduce using rule 18 (expression -> expression expression relational_op .)
    STRING          reduce using rule 18 (expression -> expression expression relational_op .)
    VARIABLE        reduce using rule 18 (expression -> expression expression relational_op .)
    reserved_word   reduce using rule 18 (expression -> expression expression relational_op .)
    DOT             reduce using rule 18 (expression -> expression expression relational_op .)
    EXCLAMATION     reduce using rule 18 (expression -> expression expression relational_op .)
    AT              reduce using rule 18 (expression -> expression expression relational_op .)
    COLON           reduce using rule 18 (expression -> expression expression relational_op .)
    SEMICOLON       reduce using rule 18 (expression -> expression expression relational_op .)
    LEFT_PAREN      reduce using rule 18 (expression -> expression expression relational_op .)
    RIGHT_PAREN     reduce using rule 18 (expression -> expression expression relational_op .)
    ELSE            reduce using rule 18 (expression -> expression expression relational_op .)
    WHILE           reduce using rule 18 (expression -> expression expression relational_op .)
    BEGIN           reduce using rule 18 (expression -> expression expression relational_op .)
    EXIT            reduce using rule 18 (expression -> expression expression relational_op .)
    DROP            reduce using rule 18 (expression -> expression expression relational_op .)
    DUP             reduce using rule 18 (expression -> expression expression relational_op .)
    SWAP            reduce using rule 18 (expression -> expression expression relational_op .)
    ROT             reduce using rule 18 (expression -> expression expression relational_op .)
    OVER            reduce using rule 18 (expression -> expression expression relational_op .)
    $end            reduce using rule 18 (expression -> expression expression relational_op .)
    PLUS            reduce using rule 18 (expression -> expression expression relational_op .)
    MINUS           reduce using rule 18 (expression -> expression expression relational_op .)
    TIMES           reduce using rule 18 (expression -> expression expression relational_op .)
    DIVIDE          reduce using rule 18 (expression -> expression expression relational_op .)
    MOD             reduce using rule 18 (expression -> expression expression relational_op .)
    NOT             reduce using rule 18 (expression -> expression expression relational_op .)
    INF             reduce using rule 18 (expression -> expression expression relational_op .)
    SUP             reduce using rule 18 (expression -> expression expression relational_op .)
    INFEQ           reduce using rule 18 (expression -> expression expression relational_op .)
    SUPEQ           reduce using rule 18 (expression -> expression expression relational_op .)
    CONCAT          reduce using rule 18 (expression -> expression expression relational_op .)
    DO              reduce using rule 18 (expression -> expression expression relational_op .)
    THEN            reduce using rule 18 (expression -> expression expression relational_op .)
    LOOP            reduce using rule 18 (expression -> expression expression relational_op .)
    REPEAT          reduce using rule 18 (expression -> expression expression relational_op .)


state 44

    (24) expression -> expression expression string_op .

    IF              reduce using rule 24 (expression -> expression expression string_op .)
    NUMBER          reduce using rule 24 (expression -> expression expression string_op .)
    STRING          reduce using rule 24 (expression -> expression expression string_op .)
    VARIABLE        reduce using rule 24 (expression -> expression expression string_op .)
    reserved_word   reduce using rule 24 (expression -> expression expression string_op .)
    DOT             reduce using rule 24 (expression -> expression expression string_op .)
    EXCLAMATION     reduce using rule 24 (expression -> expression expression string_op .)
    AT              reduce using rule 24 (expression -> expression expression string_op .)
    COLON           reduce using rule 24 (expression -> expression expression string_op .)
    SEMICOLON       reduce using rule 24 (expression -> expression expression string_op .)
    LEFT_PAREN      reduce using rule 24 (expression -> expression expression string_op .)
    RIGHT_PAREN     reduce using rule 24 (expression -> expression expression string_op .)
    ELSE            reduce using rule 24 (expression -> expression expression string_op .)
    WHILE           reduce using rule 24 (expression -> expression expression string_op .)
    BEGIN           reduce using rule 24 (expression -> expression expression string_op .)
    EXIT            reduce using rule 24 (expression -> expression expression string_op .)
    DROP            reduce using rule 24 (expression -> expression expression string_op .)
    DUP             reduce using rule 24 (expression -> expression expression string_op .)
    SWAP            reduce using rule 24 (expression -> expression expression string_op .)
    ROT             reduce using rule 24 (expression -> expression expression string_op .)
    OVER            reduce using rule 24 (expression -> expression expression string_op .)
    $end            reduce using rule 24 (expression -> expression expression string_op .)
    PLUS            reduce using rule 24 (expression -> expression expression string_op .)
    MINUS           reduce using rule 24 (expression -> expression expression string_op .)
    TIMES           reduce using rule 24 (expression -> expression expression string_op .)
    DIVIDE          reduce using rule 24 (expression -> expression expression string_op .)
    MOD             reduce using rule 24 (expression -> expression expression string_op .)
    NOT             reduce using rule 24 (expression -> expression expression string_op .)
    INF             reduce using rule 24 (expression -> expression expression string_op .)
    SUP             reduce using rule 24 (expression -> expression expression string_op .)
    INFEQ           reduce using rule 24 (expression -> expression expression string_op .)
    SUPEQ           reduce using rule 24 (expression -> expression expression string_op .)
    CONCAT          reduce using rule 24 (expression -> expression expression string_op .)
    DO              reduce using rule 24 (expression -> expression expression string_op .)
    THEN            reduce using rule 24 (expression -> expression expression string_op .)
    LOOP            reduce using rule 24 (expression -> expression expression string_op .)
    REPEAT          reduce using rule 24 (expression -> expression expression string_op .)


state 45

    (13) arithmetic_op -> PLUS .

    IF              reduce using rule 13 (arithmetic_op -> PLUS .)
    NUMBER          reduce using rule 13 (arithmetic_op -> PLUS .)
    STRING          reduce using rule 13 (arithmetic_op -> PLUS .)
    VARIABLE        reduce using rule 13 (arithmetic_op -> PLUS .)
    reserved_word   reduce using rule 13 (arithmetic_op -> PLUS .)
    DOT             reduce using rule 13 (arithmetic_op -> PLUS .)
    EXCLAMATION     reduce using rule 13 (arithmetic_op -> PLUS .)
    AT              reduce using rule 13 (arithmetic_op -> PLUS .)
    COLON           reduce using rule 13 (arithmetic_op -> PLUS .)
    SEMICOLON       reduce using rule 13 (arithmetic_op -> PLUS .)
    LEFT_PAREN      reduce using rule 13 (arithmetic_op -> PLUS .)
    RIGHT_PAREN     reduce using rule 13 (arithmetic_op -> PLUS .)
    ELSE            reduce using rule 13 (arithmetic_op -> PLUS .)
    WHILE           reduce using rule 13 (arithmetic_op -> PLUS .)
    BEGIN           reduce using rule 13 (arithmetic_op -> PLUS .)
    EXIT            reduce using rule 13 (arithmetic_op -> PLUS .)
    DROP            reduce using rule 13 (arithmetic_op -> PLUS .)
    DUP             reduce using rule 13 (arithmetic_op -> PLUS .)
    SWAP            reduce using rule 13 (arithmetic_op -> PLUS .)
    ROT             reduce using rule 13 (arithmetic_op -> PLUS .)
    OVER            reduce using rule 13 (arithmetic_op -> PLUS .)
    $end            reduce using rule 13 (arithmetic_op -> PLUS .)
    PLUS            reduce using rule 13 (arithmetic_op -> PLUS .)
    MINUS           reduce using rule 13 (arithmetic_op -> PLUS .)
    TIMES           reduce using rule 13 (arithmetic_op -> PLUS .)
    DIVIDE          reduce using rule 13 (arithmetic_op -> PLUS .)
    MOD             reduce using rule 13 (arithmetic_op -> PLUS .)
    NOT             reduce using rule 13 (arithmetic_op -> PLUS .)
    INF             reduce using rule 13 (arithmetic_op -> PLUS .)
    SUP             reduce using rule 13 (arithmetic_op -> PLUS .)
    INFEQ           reduce using rule 13 (arithmetic_op -> PLUS .)
    SUPEQ           reduce using rule 13 (arithmetic_op -> PLUS .)
    CONCAT          reduce using rule 13 (arithmetic_op -> PLUS .)
    DO              reduce using rule 13 (arithmetic_op -> PLUS .)
    THEN            reduce using rule 13 (arithmetic_op -> PLUS .)
    LOOP            reduce using rule 13 (arithmetic_op -> PLUS .)
    REPEAT          reduce using rule 13 (arithmetic_op -> PLUS .)


state 46

    (14) arithmetic_op -> MINUS .

    IF              reduce using rule 14 (arithmetic_op -> MINUS .)
    NUMBER          reduce using rule 14 (arithmetic_op -> MINUS .)
    STRING          reduce using rule 14 (arithmetic_op -> MINUS .)
    VARIABLE        reduce using rule 14 (arithmetic_op -> MINUS .)
    reserved_word   reduce using rule 14 (arithmetic_op -> MINUS .)
    DOT             reduce using rule 14 (arithmetic_op -> MINUS .)
    EXCLAMATION     reduce using rule 14 (arithmetic_op -> MINUS .)
    AT              reduce using rule 14 (arithmetic_op -> MINUS .)
    COLON           reduce using rule 14 (arithmetic_op -> MINUS .)
    SEMICOLON       reduce using rule 14 (arithmetic_op -> MINUS .)
    LEFT_PAREN      reduce using rule 14 (arithmetic_op -> MINUS .)
    RIGHT_PAREN     reduce using rule 14 (arithmetic_op -> MINUS .)
    ELSE            reduce using rule 14 (arithmetic_op -> MINUS .)
    WHILE           reduce using rule 14 (arithmetic_op -> MINUS .)
    BEGIN           reduce using rule 14 (arithmetic_op -> MINUS .)
    EXIT            reduce using rule 14 (arithmetic_op -> MINUS .)
    DROP            reduce using rule 14 (arithmetic_op -> MINUS .)
    DUP             reduce using rule 14 (arithmetic_op -> MINUS .)
    SWAP            reduce using rule 14 (arithmetic_op -> MINUS .)
    ROT             reduce using rule 14 (arithmetic_op -> MINUS .)
    OVER            reduce using rule 14 (arithmetic_op -> MINUS .)
    $end            reduce using rule 14 (arithmetic_op -> MINUS .)
    PLUS            reduce using rule 14 (arithmetic_op -> MINUS .)
    MINUS           reduce using rule 14 (arithmetic_op -> MINUS .)
    TIMES           reduce using rule 14 (arithmetic_op -> MINUS .)
    DIVIDE          reduce using rule 14 (arithmetic_op -> MINUS .)
    MOD             reduce using rule 14 (arithmetic_op -> MINUS .)
    NOT             reduce using rule 14 (arithmetic_op -> MINUS .)
    INF             reduce using rule 14 (arithmetic_op -> MINUS .)
    SUP             reduce using rule 14 (arithmetic_op -> MINUS .)
    INFEQ           reduce using rule 14 (arithmetic_op -> MINUS .)
    SUPEQ           reduce using rule 14 (arithmetic_op -> MINUS .)
    CONCAT          reduce using rule 14 (arithmetic_op -> MINUS .)
    DO              reduce using rule 14 (arithmetic_op -> MINUS .)
    THEN            reduce using rule 14 (arithmetic_op -> MINUS .)
    LOOP            reduce using rule 14 (arithmetic_op -> MINUS .)
    REPEAT          reduce using rule 14 (arithmetic_op -> MINUS .)


state 47

    (15) arithmetic_op -> TIMES .

    IF              reduce using rule 15 (arithmetic_op -> TIMES .)
    NUMBER          reduce using rule 15 (arithmetic_op -> TIMES .)
    STRING          reduce using rule 15 (arithmetic_op -> TIMES .)
    VARIABLE        reduce using rule 15 (arithmetic_op -> TIMES .)
    reserved_word   reduce using rule 15 (arithmetic_op -> TIMES .)
    DOT             reduce using rule 15 (arithmetic_op -> TIMES .)
    EXCLAMATION     reduce using rule 15 (arithmetic_op -> TIMES .)
    AT              reduce using rule 15 (arithmetic_op -> TIMES .)
    COLON           reduce using rule 15 (arithmetic_op -> TIMES .)
    SEMICOLON       reduce using rule 15 (arithmetic_op -> TIMES .)
    LEFT_PAREN      reduce using rule 15 (arithmetic_op -> TIMES .)
    RIGHT_PAREN     reduce using rule 15 (arithmetic_op -> TIMES .)
    ELSE            reduce using rule 15 (arithmetic_op -> TIMES .)
    WHILE           reduce using rule 15 (arithmetic_op -> TIMES .)
    BEGIN           reduce using rule 15 (arithmetic_op -> TIMES .)
    EXIT            reduce using rule 15 (arithmetic_op -> TIMES .)
    DROP            reduce using rule 15 (arithmetic_op -> TIMES .)
    DUP             reduce using rule 15 (arithmetic_op -> TIMES .)
    SWAP            reduce using rule 15 (arithmetic_op -> TIMES .)
    ROT             reduce using rule 15 (arithmetic_op -> TIMES .)
    OVER            reduce using rule 15 (arithmetic_op -> TIMES .)
    $end            reduce using rule 15 (arithmetic_op -> TIMES .)
    PLUS            reduce using rule 15 (arithmetic_op -> TIMES .)
    MINUS           reduce using rule 15 (arithmetic_op -> TIMES .)
    TIMES           reduce using rule 15 (arithmetic_op -> TIMES .)
    DIVIDE          reduce using rule 15 (arithmetic_op -> TIMES .)
    MOD             reduce using rule 15 (arithmetic_op -> TIMES .)
    NOT             reduce using rule 15 (arithmetic_op -> TIMES .)
    INF             reduce using rule 15 (arithmetic_op -> TIMES .)
    SUP             reduce using rule 15 (arithmetic_op -> TIMES .)
    INFEQ           reduce using rule 15 (arithmetic_op -> TIMES .)
    SUPEQ           reduce using rule 15 (arithmetic_op -> TIMES .)
    CONCAT          reduce using rule 15 (arithmetic_op -> TIMES .)
    DO              reduce using rule 15 (arithmetic_op -> TIMES .)
    THEN            reduce using rule 15 (arithmetic_op -> TIMES .)
    LOOP            reduce using rule 15 (arithmetic_op -> TIMES .)
    REPEAT          reduce using rule 15 (arithmetic_op -> TIMES .)


state 48

    (16) arithmetic_op -> DIVIDE .

    IF              reduce using rule 16 (arithmetic_op -> DIVIDE .)
    NUMBER          reduce using rule 16 (arithmetic_op -> DIVIDE .)
    STRING          reduce using rule 16 (arithmetic_op -> DIVIDE .)
    VARIABLE        reduce using rule 16 (arithmetic_op -> DIVIDE .)
    reserved_word   reduce using rule 16 (arithmetic_op -> DIVIDE .)
    DOT             reduce using rule 16 (arithmetic_op -> DIVIDE .)
    EXCLAMATION     reduce using rule 16 (arithmetic_op -> DIVIDE .)
    AT              reduce using rule 16 (arithmetic_op -> DIVIDE .)
    COLON           reduce using rule 16 (arithmetic_op -> DIVIDE .)
    SEMICOLON       reduce using rule 16 (arithmetic_op -> DIVIDE .)
    LEFT_PAREN      reduce using rule 16 (arithmetic_op -> DIVIDE .)
    RIGHT_PAREN     reduce using rule 16 (arithmetic_op -> DIVIDE .)
    ELSE            reduce using rule 16 (arithmetic_op -> DIVIDE .)
    WHILE           reduce using rule 16 (arithmetic_op -> DIVIDE .)
    BEGIN           reduce using rule 16 (arithmetic_op -> DIVIDE .)
    EXIT            reduce using rule 16 (arithmetic_op -> DIVIDE .)
    DROP            reduce using rule 16 (arithmetic_op -> DIVIDE .)
    DUP             reduce using rule 16 (arithmetic_op -> DIVIDE .)
    SWAP            reduce using rule 16 (arithmetic_op -> DIVIDE .)
    ROT             reduce using rule 16 (arithmetic_op -> DIVIDE .)
    OVER            reduce using rule 16 (arithmetic_op -> DIVIDE .)
    $end            reduce using rule 16 (arithmetic_op -> DIVIDE .)
    PLUS            reduce using rule 16 (arithmetic_op -> DIVIDE .)
    MINUS           reduce using rule 16 (arithmetic_op -> DIVIDE .)
    TIMES           reduce using rule 16 (arithmetic_op -> DIVIDE .)
    DIVIDE          reduce using rule 16 (arithmetic_op -> DIVIDE .)
    MOD             reduce using rule 16 (arithmetic_op -> DIVIDE .)
    NOT             reduce using rule 16 (arithmetic_op -> DIVIDE .)
    INF             reduce using rule 16 (arithmetic_op -> DIVIDE .)
    SUP             reduce using rule 16 (arithmetic_op -> DIVIDE .)
    INFEQ           reduce using rule 16 (arithmetic_op -> DIVIDE .)
    SUPEQ           reduce using rule 16 (arithmetic_op -> DIVIDE .)
    CONCAT          reduce using rule 16 (arithmetic_op -> DIVIDE .)
    DO              reduce using rule 16 (arithmetic_op -> DIVIDE .)
    THEN            reduce using rule 16 (arithmetic_op -> DIVIDE .)
    LOOP            reduce using rule 16 (arithmetic_op -> DIVIDE .)
    REPEAT          reduce using rule 16 (arithmetic_op -> DIVIDE .)


state 49

    (17) arithmetic_op -> MOD .

    IF              reduce using rule 17 (arithmetic_op -> MOD .)
    NUMBER          reduce using rule 17 (arithmetic_op -> MOD .)
    STRING          reduce using rule 17 (arithmetic_op -> MOD .)
    VARIABLE        reduce using rule 17 (arithmetic_op -> MOD .)
    reserved_word   reduce using rule 17 (arithmetic_op -> MOD .)
    DOT             reduce using rule 17 (arithmetic_op -> MOD .)
    EXCLAMATION     reduce using rule 17 (arithmetic_op -> MOD .)
    AT              reduce using rule 17 (arithmetic_op -> MOD .)
    COLON           reduce using rule 17 (arithmetic_op -> MOD .)
    SEMICOLON       reduce using rule 17 (arithmetic_op -> MOD .)
    LEFT_PAREN      reduce using rule 17 (arithmetic_op -> MOD .)
    RIGHT_PAREN     reduce using rule 17 (arithmetic_op -> MOD .)
    ELSE            reduce using rule 17 (arithmetic_op -> MOD .)
    WHILE           reduce using rule 17 (arithmetic_op -> MOD .)
    BEGIN           reduce using rule 17 (arithmetic_op -> MOD .)
    EXIT            reduce using rule 17 (arithmetic_op -> MOD .)
    DROP            reduce using rule 17 (arithmetic_op -> MOD .)
    DUP             reduce using rule 17 (arithmetic_op -> MOD .)
    SWAP            reduce using rule 17 (arithmetic_op -> MOD .)
    ROT             reduce using rule 17 (arithmetic_op -> MOD .)
    OVER            reduce using rule 17 (arithmetic_op -> MOD .)
    $end            reduce using rule 17 (arithmetic_op -> MOD .)
    PLUS            reduce using rule 17 (arithmetic_op -> MOD .)
    MINUS           reduce using rule 17 (arithmetic_op -> MOD .)
    TIMES           reduce using rule 17 (arithmetic_op -> MOD .)
    DIVIDE          reduce using rule 17 (arithmetic_op -> MOD .)
    MOD             reduce using rule 17 (arithmetic_op -> MOD .)
    NOT             reduce using rule 17 (arithmetic_op -> MOD .)
    INF             reduce using rule 17 (arithmetic_op -> MOD .)
    SUP             reduce using rule 17 (arithmetic_op -> MOD .)
    INFEQ           reduce using rule 17 (arithmetic_op -> MOD .)
    SUPEQ           reduce using rule 17 (arithmetic_op -> MOD .)
    CONCAT          reduce using rule 17 (arithmetic_op -> MOD .)
    DO              reduce using rule 17 (arithmetic_op -> MOD .)
    THEN            reduce using rule 17 (arithmetic_op -> MOD .)
    LOOP            reduce using rule 17 (arithmetic_op -> MOD .)
    REPEAT          reduce using rule 17 (arithmetic_op -> MOD .)


state 50

    (19) relational_op -> NOT .

    IF              reduce using rule 19 (relational_op -> NOT .)
    NUMBER          reduce using rule 19 (relational_op -> NOT .)
    STRING          reduce using rule 19 (relational_op -> NOT .)
    VARIABLE        reduce using rule 19 (relational_op -> NOT .)
    reserved_word   reduce using rule 19 (relational_op -> NOT .)
    DOT             reduce using rule 19 (relational_op -> NOT .)
    EXCLAMATION     reduce using rule 19 (relational_op -> NOT .)
    AT              reduce using rule 19 (relational_op -> NOT .)
    COLON           reduce using rule 19 (relational_op -> NOT .)
    SEMICOLON       reduce using rule 19 (relational_op -> NOT .)
    LEFT_PAREN      reduce using rule 19 (relational_op -> NOT .)
    RIGHT_PAREN     reduce using rule 19 (relational_op -> NOT .)
    ELSE            reduce using rule 19 (relational_op -> NOT .)
    WHILE           reduce using rule 19 (relational_op -> NOT .)
    BEGIN           reduce using rule 19 (relational_op -> NOT .)
    EXIT            reduce using rule 19 (relational_op -> NOT .)
    DROP            reduce using rule 19 (relational_op -> NOT .)
    DUP             reduce using rule 19 (relational_op -> NOT .)
    SWAP            reduce using rule 19 (relational_op -> NOT .)
    ROT             reduce using rule 19 (relational_op -> NOT .)
    OVER            reduce using rule 19 (relational_op -> NOT .)
    $end            reduce using rule 19 (relational_op -> NOT .)
    PLUS            reduce using rule 19 (relational_op -> NOT .)
    MINUS           reduce using rule 19 (relational_op -> NOT .)
    TIMES           reduce using rule 19 (relational_op -> NOT .)
    DIVIDE          reduce using rule 19 (relational_op -> NOT .)
    MOD             reduce using rule 19 (relational_op -> NOT .)
    NOT             reduce using rule 19 (relational_op -> NOT .)
    INF             reduce using rule 19 (relational_op -> NOT .)
    SUP             reduce using rule 19 (relational_op -> NOT .)
    INFEQ           reduce using rule 19 (relational_op -> NOT .)
    SUPEQ           reduce using rule 19 (relational_op -> NOT .)
    CONCAT          reduce using rule 19 (relational_op -> NOT .)
    DO              reduce using rule 19 (relational_op -> NOT .)
    THEN            reduce using rule 19 (relational_op -> NOT .)
    LOOP            reduce using rule 19 (relational_op -> NOT .)
    REPEAT          reduce using rule 19 (relational_op -> NOT .)


state 51

    (20) relational_op -> INF .

    IF              reduce using rule 20 (relational_op -> INF .)
    NUMBER          reduce using rule 20 (relational_op -> INF .)
    STRING          reduce using rule 20 (relational_op -> INF .)
    VARIABLE        reduce using rule 20 (relational_op -> INF .)
    reserved_word   reduce using rule 20 (relational_op -> INF .)
    DOT             reduce using rule 20 (relational_op -> INF .)
    EXCLAMATION     reduce using rule 20 (relational_op -> INF .)
    AT              reduce using rule 20 (relational_op -> INF .)
    COLON           reduce using rule 20 (relational_op -> INF .)
    SEMICOLON       reduce using rule 20 (relational_op -> INF .)
    LEFT_PAREN      reduce using rule 20 (relational_op -> INF .)
    RIGHT_PAREN     reduce using rule 20 (relational_op -> INF .)
    ELSE            reduce using rule 20 (relational_op -> INF .)
    WHILE           reduce using rule 20 (relational_op -> INF .)
    BEGIN           reduce using rule 20 (relational_op -> INF .)
    EXIT            reduce using rule 20 (relational_op -> INF .)
    DROP            reduce using rule 20 (relational_op -> INF .)
    DUP             reduce using rule 20 (relational_op -> INF .)
    SWAP            reduce using rule 20 (relational_op -> INF .)
    ROT             reduce using rule 20 (relational_op -> INF .)
    OVER            reduce using rule 20 (relational_op -> INF .)
    $end            reduce using rule 20 (relational_op -> INF .)
    PLUS            reduce using rule 20 (relational_op -> INF .)
    MINUS           reduce using rule 20 (relational_op -> INF .)
    TIMES           reduce using rule 20 (relational_op -> INF .)
    DIVIDE          reduce using rule 20 (relational_op -> INF .)
    MOD             reduce using rule 20 (relational_op -> INF .)
    NOT             reduce using rule 20 (relational_op -> INF .)
    INF             reduce using rule 20 (relational_op -> INF .)
    SUP             reduce using rule 20 (relational_op -> INF .)
    INFEQ           reduce using rule 20 (relational_op -> INF .)
    SUPEQ           reduce using rule 20 (relational_op -> INF .)
    CONCAT          reduce using rule 20 (relational_op -> INF .)
    DO              reduce using rule 20 (relational_op -> INF .)
    THEN            reduce using rule 20 (relational_op -> INF .)
    LOOP            reduce using rule 20 (relational_op -> INF .)
    REPEAT          reduce using rule 20 (relational_op -> INF .)


state 52

    (21) relational_op -> SUP .

    IF              reduce using rule 21 (relational_op -> SUP .)
    NUMBER          reduce using rule 21 (relational_op -> SUP .)
    STRING          reduce using rule 21 (relational_op -> SUP .)
    VARIABLE        reduce using rule 21 (relational_op -> SUP .)
    reserved_word   reduce using rule 21 (relational_op -> SUP .)
    DOT             reduce using rule 21 (relational_op -> SUP .)
    EXCLAMATION     reduce using rule 21 (relational_op -> SUP .)
    AT              reduce using rule 21 (relational_op -> SUP .)
    COLON           reduce using rule 21 (relational_op -> SUP .)
    SEMICOLON       reduce using rule 21 (relational_op -> SUP .)
    LEFT_PAREN      reduce using rule 21 (relational_op -> SUP .)
    RIGHT_PAREN     reduce using rule 21 (relational_op -> SUP .)
    ELSE            reduce using rule 21 (relational_op -> SUP .)
    WHILE           reduce using rule 21 (relational_op -> SUP .)
    BEGIN           reduce using rule 21 (relational_op -> SUP .)
    EXIT            reduce using rule 21 (relational_op -> SUP .)
    DROP            reduce using rule 21 (relational_op -> SUP .)
    DUP             reduce using rule 21 (relational_op -> SUP .)
    SWAP            reduce using rule 21 (relational_op -> SUP .)
    ROT             reduce using rule 21 (relational_op -> SUP .)
    OVER            reduce using rule 21 (relational_op -> SUP .)
    $end            reduce using rule 21 (relational_op -> SUP .)
    PLUS            reduce using rule 21 (relational_op -> SUP .)
    MINUS           reduce using rule 21 (relational_op -> SUP .)
    TIMES           reduce using rule 21 (relational_op -> SUP .)
    DIVIDE          reduce using rule 21 (relational_op -> SUP .)
    MOD             reduce using rule 21 (relational_op -> SUP .)
    NOT             reduce using rule 21 (relational_op -> SUP .)
    INF             reduce using rule 21 (relational_op -> SUP .)
    SUP             reduce using rule 21 (relational_op -> SUP .)
    INFEQ           reduce using rule 21 (relational_op -> SUP .)
    SUPEQ           reduce using rule 21 (relational_op -> SUP .)
    CONCAT          reduce using rule 21 (relational_op -> SUP .)
    DO              reduce using rule 21 (relational_op -> SUP .)
    THEN            reduce using rule 21 (relational_op -> SUP .)
    LOOP            reduce using rule 21 (relational_op -> SUP .)
    REPEAT          reduce using rule 21 (relational_op -> SUP .)


state 53

    (22) relational_op -> INFEQ .

    IF              reduce using rule 22 (relational_op -> INFEQ .)
    NUMBER          reduce using rule 22 (relational_op -> INFEQ .)
    STRING          reduce using rule 22 (relational_op -> INFEQ .)
    VARIABLE        reduce using rule 22 (relational_op -> INFEQ .)
    reserved_word   reduce using rule 22 (relational_op -> INFEQ .)
    DOT             reduce using rule 22 (relational_op -> INFEQ .)
    EXCLAMATION     reduce using rule 22 (relational_op -> INFEQ .)
    AT              reduce using rule 22 (relational_op -> INFEQ .)
    COLON           reduce using rule 22 (relational_op -> INFEQ .)
    SEMICOLON       reduce using rule 22 (relational_op -> INFEQ .)
    LEFT_PAREN      reduce using rule 22 (relational_op -> INFEQ .)
    RIGHT_PAREN     reduce using rule 22 (relational_op -> INFEQ .)
    ELSE            reduce using rule 22 (relational_op -> INFEQ .)
    WHILE           reduce using rule 22 (relational_op -> INFEQ .)
    BEGIN           reduce using rule 22 (relational_op -> INFEQ .)
    EXIT            reduce using rule 22 (relational_op -> INFEQ .)
    DROP            reduce using rule 22 (relational_op -> INFEQ .)
    DUP             reduce using rule 22 (relational_op -> INFEQ .)
    SWAP            reduce using rule 22 (relational_op -> INFEQ .)
    ROT             reduce using rule 22 (relational_op -> INFEQ .)
    OVER            reduce using rule 22 (relational_op -> INFEQ .)
    $end            reduce using rule 22 (relational_op -> INFEQ .)
    PLUS            reduce using rule 22 (relational_op -> INFEQ .)
    MINUS           reduce using rule 22 (relational_op -> INFEQ .)
    TIMES           reduce using rule 22 (relational_op -> INFEQ .)
    DIVIDE          reduce using rule 22 (relational_op -> INFEQ .)
    MOD             reduce using rule 22 (relational_op -> INFEQ .)
    NOT             reduce using rule 22 (relational_op -> INFEQ .)
    INF             reduce using rule 22 (relational_op -> INFEQ .)
    SUP             reduce using rule 22 (relational_op -> INFEQ .)
    INFEQ           reduce using rule 22 (relational_op -> INFEQ .)
    SUPEQ           reduce using rule 22 (relational_op -> INFEQ .)
    CONCAT          reduce using rule 22 (relational_op -> INFEQ .)
    DO              reduce using rule 22 (relational_op -> INFEQ .)
    THEN            reduce using rule 22 (relational_op -> INFEQ .)
    LOOP            reduce using rule 22 (relational_op -> INFEQ .)
    REPEAT          reduce using rule 22 (relational_op -> INFEQ .)


state 54

    (23) relational_op -> SUPEQ .

    IF              reduce using rule 23 (relational_op -> SUPEQ .)
    NUMBER          reduce using rule 23 (relational_op -> SUPEQ .)
    STRING          reduce using rule 23 (relational_op -> SUPEQ .)
    VARIABLE        reduce using rule 23 (relational_op -> SUPEQ .)
    reserved_word   reduce using rule 23 (relational_op -> SUPEQ .)
    DOT             reduce using rule 23 (relational_op -> SUPEQ .)
    EXCLAMATION     reduce using rule 23 (relational_op -> SUPEQ .)
    AT              reduce using rule 23 (relational_op -> SUPEQ .)
    COLON           reduce using rule 23 (relational_op -> SUPEQ .)
    SEMICOLON       reduce using rule 23 (relational_op -> SUPEQ .)
    LEFT_PAREN      reduce using rule 23 (relational_op -> SUPEQ .)
    RIGHT_PAREN     reduce using rule 23 (relational_op -> SUPEQ .)
    ELSE            reduce using rule 23 (relational_op -> SUPEQ .)
    WHILE           reduce using rule 23 (relational_op -> SUPEQ .)
    BEGIN           reduce using rule 23 (relational_op -> SUPEQ .)
    EXIT            reduce using rule 23 (relational_op -> SUPEQ .)
    DROP            reduce using rule 23 (relational_op -> SUPEQ .)
    DUP             reduce using rule 23 (relational_op -> SUPEQ .)
    SWAP            reduce using rule 23 (relational_op -> SUPEQ .)
    ROT             reduce using rule 23 (relational_op -> SUPEQ .)
    OVER            reduce using rule 23 (relational_op -> SUPEQ .)
    $end            reduce using rule 23 (relational_op -> SUPEQ .)
    PLUS            reduce using rule 23 (relational_op -> SUPEQ .)
    MINUS           reduce using rule 23 (relational_op -> SUPEQ .)
    TIMES           reduce using rule 23 (relational_op -> SUPEQ .)
    DIVIDE          reduce using rule 23 (relational_op -> SUPEQ .)
    MOD             reduce using rule 23 (relational_op -> SUPEQ .)
    NOT             reduce using rule 23 (relational_op -> SUPEQ .)
    INF             reduce using rule 23 (relational_op -> SUPEQ .)
    SUP             reduce using rule 23 (relational_op -> SUPEQ .)
    INFEQ           reduce using rule 23 (relational_op -> SUPEQ .)
    SUPEQ           reduce using rule 23 (relational_op -> SUPEQ .)
    CONCAT          reduce using rule 23 (relational_op -> SUPEQ .)
    DO              reduce using rule 23 (relational_op -> SUPEQ .)
    THEN            reduce using rule 23 (relational_op -> SUPEQ .)
    LOOP            reduce using rule 23 (relational_op -> SUPEQ .)
    REPEAT          reduce using rule 23 (relational_op -> SUPEQ .)


state 55

    (25) string_op -> CONCAT .

    IF              reduce using rule 25 (string_op -> CONCAT .)
    NUMBER          reduce using rule 25 (string_op -> CONCAT .)
    STRING          reduce using rule 25 (string_op -> CONCAT .)
    VARIABLE        reduce using rule 25 (string_op -> CONCAT .)
    reserved_word   reduce using rule 25 (string_op -> CONCAT .)
    DOT             reduce using rule 25 (string_op -> CONCAT .)
    EXCLAMATION     reduce using rule 25 (string_op -> CONCAT .)
    AT              reduce using rule 25 (string_op -> CONCAT .)
    COLON           reduce using rule 25 (string_op -> CONCAT .)
    SEMICOLON       reduce using rule 25 (string_op -> CONCAT .)
    LEFT_PAREN      reduce using rule 25 (string_op -> CONCAT .)
    RIGHT_PAREN     reduce using rule 25 (string_op -> CONCAT .)
    ELSE            reduce using rule 25 (string_op -> CONCAT .)
    WHILE           reduce using rule 25 (string_op -> CONCAT .)
    BEGIN           reduce using rule 25 (string_op -> CONCAT .)
    EXIT            reduce using rule 25 (string_op -> CONCAT .)
    DROP            reduce using rule 25 (string_op -> CONCAT .)
    DUP             reduce using rule 25 (string_op -> CONCAT .)
    SWAP            reduce using rule 25 (string_op -> CONCAT .)
    ROT             reduce using rule 25 (string_op -> CONCAT .)
    OVER            reduce using rule 25 (string_op -> CONCAT .)
    $end            reduce using rule 25 (string_op -> CONCAT .)
    PLUS            reduce using rule 25 (string_op -> CONCAT .)
    MINUS           reduce using rule 25 (string_op -> CONCAT .)
    TIMES           reduce using rule 25 (string_op -> CONCAT .)
    DIVIDE          reduce using rule 25 (string_op -> CONCAT .)
    MOD             reduce using rule 25 (string_op -> CONCAT .)
    NOT             reduce using rule 25 (string_op -> CONCAT .)
    INF             reduce using rule 25 (string_op -> CONCAT .)
    SUP             reduce using rule 25 (string_op -> CONCAT .)
    INFEQ           reduce using rule 25 (string_op -> CONCAT .)
    SUPEQ           reduce using rule 25 (string_op -> CONCAT .)
    CONCAT          reduce using rule 25 (string_op -> CONCAT .)
    DO              reduce using rule 25 (string_op -> CONCAT .)
    THEN            reduce using rule 25 (string_op -> CONCAT .)
    LOOP            reduce using rule 25 (string_op -> CONCAT .)
    REPEAT          reduce using rule 25 (string_op -> CONCAT .)


state 56

    (42) if_statement -> expression IF statements . THEN
    (3) statements -> statements . statement
    (4) statement -> . expression
    (5) statement -> . flow_control
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (8) expression -> . VARIABLE
    (9) expression -> . special_expression
    (10) expression -> . reserved_word
    (11) expression -> . DOT
    (12) expression -> . expression expression arithmetic_op
    (18) expression -> . expression expression relational_op
    (24) expression -> . expression expression string_op
    (32) flow_control -> . if_statement
    (33) flow_control -> . else_statement
    (34) flow_control -> . while_loop
    (35) flow_control -> . repeat_loop
    (36) flow_control -> . exit_statement
    (37) flow_control -> . drop_statement
    (38) flow_control -> . dup_statement
    (39) flow_control -> . swap_statement
    (40) flow_control -> . rot_statement
    (41) flow_control -> . over_statement
    (26) special_expression -> . EXCLAMATION
    (27) special_expression -> . AT
    (28) special_expression -> . COLON
    (29) special_expression -> . SEMICOLON
    (30) special_expression -> . LEFT_PAREN
    (31) special_expression -> . RIGHT_PAREN
    (42) if_statement -> . expression IF statements THEN
    (43) else_statement -> . ELSE
    (44) while_loop -> . WHILE expression DO statements LOOP
    (45) repeat_loop -> . BEGIN statements WHILE expression REPEAT
    (46) exit_statement -> . EXIT
    (47) drop_statement -> . DROP
    (48) dup_statement -> . DUP
    (49) swap_statement -> . SWAP
    (50) rot_statement -> . ROT
    (51) over_statement -> . OVER

    THEN            shift and go to state 59
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    VARIABLE        shift and go to state 8
    reserved_word   shift and go to state 10
    DOT             shift and go to state 11
    EXCLAMATION     shift and go to state 22
    AT              shift and go to state 23
    COLON           shift and go to state 24
    SEMICOLON       shift and go to state 25
    LEFT_PAREN      shift and go to state 26
    RIGHT_PAREN     shift and go to state 27
    ELSE            shift and go to state 28
    WHILE           shift and go to state 29
    BEGIN           shift and go to state 30
    EXIT            shift and go to state 31
    DROP            shift and go to state 32
    DUP             shift and go to state 33
    SWAP            shift and go to state 34
    ROT             shift and go to state 35
    OVER            shift and go to state 36

    expression                     shift and go to state 4
    statement                      shift and go to state 37
    flow_control                   shift and go to state 5
    special_expression             shift and go to state 9
    if_statement                   shift and go to state 12
    else_statement                 shift and go to state 13
    while_loop                     shift and go to state 14
    repeat_loop                    shift and go to state 15
    exit_statement                 shift and go to state 16
    drop_statement                 shift and go to state 17
    dup_statement                  shift and go to state 18
    swap_statement                 shift and go to state 19
    rot_statement                  shift and go to state 20
    over_statement                 shift and go to state 21

state 57

    (44) while_loop -> WHILE expression DO . statements LOOP
    (2) statements -> . statement
    (3) statements -> . statements statement
    (4) statement -> . expression
    (5) statement -> . flow_control
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (8) expression -> . VARIABLE
    (9) expression -> . special_expression
    (10) expression -> . reserved_word
    (11) expression -> . DOT
    (12) expression -> . expression expression arithmetic_op
    (18) expression -> . expression expression relational_op
    (24) expression -> . expression expression string_op
    (32) flow_control -> . if_statement
    (33) flow_control -> . else_statement
    (34) flow_control -> . while_loop
    (35) flow_control -> . repeat_loop
    (36) flow_control -> . exit_statement
    (37) flow_control -> . drop_statement
    (38) flow_control -> . dup_statement
    (39) flow_control -> . swap_statement
    (40) flow_control -> . rot_statement
    (41) flow_control -> . over_statement
    (26) special_expression -> . EXCLAMATION
    (27) special_expression -> . AT
    (28) special_expression -> . COLON
    (29) special_expression -> . SEMICOLON
    (30) special_expression -> . LEFT_PAREN
    (31) special_expression -> . RIGHT_PAREN
    (42) if_statement -> . expression IF statements THEN
    (43) else_statement -> . ELSE
    (44) while_loop -> . WHILE expression DO statements LOOP
    (45) repeat_loop -> . BEGIN statements WHILE expression REPEAT
    (46) exit_statement -> . EXIT
    (47) drop_statement -> . DROP
    (48) dup_statement -> . DUP
    (49) swap_statement -> . SWAP
    (50) rot_statement -> . ROT
    (51) over_statement -> . OVER

    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    VARIABLE        shift and go to state 8
    reserved_word   shift and go to state 10
    DOT             shift and go to state 11
    EXCLAMATION     shift and go to state 22
    AT              shift and go to state 23
    COLON           shift and go to state 24
    SEMICOLON       shift and go to state 25
    LEFT_PAREN      shift and go to state 26
    RIGHT_PAREN     shift and go to state 27
    ELSE            shift and go to state 28
    WHILE           shift and go to state 29
    BEGIN           shift and go to state 30
    EXIT            shift and go to state 31
    DROP            shift and go to state 32
    DUP             shift and go to state 33
    SWAP            shift and go to state 34
    ROT             shift and go to state 35
    OVER            shift and go to state 36

    expression                     shift and go to state 4
    statements                     shift and go to state 60
    statement                      shift and go to state 3
    flow_control                   shift and go to state 5
    special_expression             shift and go to state 9
    if_statement                   shift and go to state 12
    else_statement                 shift and go to state 13
    while_loop                     shift and go to state 14
    repeat_loop                    shift and go to state 15
    exit_statement                 shift and go to state 16
    drop_statement                 shift and go to state 17
    dup_statement                  shift and go to state 18
    swap_statement                 shift and go to state 19
    rot_statement                  shift and go to state 20
    over_statement                 shift and go to state 21

state 58

    (45) repeat_loop -> BEGIN statements WHILE . expression REPEAT
    (44) while_loop -> WHILE . expression DO statements LOOP
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (8) expression -> . VARIABLE
    (9) expression -> . special_expression
    (10) expression -> . reserved_word
    (11) expression -> . DOT
    (12) expression -> . expression expression arithmetic_op
    (18) expression -> . expression expression relational_op
    (24) expression -> . expression expression string_op
    (26) special_expression -> . EXCLAMATION
    (27) special_expression -> . AT
    (28) special_expression -> . COLON
    (29) special_expression -> . SEMICOLON
    (30) special_expression -> . LEFT_PAREN
    (31) special_expression -> . RIGHT_PAREN

    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    VARIABLE        shift and go to state 8
    reserved_word   shift and go to state 10
    DOT             shift and go to state 11
    EXCLAMATION     shift and go to state 22
    AT              shift and go to state 23
    COLON           shift and go to state 24
    SEMICOLON       shift and go to state 25
    LEFT_PAREN      shift and go to state 26
    RIGHT_PAREN     shift and go to state 27

    expression                     shift and go to state 61
    special_expression             shift and go to state 9

state 59

    (42) if_statement -> expression IF statements THEN .

    NUMBER          reduce using rule 42 (if_statement -> expression IF statements THEN .)
    STRING          reduce using rule 42 (if_statement -> expression IF statements THEN .)
    VARIABLE        reduce using rule 42 (if_statement -> expression IF statements THEN .)
    reserved_word   reduce using rule 42 (if_statement -> expression IF statements THEN .)
    DOT             reduce using rule 42 (if_statement -> expression IF statements THEN .)
    EXCLAMATION     reduce using rule 42 (if_statement -> expression IF statements THEN .)
    AT              reduce using rule 42 (if_statement -> expression IF statements THEN .)
    COLON           reduce using rule 42 (if_statement -> expression IF statements THEN .)
    SEMICOLON       reduce using rule 42 (if_statement -> expression IF statements THEN .)
    LEFT_PAREN      reduce using rule 42 (if_statement -> expression IF statements THEN .)
    RIGHT_PAREN     reduce using rule 42 (if_statement -> expression IF statements THEN .)
    ELSE            reduce using rule 42 (if_statement -> expression IF statements THEN .)
    WHILE           reduce using rule 42 (if_statement -> expression IF statements THEN .)
    BEGIN           reduce using rule 42 (if_statement -> expression IF statements THEN .)
    EXIT            reduce using rule 42 (if_statement -> expression IF statements THEN .)
    DROP            reduce using rule 42 (if_statement -> expression IF statements THEN .)
    DUP             reduce using rule 42 (if_statement -> expression IF statements THEN .)
    SWAP            reduce using rule 42 (if_statement -> expression IF statements THEN .)
    ROT             reduce using rule 42 (if_statement -> expression IF statements THEN .)
    OVER            reduce using rule 42 (if_statement -> expression IF statements THEN .)
    $end            reduce using rule 42 (if_statement -> expression IF statements THEN .)
    THEN            reduce using rule 42 (if_statement -> expression IF statements THEN .)
    LOOP            reduce using rule 42 (if_statement -> expression IF statements THEN .)


state 60

    (44) while_loop -> WHILE expression DO statements . LOOP
    (3) statements -> statements . statement
    (4) statement -> . expression
    (5) statement -> . flow_control
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (8) expression -> . VARIABLE
    (9) expression -> . special_expression
    (10) expression -> . reserved_word
    (11) expression -> . DOT
    (12) expression -> . expression expression arithmetic_op
    (18) expression -> . expression expression relational_op
    (24) expression -> . expression expression string_op
    (32) flow_control -> . if_statement
    (33) flow_control -> . else_statement
    (34) flow_control -> . while_loop
    (35) flow_control -> . repeat_loop
    (36) flow_control -> . exit_statement
    (37) flow_control -> . drop_statement
    (38) flow_control -> . dup_statement
    (39) flow_control -> . swap_statement
    (40) flow_control -> . rot_statement
    (41) flow_control -> . over_statement
    (26) special_expression -> . EXCLAMATION
    (27) special_expression -> . AT
    (28) special_expression -> . COLON
    (29) special_expression -> . SEMICOLON
    (30) special_expression -> . LEFT_PAREN
    (31) special_expression -> . RIGHT_PAREN
    (42) if_statement -> . expression IF statements THEN
    (43) else_statement -> . ELSE
    (44) while_loop -> . WHILE expression DO statements LOOP
    (45) repeat_loop -> . BEGIN statements WHILE expression REPEAT
    (46) exit_statement -> . EXIT
    (47) drop_statement -> . DROP
    (48) dup_statement -> . DUP
    (49) swap_statement -> . SWAP
    (50) rot_statement -> . ROT
    (51) over_statement -> . OVER

    LOOP            shift and go to state 62
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    VARIABLE        shift and go to state 8
    reserved_word   shift and go to state 10
    DOT             shift and go to state 11
    EXCLAMATION     shift and go to state 22
    AT              shift and go to state 23
    COLON           shift and go to state 24
    SEMICOLON       shift and go to state 25
    LEFT_PAREN      shift and go to state 26
    RIGHT_PAREN     shift and go to state 27
    ELSE            shift and go to state 28
    WHILE           shift and go to state 29
    BEGIN           shift and go to state 30
    EXIT            shift and go to state 31
    DROP            shift and go to state 32
    DUP             shift and go to state 33
    SWAP            shift and go to state 34
    ROT             shift and go to state 35
    OVER            shift and go to state 36

    expression                     shift and go to state 4
    statement                      shift and go to state 37
    flow_control                   shift and go to state 5
    special_expression             shift and go to state 9
    if_statement                   shift and go to state 12
    else_statement                 shift and go to state 13
    while_loop                     shift and go to state 14
    repeat_loop                    shift and go to state 15
    exit_statement                 shift and go to state 16
    drop_statement                 shift and go to state 17
    dup_statement                  shift and go to state 18
    swap_statement                 shift and go to state 19
    rot_statement                  shift and go to state 20
    over_statement                 shift and go to state 21

state 61

    (45) repeat_loop -> BEGIN statements WHILE expression . REPEAT
    (44) while_loop -> WHILE expression . DO statements LOOP
    (12) expression -> expression . expression arithmetic_op
    (18) expression -> expression . expression relational_op
    (24) expression -> expression . expression string_op
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (8) expression -> . VARIABLE
    (9) expression -> . special_expression
    (10) expression -> . reserved_word
    (11) expression -> . DOT
    (12) expression -> . expression expression arithmetic_op
    (18) expression -> . expression expression relational_op
    (24) expression -> . expression expression string_op
    (26) special_expression -> . EXCLAMATION
    (27) special_expression -> . AT
    (28) special_expression -> . COLON
    (29) special_expression -> . SEMICOLON
    (30) special_expression -> . LEFT_PAREN
    (31) special_expression -> . RIGHT_PAREN

    REPEAT          shift and go to state 63
    DO              shift and go to state 57
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    VARIABLE        shift and go to state 8
    reserved_word   shift and go to state 10
    DOT             shift and go to state 11
    EXCLAMATION     shift and go to state 22
    AT              shift and go to state 23
    COLON           shift and go to state 24
    SEMICOLON       shift and go to state 25
    LEFT_PAREN      shift and go to state 26
    RIGHT_PAREN     shift and go to state 27

    expression                     shift and go to state 38
    special_expression             shift and go to state 9

state 62

    (44) while_loop -> WHILE expression DO statements LOOP .

    NUMBER          reduce using rule 44 (while_loop -> WHILE expression DO statements LOOP .)
    STRING          reduce using rule 44 (while_loop -> WHILE expression DO statements LOOP .)
    VARIABLE        reduce using rule 44 (while_loop -> WHILE expression DO statements LOOP .)
    reserved_word   reduce using rule 44 (while_loop -> WHILE expression DO statements LOOP .)
    DOT             reduce using rule 44 (while_loop -> WHILE expression DO statements LOOP .)
    EXCLAMATION     reduce using rule 44 (while_loop -> WHILE expression DO statements LOOP .)
    AT              reduce using rule 44 (while_loop -> WHILE expression DO statements LOOP .)
    COLON           reduce using rule 44 (while_loop -> WHILE expression DO statements LOOP .)
    SEMICOLON       reduce using rule 44 (while_loop -> WHILE expression DO statements LOOP .)
    LEFT_PAREN      reduce using rule 44 (while_loop -> WHILE expression DO statements LOOP .)
    RIGHT_PAREN     reduce using rule 44 (while_loop -> WHILE expression DO statements LOOP .)
    ELSE            reduce using rule 44 (while_loop -> WHILE expression DO statements LOOP .)
    WHILE           reduce using rule 44 (while_loop -> WHILE expression DO statements LOOP .)
    BEGIN           reduce using rule 44 (while_loop -> WHILE expression DO statements LOOP .)
    EXIT            reduce using rule 44 (while_loop -> WHILE expression DO statements LOOP .)
    DROP            reduce using rule 44 (while_loop -> WHILE expression DO statements LOOP .)
    DUP             reduce using rule 44 (while_loop -> WHILE expression DO statements LOOP .)
    SWAP            reduce using rule 44 (while_loop -> WHILE expression DO statements LOOP .)
    ROT             reduce using rule 44 (while_loop -> WHILE expression DO statements LOOP .)
    OVER            reduce using rule 44 (while_loop -> WHILE expression DO statements LOOP .)
    $end            reduce using rule 44 (while_loop -> WHILE expression DO statements LOOP .)
    THEN            reduce using rule 44 (while_loop -> WHILE expression DO statements LOOP .)
    LOOP            reduce using rule 44 (while_loop -> WHILE expression DO statements LOOP .)


state 63

    (45) repeat_loop -> BEGIN statements WHILE expression REPEAT .

    NUMBER          reduce using rule 45 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    STRING          reduce using rule 45 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    VARIABLE        reduce using rule 45 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    reserved_word   reduce using rule 45 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    DOT             reduce using rule 45 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    EXCLAMATION     reduce using rule 45 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    AT              reduce using rule 45 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    COLON           reduce using rule 45 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    SEMICOLON       reduce using rule 45 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    LEFT_PAREN      reduce using rule 45 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    RIGHT_PAREN     reduce using rule 45 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    ELSE            reduce using rule 45 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    WHILE           reduce using rule 45 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    BEGIN           reduce using rule 45 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    EXIT            reduce using rule 45 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    DROP            reduce using rule 45 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    DUP             reduce using rule 45 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    SWAP            reduce using rule 45 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    ROT             reduce using rule 45 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    OVER            reduce using rule 45 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    $end            reduce using rule 45 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    THEN            reduce using rule 45 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)
    LOOP            reduce using rule 45 (repeat_loop -> BEGIN statements WHILE expression REPEAT .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NUMBER in state 4 resolved as shift
WARNING: shift/reduce conflict for STRING in state 4 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 4 resolved as shift
WARNING: shift/reduce conflict for reserved_word in state 4 resolved as shift
WARNING: shift/reduce conflict for DOT in state 4 resolved as shift
WARNING: shift/reduce conflict for EXCLAMATION in state 4 resolved as shift
WARNING: shift/reduce conflict for AT in state 4 resolved as shift
WARNING: shift/reduce conflict for COLON in state 4 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 4 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 4 resolved as shift
WARNING: shift/reduce conflict for RIGHT_PAREN in state 4 resolved as shift
