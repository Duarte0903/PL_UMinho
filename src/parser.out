Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AT
    BEGIN
    COLON
    EXCLAMATION
    LEFT_PAREN
    NEWLINE
    REPEAT
    RIGHT_PAREN
    SEMICOLON
    WHILE

Grammar

Rule 0     S' -> programa
Rule 1     programa -> comandos
Rule 2     comandos -> comando
Rule 3     comandos -> comandos comando
Rule 4     comando -> exp_aritmeticas
Rule 5     comando -> exp_relacionais
Rule 6     comando -> functions
Rule 7     comando -> values
Rule 8     comando -> creating_funcs
Rule 9     comando -> variable
Rule 10    comando -> flow_control
Rule 11    exp_aritmeticas -> comando comando PLUS
Rule 12    exp_aritmeticas -> comando comando MINUS
Rule 13    exp_aritmeticas -> comando comando TIMES
Rule 14    exp_aritmeticas -> comando comando DIVIDE
Rule 15    exp_aritmeticas -> comando comando MOD
Rule 16    exp_relacionais -> comando comando NOT
Rule 17    exp_relacionais -> comando comando INF
Rule 18    exp_relacionais -> comando comando SUP
Rule 19    exp_relacionais -> comando comando INFEQ
Rule 20    exp_relacionais -> comando comando SUPEQ
Rule 21    values -> NUMBER
Rule 22    values -> STRING
Rule 23    flow_control -> if
Rule 24    flow_control -> else
Rule 25    flow_control -> then
Rule 26    flow_control -> do
Rule 27    flow_control -> loop
Rule 28    if -> IF
Rule 29    else -> ELSE
Rule 30    then -> THEN
Rule 31    do -> DO
Rule 32    loop -> LOOP
Rule 33    functions -> stdout
Rule 34    functions -> dot
Rule 35    functions -> space
Rule 36    functions -> dup
Rule 37    functions -> comment
Rule 38    functions -> drop
Rule 39    functions -> swap
Rule 40    functions -> rot
Rule 41    functions -> over
Rule 42    functions -> concat
Rule 43    functions -> cr
Rule 44    functions -> emit
Rule 45    functions -> char
Rule 46    functions -> key
Rule 47    functions -> spaces
Rule 48    functions -> 2dup
Rule 49    stdout -> STDOUT
Rule 50    dot -> DOT
Rule 51    space -> SPACE
Rule 52    dup -> comando DUP
Rule 53    comment -> COMMENT_LINE
Rule 54    comment -> COMMENT_BLOCK
Rule 55    drop -> DROP
Rule 56    swap -> SWAP
Rule 57    rot -> ROT
Rule 58    over -> OVER
Rule 59    concat -> CONCAT
Rule 60    cr -> CR
Rule 61    emit -> EMIT
Rule 62    char -> CHAR
Rule 63    key -> KEY
Rule 64    spaces -> SPACES
Rule 65    2dup -> 2DUP
Rule 66    variable -> variable_definition
Rule 67    variable -> variable_assignment
Rule 68    variable -> variable_fetch
Rule 69    variable -> variable_print
Rule 70    variable_definition -> VARIABLE_DEFENITION
Rule 71    variable_assignment -> VARIABLE_ASSIGNMENT
Rule 72    variable_fetch -> VARIABLE_FETCH
Rule 73    variable_print -> VARIABLE_PRINT
Rule 74    creating_funcs -> func_criada
Rule 75    creating_funcs -> function
Rule 76    creating_funcs -> creating_funcs function
Rule 77    creating_funcs -> creating_funcs func_criada
Rule 78    function -> FUNCTION
Rule 79    function -> FUNCTION_CALL
Rule 80    func_criada -> FUNC_BODY

Terminals, with rules where they appear

2DUP                 : 65
AT                   : 
BEGIN                : 
CHAR                 : 62
COLON                : 
COMMENT_BLOCK        : 54
COMMENT_LINE         : 53
CONCAT               : 59
CR                   : 60
DIVIDE               : 14
DO                   : 31
DOT                  : 50
DROP                 : 55
DUP                  : 52
ELSE                 : 29
EMIT                 : 61
EXCLAMATION          : 
FUNCTION             : 78
FUNCTION_CALL        : 79
FUNC_BODY            : 80
IF                   : 28
INF                  : 17
INFEQ                : 19
KEY                  : 63
LEFT_PAREN           : 
LOOP                 : 32
MINUS                : 12
MOD                  : 15
NEWLINE              : 
NOT                  : 16
NUMBER               : 21
OVER                 : 58
PLUS                 : 11
REPEAT               : 
RIGHT_PAREN          : 
ROT                  : 57
SEMICOLON            : 
SPACE                : 51
SPACES               : 64
STDOUT               : 49
STRING               : 22
SUP                  : 18
SUPEQ                : 20
SWAP                 : 56
THEN                 : 30
TIMES                : 13
VARIABLE_ASSIGNMENT  : 71
VARIABLE_DEFENITION  : 70
VARIABLE_FETCH       : 72
VARIABLE_PRINT       : 73
WHILE                : 
error                : 

Nonterminals, with rules where they appear

2dup                 : 48
char                 : 45
comando              : 2 3 11 11 12 12 13 13 14 14 15 15 16 16 17 17 18 18 19 19 20 20 52
comandos             : 1 3
comment              : 37
concat               : 42
cr                   : 43
creating_funcs       : 8 76 77
do                   : 26
dot                  : 34
drop                 : 38
dup                  : 36
else                 : 24
emit                 : 44
exp_aritmeticas      : 4
exp_relacionais      : 5
flow_control         : 10
func_criada          : 74 77
function             : 75 76
functions            : 6
if                   : 23
key                  : 46
loop                 : 27
over                 : 41
programa             : 0
rot                  : 40
space                : 35
spaces               : 47
stdout               : 33
swap                 : 39
then                 : 25
values               : 7
variable             : 9
variable_assignment  : 67
variable_definition  : 66
variable_fetch       : 68
variable_print       : 69

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . comandos
    (2) comandos -> . comando
    (3) comandos -> . comandos comando
    (4) comando -> . exp_aritmeticas
    (5) comando -> . exp_relacionais
    (6) comando -> . functions
    (7) comando -> . values
    (8) comando -> . creating_funcs
    (9) comando -> . variable
    (10) comando -> . flow_control
    (11) exp_aritmeticas -> . comando comando PLUS
    (12) exp_aritmeticas -> . comando comando MINUS
    (13) exp_aritmeticas -> . comando comando TIMES
    (14) exp_aritmeticas -> . comando comando DIVIDE
    (15) exp_aritmeticas -> . comando comando MOD
    (16) exp_relacionais -> . comando comando NOT
    (17) exp_relacionais -> . comando comando INF
    (18) exp_relacionais -> . comando comando SUP
    (19) exp_relacionais -> . comando comando INFEQ
    (20) exp_relacionais -> . comando comando SUPEQ
    (33) functions -> . stdout
    (34) functions -> . dot
    (35) functions -> . space
    (36) functions -> . dup
    (37) functions -> . comment
    (38) functions -> . drop
    (39) functions -> . swap
    (40) functions -> . rot
    (41) functions -> . over
    (42) functions -> . concat
    (43) functions -> . cr
    (44) functions -> . emit
    (45) functions -> . char
    (46) functions -> . key
    (47) functions -> . spaces
    (48) functions -> . 2dup
    (21) values -> . NUMBER
    (22) values -> . STRING
    (74) creating_funcs -> . func_criada
    (75) creating_funcs -> . function
    (76) creating_funcs -> . creating_funcs function
    (77) creating_funcs -> . creating_funcs func_criada
    (66) variable -> . variable_definition
    (67) variable -> . variable_assignment
    (68) variable -> . variable_fetch
    (69) variable -> . variable_print
    (23) flow_control -> . if
    (24) flow_control -> . else
    (25) flow_control -> . then
    (26) flow_control -> . do
    (27) flow_control -> . loop
    (49) stdout -> . STDOUT
    (50) dot -> . DOT
    (51) space -> . SPACE
    (52) dup -> . comando DUP
    (53) comment -> . COMMENT_LINE
    (54) comment -> . COMMENT_BLOCK
    (55) drop -> . DROP
    (56) swap -> . SWAP
    (57) rot -> . ROT
    (58) over -> . OVER
    (59) concat -> . CONCAT
    (60) cr -> . CR
    (61) emit -> . EMIT
    (62) char -> . CHAR
    (63) key -> . KEY
    (64) spaces -> . SPACES
    (65) 2dup -> . 2DUP
    (80) func_criada -> . FUNC_BODY
    (78) function -> . FUNCTION
    (79) function -> . FUNCTION_CALL
    (70) variable_definition -> . VARIABLE_DEFENITION
    (71) variable_assignment -> . VARIABLE_ASSIGNMENT
    (72) variable_fetch -> . VARIABLE_FETCH
    (73) variable_print -> . VARIABLE_PRINT
    (28) if -> . IF
    (29) else -> . ELSE
    (30) then -> . THEN
    (31) do -> . DO
    (32) loop -> . LOOP

    NUMBER          shift and go to state 27
    STRING          shift and go to state 28
    STDOUT          shift and go to state 40
    DOT             shift and go to state 41
    SPACE           shift and go to state 42
    COMMENT_LINE    shift and go to state 43
    COMMENT_BLOCK   shift and go to state 44
    DROP            shift and go to state 45
    SWAP            shift and go to state 46
    ROT             shift and go to state 47
    OVER            shift and go to state 48
    CONCAT          shift and go to state 49
    CR              shift and go to state 50
    EMIT            shift and go to state 51
    CHAR            shift and go to state 52
    KEY             shift and go to state 53
    SPACES          shift and go to state 54
    2DUP            shift and go to state 55
    FUNC_BODY       shift and go to state 56
    FUNCTION        shift and go to state 57
    FUNCTION_CALL   shift and go to state 58
    VARIABLE_DEFENITION shift and go to state 59
    VARIABLE_ASSIGNMENT shift and go to state 60
    VARIABLE_FETCH  shift and go to state 61
    VARIABLE_PRINT  shift and go to state 62
    IF              shift and go to state 63
    ELSE            shift and go to state 64
    THEN            shift and go to state 65
    DO              shift and go to state 66
    LOOP            shift and go to state 67

    programa                       shift and go to state 1
    comandos                       shift and go to state 2
    comando                        shift and go to state 3
    exp_aritmeticas                shift and go to state 4
    exp_relacionais                shift and go to state 5
    functions                      shift and go to state 6
    values                         shift and go to state 7
    creating_funcs                 shift and go to state 8
    variable                       shift and go to state 9
    flow_control                   shift and go to state 10
    stdout                         shift and go to state 11
    dot                            shift and go to state 12
    space                          shift and go to state 13
    dup                            shift and go to state 14
    comment                        shift and go to state 15
    drop                           shift and go to state 16
    swap                           shift and go to state 17
    rot                            shift and go to state 18
    over                           shift and go to state 19
    concat                         shift and go to state 20
    cr                             shift and go to state 21
    emit                           shift and go to state 22
    char                           shift and go to state 23
    key                            shift and go to state 24
    spaces                         shift and go to state 25
    2dup                           shift and go to state 26
    func_criada                    shift and go to state 29
    function                       shift and go to state 30
    variable_definition            shift and go to state 31
    variable_assignment            shift and go to state 32
    variable_fetch                 shift and go to state 33
    variable_print                 shift and go to state 34
    if                             shift and go to state 35
    else                           shift and go to state 36
    then                           shift and go to state 37
    do                             shift and go to state 38
    loop                           shift and go to state 39

state 1

    (0) S' -> programa .



state 2

    (1) programa -> comandos .
    (3) comandos -> comandos . comando
    (4) comando -> . exp_aritmeticas
    (5) comando -> . exp_relacionais
    (6) comando -> . functions
    (7) comando -> . values
    (8) comando -> . creating_funcs
    (9) comando -> . variable
    (10) comando -> . flow_control
    (11) exp_aritmeticas -> . comando comando PLUS
    (12) exp_aritmeticas -> . comando comando MINUS
    (13) exp_aritmeticas -> . comando comando TIMES
    (14) exp_aritmeticas -> . comando comando DIVIDE
    (15) exp_aritmeticas -> . comando comando MOD
    (16) exp_relacionais -> . comando comando NOT
    (17) exp_relacionais -> . comando comando INF
    (18) exp_relacionais -> . comando comando SUP
    (19) exp_relacionais -> . comando comando INFEQ
    (20) exp_relacionais -> . comando comando SUPEQ
    (33) functions -> . stdout
    (34) functions -> . dot
    (35) functions -> . space
    (36) functions -> . dup
    (37) functions -> . comment
    (38) functions -> . drop
    (39) functions -> . swap
    (40) functions -> . rot
    (41) functions -> . over
    (42) functions -> . concat
    (43) functions -> . cr
    (44) functions -> . emit
    (45) functions -> . char
    (46) functions -> . key
    (47) functions -> . spaces
    (48) functions -> . 2dup
    (21) values -> . NUMBER
    (22) values -> . STRING
    (74) creating_funcs -> . func_criada
    (75) creating_funcs -> . function
    (76) creating_funcs -> . creating_funcs function
    (77) creating_funcs -> . creating_funcs func_criada
    (66) variable -> . variable_definition
    (67) variable -> . variable_assignment
    (68) variable -> . variable_fetch
    (69) variable -> . variable_print
    (23) flow_control -> . if
    (24) flow_control -> . else
    (25) flow_control -> . then
    (26) flow_control -> . do
    (27) flow_control -> . loop
    (49) stdout -> . STDOUT
    (50) dot -> . DOT
    (51) space -> . SPACE
    (52) dup -> . comando DUP
    (53) comment -> . COMMENT_LINE
    (54) comment -> . COMMENT_BLOCK
    (55) drop -> . DROP
    (56) swap -> . SWAP
    (57) rot -> . ROT
    (58) over -> . OVER
    (59) concat -> . CONCAT
    (60) cr -> . CR
    (61) emit -> . EMIT
    (62) char -> . CHAR
    (63) key -> . KEY
    (64) spaces -> . SPACES
    (65) 2dup -> . 2DUP
    (80) func_criada -> . FUNC_BODY
    (78) function -> . FUNCTION
    (79) function -> . FUNCTION_CALL
    (70) variable_definition -> . VARIABLE_DEFENITION
    (71) variable_assignment -> . VARIABLE_ASSIGNMENT
    (72) variable_fetch -> . VARIABLE_FETCH
    (73) variable_print -> . VARIABLE_PRINT
    (28) if -> . IF
    (29) else -> . ELSE
    (30) then -> . THEN
    (31) do -> . DO
    (32) loop -> . LOOP

    $end            reduce using rule 1 (programa -> comandos .)
    NUMBER          shift and go to state 27
    STRING          shift and go to state 28
    STDOUT          shift and go to state 40
    DOT             shift and go to state 41
    SPACE           shift and go to state 42
    COMMENT_LINE    shift and go to state 43
    COMMENT_BLOCK   shift and go to state 44
    DROP            shift and go to state 45
    SWAP            shift and go to state 46
    ROT             shift and go to state 47
    OVER            shift and go to state 48
    CONCAT          shift and go to state 49
    CR              shift and go to state 50
    EMIT            shift and go to state 51
    CHAR            shift and go to state 52
    KEY             shift and go to state 53
    SPACES          shift and go to state 54
    2DUP            shift and go to state 55
    FUNC_BODY       shift and go to state 56
    FUNCTION        shift and go to state 57
    FUNCTION_CALL   shift and go to state 58
    VARIABLE_DEFENITION shift and go to state 59
    VARIABLE_ASSIGNMENT shift and go to state 60
    VARIABLE_FETCH  shift and go to state 61
    VARIABLE_PRINT  shift and go to state 62
    IF              shift and go to state 63
    ELSE            shift and go to state 64
    THEN            shift and go to state 65
    DO              shift and go to state 66
    LOOP            shift and go to state 67

    comando                        shift and go to state 68
    exp_aritmeticas                shift and go to state 4
    exp_relacionais                shift and go to state 5
    functions                      shift and go to state 6
    values                         shift and go to state 7
    creating_funcs                 shift and go to state 8
    variable                       shift and go to state 9
    flow_control                   shift and go to state 10
    stdout                         shift and go to state 11
    dot                            shift and go to state 12
    space                          shift and go to state 13
    dup                            shift and go to state 14
    comment                        shift and go to state 15
    drop                           shift and go to state 16
    swap                           shift and go to state 17
    rot                            shift and go to state 18
    over                           shift and go to state 19
    concat                         shift and go to state 20
    cr                             shift and go to state 21
    emit                           shift and go to state 22
    char                           shift and go to state 23
    key                            shift and go to state 24
    spaces                         shift and go to state 25
    2dup                           shift and go to state 26
    func_criada                    shift and go to state 29
    function                       shift and go to state 30
    variable_definition            shift and go to state 31
    variable_assignment            shift and go to state 32
    variable_fetch                 shift and go to state 33
    variable_print                 shift and go to state 34
    if                             shift and go to state 35
    else                           shift and go to state 36
    then                           shift and go to state 37
    do                             shift and go to state 38
    loop                           shift and go to state 39

state 3

    (2) comandos -> comando .
    (11) exp_aritmeticas -> comando . comando PLUS
    (12) exp_aritmeticas -> comando . comando MINUS
    (13) exp_aritmeticas -> comando . comando TIMES
    (14) exp_aritmeticas -> comando . comando DIVIDE
    (15) exp_aritmeticas -> comando . comando MOD
    (16) exp_relacionais -> comando . comando NOT
    (17) exp_relacionais -> comando . comando INF
    (18) exp_relacionais -> comando . comando SUP
    (19) exp_relacionais -> comando . comando INFEQ
    (20) exp_relacionais -> comando . comando SUPEQ
    (52) dup -> comando . DUP
    (4) comando -> . exp_aritmeticas
    (5) comando -> . exp_relacionais
    (6) comando -> . functions
    (7) comando -> . values
    (8) comando -> . creating_funcs
    (9) comando -> . variable
    (10) comando -> . flow_control
    (11) exp_aritmeticas -> . comando comando PLUS
    (12) exp_aritmeticas -> . comando comando MINUS
    (13) exp_aritmeticas -> . comando comando TIMES
    (14) exp_aritmeticas -> . comando comando DIVIDE
    (15) exp_aritmeticas -> . comando comando MOD
    (16) exp_relacionais -> . comando comando NOT
    (17) exp_relacionais -> . comando comando INF
    (18) exp_relacionais -> . comando comando SUP
    (19) exp_relacionais -> . comando comando INFEQ
    (20) exp_relacionais -> . comando comando SUPEQ
    (33) functions -> . stdout
    (34) functions -> . dot
    (35) functions -> . space
    (36) functions -> . dup
    (37) functions -> . comment
    (38) functions -> . drop
    (39) functions -> . swap
    (40) functions -> . rot
    (41) functions -> . over
    (42) functions -> . concat
    (43) functions -> . cr
    (44) functions -> . emit
    (45) functions -> . char
    (46) functions -> . key
    (47) functions -> . spaces
    (48) functions -> . 2dup
    (21) values -> . NUMBER
    (22) values -> . STRING
    (74) creating_funcs -> . func_criada
    (75) creating_funcs -> . function
    (76) creating_funcs -> . creating_funcs function
    (77) creating_funcs -> . creating_funcs func_criada
    (66) variable -> . variable_definition
    (67) variable -> . variable_assignment
    (68) variable -> . variable_fetch
    (69) variable -> . variable_print
    (23) flow_control -> . if
    (24) flow_control -> . else
    (25) flow_control -> . then
    (26) flow_control -> . do
    (27) flow_control -> . loop
    (49) stdout -> . STDOUT
    (50) dot -> . DOT
    (51) space -> . SPACE
    (52) dup -> . comando DUP
    (53) comment -> . COMMENT_LINE
    (54) comment -> . COMMENT_BLOCK
    (55) drop -> . DROP
    (56) swap -> . SWAP
    (57) rot -> . ROT
    (58) over -> . OVER
    (59) concat -> . CONCAT
    (60) cr -> . CR
    (61) emit -> . EMIT
    (62) char -> . CHAR
    (63) key -> . KEY
    (64) spaces -> . SPACES
    (65) 2dup -> . 2DUP
    (80) func_criada -> . FUNC_BODY
    (78) function -> . FUNCTION
    (79) function -> . FUNCTION_CALL
    (70) variable_definition -> . VARIABLE_DEFENITION
    (71) variable_assignment -> . VARIABLE_ASSIGNMENT
    (72) variable_fetch -> . VARIABLE_FETCH
    (73) variable_print -> . VARIABLE_PRINT
    (28) if -> . IF
    (29) else -> . ELSE
    (30) then -> . THEN
    (31) do -> . DO
    (32) loop -> . LOOP

  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for STDOUT resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for SPACE resolved as shift
  ! shift/reduce conflict for COMMENT_LINE resolved as shift
  ! shift/reduce conflict for COMMENT_BLOCK resolved as shift
  ! shift/reduce conflict for DROP resolved as shift
  ! shift/reduce conflict for SWAP resolved as shift
  ! shift/reduce conflict for ROT resolved as shift
  ! shift/reduce conflict for OVER resolved as shift
  ! shift/reduce conflict for CONCAT resolved as shift
  ! shift/reduce conflict for CR resolved as shift
  ! shift/reduce conflict for EMIT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for KEY resolved as shift
  ! shift/reduce conflict for SPACES resolved as shift
  ! shift/reduce conflict for 2DUP resolved as shift
  ! shift/reduce conflict for FUNC_BODY resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for FUNCTION_CALL resolved as shift
  ! shift/reduce conflict for VARIABLE_DEFENITION resolved as shift
  ! shift/reduce conflict for VARIABLE_ASSIGNMENT resolved as shift
  ! shift/reduce conflict for VARIABLE_FETCH resolved as shift
  ! shift/reduce conflict for VARIABLE_PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for THEN resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for LOOP resolved as shift
    $end            reduce using rule 2 (comandos -> comando .)
    DUP             shift and go to state 70
    NUMBER          shift and go to state 27
    STRING          shift and go to state 28
    STDOUT          shift and go to state 40
    DOT             shift and go to state 41
    SPACE           shift and go to state 42
    COMMENT_LINE    shift and go to state 43
    COMMENT_BLOCK   shift and go to state 44
    DROP            shift and go to state 45
    SWAP            shift and go to state 46
    ROT             shift and go to state 47
    OVER            shift and go to state 48
    CONCAT          shift and go to state 49
    CR              shift and go to state 50
    EMIT            shift and go to state 51
    CHAR            shift and go to state 52
    KEY             shift and go to state 53
    SPACES          shift and go to state 54
    2DUP            shift and go to state 55
    FUNC_BODY       shift and go to state 56
    FUNCTION        shift and go to state 57
    FUNCTION_CALL   shift and go to state 58
    VARIABLE_DEFENITION shift and go to state 59
    VARIABLE_ASSIGNMENT shift and go to state 60
    VARIABLE_FETCH  shift and go to state 61
    VARIABLE_PRINT  shift and go to state 62
    IF              shift and go to state 63
    ELSE            shift and go to state 64
    THEN            shift and go to state 65
    DO              shift and go to state 66
    LOOP            shift and go to state 67

  ! NUMBER          [ reduce using rule 2 (comandos -> comando .) ]
  ! STRING          [ reduce using rule 2 (comandos -> comando .) ]
  ! STDOUT          [ reduce using rule 2 (comandos -> comando .) ]
  ! DOT             [ reduce using rule 2 (comandos -> comando .) ]
  ! SPACE           [ reduce using rule 2 (comandos -> comando .) ]
  ! COMMENT_LINE    [ reduce using rule 2 (comandos -> comando .) ]
  ! COMMENT_BLOCK   [ reduce using rule 2 (comandos -> comando .) ]
  ! DROP            [ reduce using rule 2 (comandos -> comando .) ]
  ! SWAP            [ reduce using rule 2 (comandos -> comando .) ]
  ! ROT             [ reduce using rule 2 (comandos -> comando .) ]
  ! OVER            [ reduce using rule 2 (comandos -> comando .) ]
  ! CONCAT          [ reduce using rule 2 (comandos -> comando .) ]
  ! CR              [ reduce using rule 2 (comandos -> comando .) ]
  ! EMIT            [ reduce using rule 2 (comandos -> comando .) ]
  ! CHAR            [ reduce using rule 2 (comandos -> comando .) ]
  ! KEY             [ reduce using rule 2 (comandos -> comando .) ]
  ! SPACES          [ reduce using rule 2 (comandos -> comando .) ]
  ! 2DUP            [ reduce using rule 2 (comandos -> comando .) ]
  ! FUNC_BODY       [ reduce using rule 2 (comandos -> comando .) ]
  ! FUNCTION        [ reduce using rule 2 (comandos -> comando .) ]
  ! FUNCTION_CALL   [ reduce using rule 2 (comandos -> comando .) ]
  ! VARIABLE_DEFENITION [ reduce using rule 2 (comandos -> comando .) ]
  ! VARIABLE_ASSIGNMENT [ reduce using rule 2 (comandos -> comando .) ]
  ! VARIABLE_FETCH  [ reduce using rule 2 (comandos -> comando .) ]
  ! VARIABLE_PRINT  [ reduce using rule 2 (comandos -> comando .) ]
  ! IF              [ reduce using rule 2 (comandos -> comando .) ]
  ! ELSE            [ reduce using rule 2 (comandos -> comando .) ]
  ! THEN            [ reduce using rule 2 (comandos -> comando .) ]
  ! DO              [ reduce using rule 2 (comandos -> comando .) ]
  ! LOOP            [ reduce using rule 2 (comandos -> comando .) ]

    comando                        shift and go to state 69
    exp_aritmeticas                shift and go to state 4
    exp_relacionais                shift and go to state 5
    functions                      shift and go to state 6
    values                         shift and go to state 7
    creating_funcs                 shift and go to state 8
    variable                       shift and go to state 9
    flow_control                   shift and go to state 10
    stdout                         shift and go to state 11
    dot                            shift and go to state 12
    space                          shift and go to state 13
    dup                            shift and go to state 14
    comment                        shift and go to state 15
    drop                           shift and go to state 16
    swap                           shift and go to state 17
    rot                            shift and go to state 18
    over                           shift and go to state 19
    concat                         shift and go to state 20
    cr                             shift and go to state 21
    emit                           shift and go to state 22
    char                           shift and go to state 23
    key                            shift and go to state 24
    spaces                         shift and go to state 25
    2dup                           shift and go to state 26
    func_criada                    shift and go to state 29
    function                       shift and go to state 30
    variable_definition            shift and go to state 31
    variable_assignment            shift and go to state 32
    variable_fetch                 shift and go to state 33
    variable_print                 shift and go to state 34
    if                             shift and go to state 35
    else                           shift and go to state 36
    then                           shift and go to state 37
    do                             shift and go to state 38
    loop                           shift and go to state 39

state 4

    (4) comando -> exp_aritmeticas .

    DUP             reduce using rule 4 (comando -> exp_aritmeticas .)
    NUMBER          reduce using rule 4 (comando -> exp_aritmeticas .)
    STRING          reduce using rule 4 (comando -> exp_aritmeticas .)
    STDOUT          reduce using rule 4 (comando -> exp_aritmeticas .)
    DOT             reduce using rule 4 (comando -> exp_aritmeticas .)
    SPACE           reduce using rule 4 (comando -> exp_aritmeticas .)
    COMMENT_LINE    reduce using rule 4 (comando -> exp_aritmeticas .)
    COMMENT_BLOCK   reduce using rule 4 (comando -> exp_aritmeticas .)
    DROP            reduce using rule 4 (comando -> exp_aritmeticas .)
    SWAP            reduce using rule 4 (comando -> exp_aritmeticas .)
    ROT             reduce using rule 4 (comando -> exp_aritmeticas .)
    OVER            reduce using rule 4 (comando -> exp_aritmeticas .)
    CONCAT          reduce using rule 4 (comando -> exp_aritmeticas .)
    CR              reduce using rule 4 (comando -> exp_aritmeticas .)
    EMIT            reduce using rule 4 (comando -> exp_aritmeticas .)
    CHAR            reduce using rule 4 (comando -> exp_aritmeticas .)
    KEY             reduce using rule 4 (comando -> exp_aritmeticas .)
    SPACES          reduce using rule 4 (comando -> exp_aritmeticas .)
    2DUP            reduce using rule 4 (comando -> exp_aritmeticas .)
    FUNC_BODY       reduce using rule 4 (comando -> exp_aritmeticas .)
    FUNCTION        reduce using rule 4 (comando -> exp_aritmeticas .)
    FUNCTION_CALL   reduce using rule 4 (comando -> exp_aritmeticas .)
    VARIABLE_DEFENITION reduce using rule 4 (comando -> exp_aritmeticas .)
    VARIABLE_ASSIGNMENT reduce using rule 4 (comando -> exp_aritmeticas .)
    VARIABLE_FETCH  reduce using rule 4 (comando -> exp_aritmeticas .)
    VARIABLE_PRINT  reduce using rule 4 (comando -> exp_aritmeticas .)
    IF              reduce using rule 4 (comando -> exp_aritmeticas .)
    ELSE            reduce using rule 4 (comando -> exp_aritmeticas .)
    THEN            reduce using rule 4 (comando -> exp_aritmeticas .)
    DO              reduce using rule 4 (comando -> exp_aritmeticas .)
    LOOP            reduce using rule 4 (comando -> exp_aritmeticas .)
    $end            reduce using rule 4 (comando -> exp_aritmeticas .)
    PLUS            reduce using rule 4 (comando -> exp_aritmeticas .)
    MINUS           reduce using rule 4 (comando -> exp_aritmeticas .)
    TIMES           reduce using rule 4 (comando -> exp_aritmeticas .)
    DIVIDE          reduce using rule 4 (comando -> exp_aritmeticas .)
    MOD             reduce using rule 4 (comando -> exp_aritmeticas .)
    NOT             reduce using rule 4 (comando -> exp_aritmeticas .)
    INF             reduce using rule 4 (comando -> exp_aritmeticas .)
    SUP             reduce using rule 4 (comando -> exp_aritmeticas .)
    INFEQ           reduce using rule 4 (comando -> exp_aritmeticas .)
    SUPEQ           reduce using rule 4 (comando -> exp_aritmeticas .)


state 5

    (5) comando -> exp_relacionais .

    DUP             reduce using rule 5 (comando -> exp_relacionais .)
    NUMBER          reduce using rule 5 (comando -> exp_relacionais .)
    STRING          reduce using rule 5 (comando -> exp_relacionais .)
    STDOUT          reduce using rule 5 (comando -> exp_relacionais .)
    DOT             reduce using rule 5 (comando -> exp_relacionais .)
    SPACE           reduce using rule 5 (comando -> exp_relacionais .)
    COMMENT_LINE    reduce using rule 5 (comando -> exp_relacionais .)
    COMMENT_BLOCK   reduce using rule 5 (comando -> exp_relacionais .)
    DROP            reduce using rule 5 (comando -> exp_relacionais .)
    SWAP            reduce using rule 5 (comando -> exp_relacionais .)
    ROT             reduce using rule 5 (comando -> exp_relacionais .)
    OVER            reduce using rule 5 (comando -> exp_relacionais .)
    CONCAT          reduce using rule 5 (comando -> exp_relacionais .)
    CR              reduce using rule 5 (comando -> exp_relacionais .)
    EMIT            reduce using rule 5 (comando -> exp_relacionais .)
    CHAR            reduce using rule 5 (comando -> exp_relacionais .)
    KEY             reduce using rule 5 (comando -> exp_relacionais .)
    SPACES          reduce using rule 5 (comando -> exp_relacionais .)
    2DUP            reduce using rule 5 (comando -> exp_relacionais .)
    FUNC_BODY       reduce using rule 5 (comando -> exp_relacionais .)
    FUNCTION        reduce using rule 5 (comando -> exp_relacionais .)
    FUNCTION_CALL   reduce using rule 5 (comando -> exp_relacionais .)
    VARIABLE_DEFENITION reduce using rule 5 (comando -> exp_relacionais .)
    VARIABLE_ASSIGNMENT reduce using rule 5 (comando -> exp_relacionais .)
    VARIABLE_FETCH  reduce using rule 5 (comando -> exp_relacionais .)
    VARIABLE_PRINT  reduce using rule 5 (comando -> exp_relacionais .)
    IF              reduce using rule 5 (comando -> exp_relacionais .)
    ELSE            reduce using rule 5 (comando -> exp_relacionais .)
    THEN            reduce using rule 5 (comando -> exp_relacionais .)
    DO              reduce using rule 5 (comando -> exp_relacionais .)
    LOOP            reduce using rule 5 (comando -> exp_relacionais .)
    $end            reduce using rule 5 (comando -> exp_relacionais .)
    PLUS            reduce using rule 5 (comando -> exp_relacionais .)
    MINUS           reduce using rule 5 (comando -> exp_relacionais .)
    TIMES           reduce using rule 5 (comando -> exp_relacionais .)
    DIVIDE          reduce using rule 5 (comando -> exp_relacionais .)
    MOD             reduce using rule 5 (comando -> exp_relacionais .)
    NOT             reduce using rule 5 (comando -> exp_relacionais .)
    INF             reduce using rule 5 (comando -> exp_relacionais .)
    SUP             reduce using rule 5 (comando -> exp_relacionais .)
    INFEQ           reduce using rule 5 (comando -> exp_relacionais .)
    SUPEQ           reduce using rule 5 (comando -> exp_relacionais .)


state 6

    (6) comando -> functions .

    DUP             reduce using rule 6 (comando -> functions .)
    NUMBER          reduce using rule 6 (comando -> functions .)
    STRING          reduce using rule 6 (comando -> functions .)
    STDOUT          reduce using rule 6 (comando -> functions .)
    DOT             reduce using rule 6 (comando -> functions .)
    SPACE           reduce using rule 6 (comando -> functions .)
    COMMENT_LINE    reduce using rule 6 (comando -> functions .)
    COMMENT_BLOCK   reduce using rule 6 (comando -> functions .)
    DROP            reduce using rule 6 (comando -> functions .)
    SWAP            reduce using rule 6 (comando -> functions .)
    ROT             reduce using rule 6 (comando -> functions .)
    OVER            reduce using rule 6 (comando -> functions .)
    CONCAT          reduce using rule 6 (comando -> functions .)
    CR              reduce using rule 6 (comando -> functions .)
    EMIT            reduce using rule 6 (comando -> functions .)
    CHAR            reduce using rule 6 (comando -> functions .)
    KEY             reduce using rule 6 (comando -> functions .)
    SPACES          reduce using rule 6 (comando -> functions .)
    2DUP            reduce using rule 6 (comando -> functions .)
    FUNC_BODY       reduce using rule 6 (comando -> functions .)
    FUNCTION        reduce using rule 6 (comando -> functions .)
    FUNCTION_CALL   reduce using rule 6 (comando -> functions .)
    VARIABLE_DEFENITION reduce using rule 6 (comando -> functions .)
    VARIABLE_ASSIGNMENT reduce using rule 6 (comando -> functions .)
    VARIABLE_FETCH  reduce using rule 6 (comando -> functions .)
    VARIABLE_PRINT  reduce using rule 6 (comando -> functions .)
    IF              reduce using rule 6 (comando -> functions .)
    ELSE            reduce using rule 6 (comando -> functions .)
    THEN            reduce using rule 6 (comando -> functions .)
    DO              reduce using rule 6 (comando -> functions .)
    LOOP            reduce using rule 6 (comando -> functions .)
    $end            reduce using rule 6 (comando -> functions .)
    PLUS            reduce using rule 6 (comando -> functions .)
    MINUS           reduce using rule 6 (comando -> functions .)
    TIMES           reduce using rule 6 (comando -> functions .)
    DIVIDE          reduce using rule 6 (comando -> functions .)
    MOD             reduce using rule 6 (comando -> functions .)
    NOT             reduce using rule 6 (comando -> functions .)
    INF             reduce using rule 6 (comando -> functions .)
    SUP             reduce using rule 6 (comando -> functions .)
    INFEQ           reduce using rule 6 (comando -> functions .)
    SUPEQ           reduce using rule 6 (comando -> functions .)


state 7

    (7) comando -> values .

    DUP             reduce using rule 7 (comando -> values .)
    NUMBER          reduce using rule 7 (comando -> values .)
    STRING          reduce using rule 7 (comando -> values .)
    STDOUT          reduce using rule 7 (comando -> values .)
    DOT             reduce using rule 7 (comando -> values .)
    SPACE           reduce using rule 7 (comando -> values .)
    COMMENT_LINE    reduce using rule 7 (comando -> values .)
    COMMENT_BLOCK   reduce using rule 7 (comando -> values .)
    DROP            reduce using rule 7 (comando -> values .)
    SWAP            reduce using rule 7 (comando -> values .)
    ROT             reduce using rule 7 (comando -> values .)
    OVER            reduce using rule 7 (comando -> values .)
    CONCAT          reduce using rule 7 (comando -> values .)
    CR              reduce using rule 7 (comando -> values .)
    EMIT            reduce using rule 7 (comando -> values .)
    CHAR            reduce using rule 7 (comando -> values .)
    KEY             reduce using rule 7 (comando -> values .)
    SPACES          reduce using rule 7 (comando -> values .)
    2DUP            reduce using rule 7 (comando -> values .)
    FUNC_BODY       reduce using rule 7 (comando -> values .)
    FUNCTION        reduce using rule 7 (comando -> values .)
    FUNCTION_CALL   reduce using rule 7 (comando -> values .)
    VARIABLE_DEFENITION reduce using rule 7 (comando -> values .)
    VARIABLE_ASSIGNMENT reduce using rule 7 (comando -> values .)
    VARIABLE_FETCH  reduce using rule 7 (comando -> values .)
    VARIABLE_PRINT  reduce using rule 7 (comando -> values .)
    IF              reduce using rule 7 (comando -> values .)
    ELSE            reduce using rule 7 (comando -> values .)
    THEN            reduce using rule 7 (comando -> values .)
    DO              reduce using rule 7 (comando -> values .)
    LOOP            reduce using rule 7 (comando -> values .)
    $end            reduce using rule 7 (comando -> values .)
    PLUS            reduce using rule 7 (comando -> values .)
    MINUS           reduce using rule 7 (comando -> values .)
    TIMES           reduce using rule 7 (comando -> values .)
    DIVIDE          reduce using rule 7 (comando -> values .)
    MOD             reduce using rule 7 (comando -> values .)
    NOT             reduce using rule 7 (comando -> values .)
    INF             reduce using rule 7 (comando -> values .)
    SUP             reduce using rule 7 (comando -> values .)
    INFEQ           reduce using rule 7 (comando -> values .)
    SUPEQ           reduce using rule 7 (comando -> values .)


state 8

    (8) comando -> creating_funcs .
    (76) creating_funcs -> creating_funcs . function
    (77) creating_funcs -> creating_funcs . func_criada
    (78) function -> . FUNCTION
    (79) function -> . FUNCTION_CALL
    (80) func_criada -> . FUNC_BODY

  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for FUNCTION_CALL resolved as shift
  ! shift/reduce conflict for FUNC_BODY resolved as shift
    DUP             reduce using rule 8 (comando -> creating_funcs .)
    NUMBER          reduce using rule 8 (comando -> creating_funcs .)
    STRING          reduce using rule 8 (comando -> creating_funcs .)
    STDOUT          reduce using rule 8 (comando -> creating_funcs .)
    DOT             reduce using rule 8 (comando -> creating_funcs .)
    SPACE           reduce using rule 8 (comando -> creating_funcs .)
    COMMENT_LINE    reduce using rule 8 (comando -> creating_funcs .)
    COMMENT_BLOCK   reduce using rule 8 (comando -> creating_funcs .)
    DROP            reduce using rule 8 (comando -> creating_funcs .)
    SWAP            reduce using rule 8 (comando -> creating_funcs .)
    ROT             reduce using rule 8 (comando -> creating_funcs .)
    OVER            reduce using rule 8 (comando -> creating_funcs .)
    CONCAT          reduce using rule 8 (comando -> creating_funcs .)
    CR              reduce using rule 8 (comando -> creating_funcs .)
    EMIT            reduce using rule 8 (comando -> creating_funcs .)
    CHAR            reduce using rule 8 (comando -> creating_funcs .)
    KEY             reduce using rule 8 (comando -> creating_funcs .)
    SPACES          reduce using rule 8 (comando -> creating_funcs .)
    2DUP            reduce using rule 8 (comando -> creating_funcs .)
    VARIABLE_DEFENITION reduce using rule 8 (comando -> creating_funcs .)
    VARIABLE_ASSIGNMENT reduce using rule 8 (comando -> creating_funcs .)
    VARIABLE_FETCH  reduce using rule 8 (comando -> creating_funcs .)
    VARIABLE_PRINT  reduce using rule 8 (comando -> creating_funcs .)
    IF              reduce using rule 8 (comando -> creating_funcs .)
    ELSE            reduce using rule 8 (comando -> creating_funcs .)
    THEN            reduce using rule 8 (comando -> creating_funcs .)
    DO              reduce using rule 8 (comando -> creating_funcs .)
    LOOP            reduce using rule 8 (comando -> creating_funcs .)
    $end            reduce using rule 8 (comando -> creating_funcs .)
    PLUS            reduce using rule 8 (comando -> creating_funcs .)
    MINUS           reduce using rule 8 (comando -> creating_funcs .)
    TIMES           reduce using rule 8 (comando -> creating_funcs .)
    DIVIDE          reduce using rule 8 (comando -> creating_funcs .)
    MOD             reduce using rule 8 (comando -> creating_funcs .)
    NOT             reduce using rule 8 (comando -> creating_funcs .)
    INF             reduce using rule 8 (comando -> creating_funcs .)
    SUP             reduce using rule 8 (comando -> creating_funcs .)
    INFEQ           reduce using rule 8 (comando -> creating_funcs .)
    SUPEQ           reduce using rule 8 (comando -> creating_funcs .)
    FUNCTION        shift and go to state 57
    FUNCTION_CALL   shift and go to state 58
    FUNC_BODY       shift and go to state 56

  ! FUNC_BODY       [ reduce using rule 8 (comando -> creating_funcs .) ]
  ! FUNCTION        [ reduce using rule 8 (comando -> creating_funcs .) ]
  ! FUNCTION_CALL   [ reduce using rule 8 (comando -> creating_funcs .) ]

    function                       shift and go to state 71
    func_criada                    shift and go to state 72

state 9

    (9) comando -> variable .

    DUP             reduce using rule 9 (comando -> variable .)
    NUMBER          reduce using rule 9 (comando -> variable .)
    STRING          reduce using rule 9 (comando -> variable .)
    STDOUT          reduce using rule 9 (comando -> variable .)
    DOT             reduce using rule 9 (comando -> variable .)
    SPACE           reduce using rule 9 (comando -> variable .)
    COMMENT_LINE    reduce using rule 9 (comando -> variable .)
    COMMENT_BLOCK   reduce using rule 9 (comando -> variable .)
    DROP            reduce using rule 9 (comando -> variable .)
    SWAP            reduce using rule 9 (comando -> variable .)
    ROT             reduce using rule 9 (comando -> variable .)
    OVER            reduce using rule 9 (comando -> variable .)
    CONCAT          reduce using rule 9 (comando -> variable .)
    CR              reduce using rule 9 (comando -> variable .)
    EMIT            reduce using rule 9 (comando -> variable .)
    CHAR            reduce using rule 9 (comando -> variable .)
    KEY             reduce using rule 9 (comando -> variable .)
    SPACES          reduce using rule 9 (comando -> variable .)
    2DUP            reduce using rule 9 (comando -> variable .)
    FUNC_BODY       reduce using rule 9 (comando -> variable .)
    FUNCTION        reduce using rule 9 (comando -> variable .)
    FUNCTION_CALL   reduce using rule 9 (comando -> variable .)
    VARIABLE_DEFENITION reduce using rule 9 (comando -> variable .)
    VARIABLE_ASSIGNMENT reduce using rule 9 (comando -> variable .)
    VARIABLE_FETCH  reduce using rule 9 (comando -> variable .)
    VARIABLE_PRINT  reduce using rule 9 (comando -> variable .)
    IF              reduce using rule 9 (comando -> variable .)
    ELSE            reduce using rule 9 (comando -> variable .)
    THEN            reduce using rule 9 (comando -> variable .)
    DO              reduce using rule 9 (comando -> variable .)
    LOOP            reduce using rule 9 (comando -> variable .)
    $end            reduce using rule 9 (comando -> variable .)
    PLUS            reduce using rule 9 (comando -> variable .)
    MINUS           reduce using rule 9 (comando -> variable .)
    TIMES           reduce using rule 9 (comando -> variable .)
    DIVIDE          reduce using rule 9 (comando -> variable .)
    MOD             reduce using rule 9 (comando -> variable .)
    NOT             reduce using rule 9 (comando -> variable .)
    INF             reduce using rule 9 (comando -> variable .)
    SUP             reduce using rule 9 (comando -> variable .)
    INFEQ           reduce using rule 9 (comando -> variable .)
    SUPEQ           reduce using rule 9 (comando -> variable .)


state 10

    (10) comando -> flow_control .

    DUP             reduce using rule 10 (comando -> flow_control .)
    NUMBER          reduce using rule 10 (comando -> flow_control .)
    STRING          reduce using rule 10 (comando -> flow_control .)
    STDOUT          reduce using rule 10 (comando -> flow_control .)
    DOT             reduce using rule 10 (comando -> flow_control .)
    SPACE           reduce using rule 10 (comando -> flow_control .)
    COMMENT_LINE    reduce using rule 10 (comando -> flow_control .)
    COMMENT_BLOCK   reduce using rule 10 (comando -> flow_control .)
    DROP            reduce using rule 10 (comando -> flow_control .)
    SWAP            reduce using rule 10 (comando -> flow_control .)
    ROT             reduce using rule 10 (comando -> flow_control .)
    OVER            reduce using rule 10 (comando -> flow_control .)
    CONCAT          reduce using rule 10 (comando -> flow_control .)
    CR              reduce using rule 10 (comando -> flow_control .)
    EMIT            reduce using rule 10 (comando -> flow_control .)
    CHAR            reduce using rule 10 (comando -> flow_control .)
    KEY             reduce using rule 10 (comando -> flow_control .)
    SPACES          reduce using rule 10 (comando -> flow_control .)
    2DUP            reduce using rule 10 (comando -> flow_control .)
    FUNC_BODY       reduce using rule 10 (comando -> flow_control .)
    FUNCTION        reduce using rule 10 (comando -> flow_control .)
    FUNCTION_CALL   reduce using rule 10 (comando -> flow_control .)
    VARIABLE_DEFENITION reduce using rule 10 (comando -> flow_control .)
    VARIABLE_ASSIGNMENT reduce using rule 10 (comando -> flow_control .)
    VARIABLE_FETCH  reduce using rule 10 (comando -> flow_control .)
    VARIABLE_PRINT  reduce using rule 10 (comando -> flow_control .)
    IF              reduce using rule 10 (comando -> flow_control .)
    ELSE            reduce using rule 10 (comando -> flow_control .)
    THEN            reduce using rule 10 (comando -> flow_control .)
    DO              reduce using rule 10 (comando -> flow_control .)
    LOOP            reduce using rule 10 (comando -> flow_control .)
    $end            reduce using rule 10 (comando -> flow_control .)
    PLUS            reduce using rule 10 (comando -> flow_control .)
    MINUS           reduce using rule 10 (comando -> flow_control .)
    TIMES           reduce using rule 10 (comando -> flow_control .)
    DIVIDE          reduce using rule 10 (comando -> flow_control .)
    MOD             reduce using rule 10 (comando -> flow_control .)
    NOT             reduce using rule 10 (comando -> flow_control .)
    INF             reduce using rule 10 (comando -> flow_control .)
    SUP             reduce using rule 10 (comando -> flow_control .)
    INFEQ           reduce using rule 10 (comando -> flow_control .)
    SUPEQ           reduce using rule 10 (comando -> flow_control .)


state 11

    (33) functions -> stdout .

    DUP             reduce using rule 33 (functions -> stdout .)
    NUMBER          reduce using rule 33 (functions -> stdout .)
    STRING          reduce using rule 33 (functions -> stdout .)
    STDOUT          reduce using rule 33 (functions -> stdout .)
    DOT             reduce using rule 33 (functions -> stdout .)
    SPACE           reduce using rule 33 (functions -> stdout .)
    COMMENT_LINE    reduce using rule 33 (functions -> stdout .)
    COMMENT_BLOCK   reduce using rule 33 (functions -> stdout .)
    DROP            reduce using rule 33 (functions -> stdout .)
    SWAP            reduce using rule 33 (functions -> stdout .)
    ROT             reduce using rule 33 (functions -> stdout .)
    OVER            reduce using rule 33 (functions -> stdout .)
    CONCAT          reduce using rule 33 (functions -> stdout .)
    CR              reduce using rule 33 (functions -> stdout .)
    EMIT            reduce using rule 33 (functions -> stdout .)
    CHAR            reduce using rule 33 (functions -> stdout .)
    KEY             reduce using rule 33 (functions -> stdout .)
    SPACES          reduce using rule 33 (functions -> stdout .)
    2DUP            reduce using rule 33 (functions -> stdout .)
    FUNC_BODY       reduce using rule 33 (functions -> stdout .)
    FUNCTION        reduce using rule 33 (functions -> stdout .)
    FUNCTION_CALL   reduce using rule 33 (functions -> stdout .)
    VARIABLE_DEFENITION reduce using rule 33 (functions -> stdout .)
    VARIABLE_ASSIGNMENT reduce using rule 33 (functions -> stdout .)
    VARIABLE_FETCH  reduce using rule 33 (functions -> stdout .)
    VARIABLE_PRINT  reduce using rule 33 (functions -> stdout .)
    IF              reduce using rule 33 (functions -> stdout .)
    ELSE            reduce using rule 33 (functions -> stdout .)
    THEN            reduce using rule 33 (functions -> stdout .)
    DO              reduce using rule 33 (functions -> stdout .)
    LOOP            reduce using rule 33 (functions -> stdout .)
    $end            reduce using rule 33 (functions -> stdout .)
    PLUS            reduce using rule 33 (functions -> stdout .)
    MINUS           reduce using rule 33 (functions -> stdout .)
    TIMES           reduce using rule 33 (functions -> stdout .)
    DIVIDE          reduce using rule 33 (functions -> stdout .)
    MOD             reduce using rule 33 (functions -> stdout .)
    NOT             reduce using rule 33 (functions -> stdout .)
    INF             reduce using rule 33 (functions -> stdout .)
    SUP             reduce using rule 33 (functions -> stdout .)
    INFEQ           reduce using rule 33 (functions -> stdout .)
    SUPEQ           reduce using rule 33 (functions -> stdout .)


state 12

    (34) functions -> dot .

    DUP             reduce using rule 34 (functions -> dot .)
    NUMBER          reduce using rule 34 (functions -> dot .)
    STRING          reduce using rule 34 (functions -> dot .)
    STDOUT          reduce using rule 34 (functions -> dot .)
    DOT             reduce using rule 34 (functions -> dot .)
    SPACE           reduce using rule 34 (functions -> dot .)
    COMMENT_LINE    reduce using rule 34 (functions -> dot .)
    COMMENT_BLOCK   reduce using rule 34 (functions -> dot .)
    DROP            reduce using rule 34 (functions -> dot .)
    SWAP            reduce using rule 34 (functions -> dot .)
    ROT             reduce using rule 34 (functions -> dot .)
    OVER            reduce using rule 34 (functions -> dot .)
    CONCAT          reduce using rule 34 (functions -> dot .)
    CR              reduce using rule 34 (functions -> dot .)
    EMIT            reduce using rule 34 (functions -> dot .)
    CHAR            reduce using rule 34 (functions -> dot .)
    KEY             reduce using rule 34 (functions -> dot .)
    SPACES          reduce using rule 34 (functions -> dot .)
    2DUP            reduce using rule 34 (functions -> dot .)
    FUNC_BODY       reduce using rule 34 (functions -> dot .)
    FUNCTION        reduce using rule 34 (functions -> dot .)
    FUNCTION_CALL   reduce using rule 34 (functions -> dot .)
    VARIABLE_DEFENITION reduce using rule 34 (functions -> dot .)
    VARIABLE_ASSIGNMENT reduce using rule 34 (functions -> dot .)
    VARIABLE_FETCH  reduce using rule 34 (functions -> dot .)
    VARIABLE_PRINT  reduce using rule 34 (functions -> dot .)
    IF              reduce using rule 34 (functions -> dot .)
    ELSE            reduce using rule 34 (functions -> dot .)
    THEN            reduce using rule 34 (functions -> dot .)
    DO              reduce using rule 34 (functions -> dot .)
    LOOP            reduce using rule 34 (functions -> dot .)
    $end            reduce using rule 34 (functions -> dot .)
    PLUS            reduce using rule 34 (functions -> dot .)
    MINUS           reduce using rule 34 (functions -> dot .)
    TIMES           reduce using rule 34 (functions -> dot .)
    DIVIDE          reduce using rule 34 (functions -> dot .)
    MOD             reduce using rule 34 (functions -> dot .)
    NOT             reduce using rule 34 (functions -> dot .)
    INF             reduce using rule 34 (functions -> dot .)
    SUP             reduce using rule 34 (functions -> dot .)
    INFEQ           reduce using rule 34 (functions -> dot .)
    SUPEQ           reduce using rule 34 (functions -> dot .)


state 13

    (35) functions -> space .

    DUP             reduce using rule 35 (functions -> space .)
    NUMBER          reduce using rule 35 (functions -> space .)
    STRING          reduce using rule 35 (functions -> space .)
    STDOUT          reduce using rule 35 (functions -> space .)
    DOT             reduce using rule 35 (functions -> space .)
    SPACE           reduce using rule 35 (functions -> space .)
    COMMENT_LINE    reduce using rule 35 (functions -> space .)
    COMMENT_BLOCK   reduce using rule 35 (functions -> space .)
    DROP            reduce using rule 35 (functions -> space .)
    SWAP            reduce using rule 35 (functions -> space .)
    ROT             reduce using rule 35 (functions -> space .)
    OVER            reduce using rule 35 (functions -> space .)
    CONCAT          reduce using rule 35 (functions -> space .)
    CR              reduce using rule 35 (functions -> space .)
    EMIT            reduce using rule 35 (functions -> space .)
    CHAR            reduce using rule 35 (functions -> space .)
    KEY             reduce using rule 35 (functions -> space .)
    SPACES          reduce using rule 35 (functions -> space .)
    2DUP            reduce using rule 35 (functions -> space .)
    FUNC_BODY       reduce using rule 35 (functions -> space .)
    FUNCTION        reduce using rule 35 (functions -> space .)
    FUNCTION_CALL   reduce using rule 35 (functions -> space .)
    VARIABLE_DEFENITION reduce using rule 35 (functions -> space .)
    VARIABLE_ASSIGNMENT reduce using rule 35 (functions -> space .)
    VARIABLE_FETCH  reduce using rule 35 (functions -> space .)
    VARIABLE_PRINT  reduce using rule 35 (functions -> space .)
    IF              reduce using rule 35 (functions -> space .)
    ELSE            reduce using rule 35 (functions -> space .)
    THEN            reduce using rule 35 (functions -> space .)
    DO              reduce using rule 35 (functions -> space .)
    LOOP            reduce using rule 35 (functions -> space .)
    $end            reduce using rule 35 (functions -> space .)
    PLUS            reduce using rule 35 (functions -> space .)
    MINUS           reduce using rule 35 (functions -> space .)
    TIMES           reduce using rule 35 (functions -> space .)
    DIVIDE          reduce using rule 35 (functions -> space .)
    MOD             reduce using rule 35 (functions -> space .)
    NOT             reduce using rule 35 (functions -> space .)
    INF             reduce using rule 35 (functions -> space .)
    SUP             reduce using rule 35 (functions -> space .)
    INFEQ           reduce using rule 35 (functions -> space .)
    SUPEQ           reduce using rule 35 (functions -> space .)


state 14

    (36) functions -> dup .

    DUP             reduce using rule 36 (functions -> dup .)
    NUMBER          reduce using rule 36 (functions -> dup .)
    STRING          reduce using rule 36 (functions -> dup .)
    STDOUT          reduce using rule 36 (functions -> dup .)
    DOT             reduce using rule 36 (functions -> dup .)
    SPACE           reduce using rule 36 (functions -> dup .)
    COMMENT_LINE    reduce using rule 36 (functions -> dup .)
    COMMENT_BLOCK   reduce using rule 36 (functions -> dup .)
    DROP            reduce using rule 36 (functions -> dup .)
    SWAP            reduce using rule 36 (functions -> dup .)
    ROT             reduce using rule 36 (functions -> dup .)
    OVER            reduce using rule 36 (functions -> dup .)
    CONCAT          reduce using rule 36 (functions -> dup .)
    CR              reduce using rule 36 (functions -> dup .)
    EMIT            reduce using rule 36 (functions -> dup .)
    CHAR            reduce using rule 36 (functions -> dup .)
    KEY             reduce using rule 36 (functions -> dup .)
    SPACES          reduce using rule 36 (functions -> dup .)
    2DUP            reduce using rule 36 (functions -> dup .)
    FUNC_BODY       reduce using rule 36 (functions -> dup .)
    FUNCTION        reduce using rule 36 (functions -> dup .)
    FUNCTION_CALL   reduce using rule 36 (functions -> dup .)
    VARIABLE_DEFENITION reduce using rule 36 (functions -> dup .)
    VARIABLE_ASSIGNMENT reduce using rule 36 (functions -> dup .)
    VARIABLE_FETCH  reduce using rule 36 (functions -> dup .)
    VARIABLE_PRINT  reduce using rule 36 (functions -> dup .)
    IF              reduce using rule 36 (functions -> dup .)
    ELSE            reduce using rule 36 (functions -> dup .)
    THEN            reduce using rule 36 (functions -> dup .)
    DO              reduce using rule 36 (functions -> dup .)
    LOOP            reduce using rule 36 (functions -> dup .)
    $end            reduce using rule 36 (functions -> dup .)
    PLUS            reduce using rule 36 (functions -> dup .)
    MINUS           reduce using rule 36 (functions -> dup .)
    TIMES           reduce using rule 36 (functions -> dup .)
    DIVIDE          reduce using rule 36 (functions -> dup .)
    MOD             reduce using rule 36 (functions -> dup .)
    NOT             reduce using rule 36 (functions -> dup .)
    INF             reduce using rule 36 (functions -> dup .)
    SUP             reduce using rule 36 (functions -> dup .)
    INFEQ           reduce using rule 36 (functions -> dup .)
    SUPEQ           reduce using rule 36 (functions -> dup .)


state 15

    (37) functions -> comment .

    DUP             reduce using rule 37 (functions -> comment .)
    NUMBER          reduce using rule 37 (functions -> comment .)
    STRING          reduce using rule 37 (functions -> comment .)
    STDOUT          reduce using rule 37 (functions -> comment .)
    DOT             reduce using rule 37 (functions -> comment .)
    SPACE           reduce using rule 37 (functions -> comment .)
    COMMENT_LINE    reduce using rule 37 (functions -> comment .)
    COMMENT_BLOCK   reduce using rule 37 (functions -> comment .)
    DROP            reduce using rule 37 (functions -> comment .)
    SWAP            reduce using rule 37 (functions -> comment .)
    ROT             reduce using rule 37 (functions -> comment .)
    OVER            reduce using rule 37 (functions -> comment .)
    CONCAT          reduce using rule 37 (functions -> comment .)
    CR              reduce using rule 37 (functions -> comment .)
    EMIT            reduce using rule 37 (functions -> comment .)
    CHAR            reduce using rule 37 (functions -> comment .)
    KEY             reduce using rule 37 (functions -> comment .)
    SPACES          reduce using rule 37 (functions -> comment .)
    2DUP            reduce using rule 37 (functions -> comment .)
    FUNC_BODY       reduce using rule 37 (functions -> comment .)
    FUNCTION        reduce using rule 37 (functions -> comment .)
    FUNCTION_CALL   reduce using rule 37 (functions -> comment .)
    VARIABLE_DEFENITION reduce using rule 37 (functions -> comment .)
    VARIABLE_ASSIGNMENT reduce using rule 37 (functions -> comment .)
    VARIABLE_FETCH  reduce using rule 37 (functions -> comment .)
    VARIABLE_PRINT  reduce using rule 37 (functions -> comment .)
    IF              reduce using rule 37 (functions -> comment .)
    ELSE            reduce using rule 37 (functions -> comment .)
    THEN            reduce using rule 37 (functions -> comment .)
    DO              reduce using rule 37 (functions -> comment .)
    LOOP            reduce using rule 37 (functions -> comment .)
    $end            reduce using rule 37 (functions -> comment .)
    PLUS            reduce using rule 37 (functions -> comment .)
    MINUS           reduce using rule 37 (functions -> comment .)
    TIMES           reduce using rule 37 (functions -> comment .)
    DIVIDE          reduce using rule 37 (functions -> comment .)
    MOD             reduce using rule 37 (functions -> comment .)
    NOT             reduce using rule 37 (functions -> comment .)
    INF             reduce using rule 37 (functions -> comment .)
    SUP             reduce using rule 37 (functions -> comment .)
    INFEQ           reduce using rule 37 (functions -> comment .)
    SUPEQ           reduce using rule 37 (functions -> comment .)


state 16

    (38) functions -> drop .

    DUP             reduce using rule 38 (functions -> drop .)
    NUMBER          reduce using rule 38 (functions -> drop .)
    STRING          reduce using rule 38 (functions -> drop .)
    STDOUT          reduce using rule 38 (functions -> drop .)
    DOT             reduce using rule 38 (functions -> drop .)
    SPACE           reduce using rule 38 (functions -> drop .)
    COMMENT_LINE    reduce using rule 38 (functions -> drop .)
    COMMENT_BLOCK   reduce using rule 38 (functions -> drop .)
    DROP            reduce using rule 38 (functions -> drop .)
    SWAP            reduce using rule 38 (functions -> drop .)
    ROT             reduce using rule 38 (functions -> drop .)
    OVER            reduce using rule 38 (functions -> drop .)
    CONCAT          reduce using rule 38 (functions -> drop .)
    CR              reduce using rule 38 (functions -> drop .)
    EMIT            reduce using rule 38 (functions -> drop .)
    CHAR            reduce using rule 38 (functions -> drop .)
    KEY             reduce using rule 38 (functions -> drop .)
    SPACES          reduce using rule 38 (functions -> drop .)
    2DUP            reduce using rule 38 (functions -> drop .)
    FUNC_BODY       reduce using rule 38 (functions -> drop .)
    FUNCTION        reduce using rule 38 (functions -> drop .)
    FUNCTION_CALL   reduce using rule 38 (functions -> drop .)
    VARIABLE_DEFENITION reduce using rule 38 (functions -> drop .)
    VARIABLE_ASSIGNMENT reduce using rule 38 (functions -> drop .)
    VARIABLE_FETCH  reduce using rule 38 (functions -> drop .)
    VARIABLE_PRINT  reduce using rule 38 (functions -> drop .)
    IF              reduce using rule 38 (functions -> drop .)
    ELSE            reduce using rule 38 (functions -> drop .)
    THEN            reduce using rule 38 (functions -> drop .)
    DO              reduce using rule 38 (functions -> drop .)
    LOOP            reduce using rule 38 (functions -> drop .)
    $end            reduce using rule 38 (functions -> drop .)
    PLUS            reduce using rule 38 (functions -> drop .)
    MINUS           reduce using rule 38 (functions -> drop .)
    TIMES           reduce using rule 38 (functions -> drop .)
    DIVIDE          reduce using rule 38 (functions -> drop .)
    MOD             reduce using rule 38 (functions -> drop .)
    NOT             reduce using rule 38 (functions -> drop .)
    INF             reduce using rule 38 (functions -> drop .)
    SUP             reduce using rule 38 (functions -> drop .)
    INFEQ           reduce using rule 38 (functions -> drop .)
    SUPEQ           reduce using rule 38 (functions -> drop .)


state 17

    (39) functions -> swap .

    DUP             reduce using rule 39 (functions -> swap .)
    NUMBER          reduce using rule 39 (functions -> swap .)
    STRING          reduce using rule 39 (functions -> swap .)
    STDOUT          reduce using rule 39 (functions -> swap .)
    DOT             reduce using rule 39 (functions -> swap .)
    SPACE           reduce using rule 39 (functions -> swap .)
    COMMENT_LINE    reduce using rule 39 (functions -> swap .)
    COMMENT_BLOCK   reduce using rule 39 (functions -> swap .)
    DROP            reduce using rule 39 (functions -> swap .)
    SWAP            reduce using rule 39 (functions -> swap .)
    ROT             reduce using rule 39 (functions -> swap .)
    OVER            reduce using rule 39 (functions -> swap .)
    CONCAT          reduce using rule 39 (functions -> swap .)
    CR              reduce using rule 39 (functions -> swap .)
    EMIT            reduce using rule 39 (functions -> swap .)
    CHAR            reduce using rule 39 (functions -> swap .)
    KEY             reduce using rule 39 (functions -> swap .)
    SPACES          reduce using rule 39 (functions -> swap .)
    2DUP            reduce using rule 39 (functions -> swap .)
    FUNC_BODY       reduce using rule 39 (functions -> swap .)
    FUNCTION        reduce using rule 39 (functions -> swap .)
    FUNCTION_CALL   reduce using rule 39 (functions -> swap .)
    VARIABLE_DEFENITION reduce using rule 39 (functions -> swap .)
    VARIABLE_ASSIGNMENT reduce using rule 39 (functions -> swap .)
    VARIABLE_FETCH  reduce using rule 39 (functions -> swap .)
    VARIABLE_PRINT  reduce using rule 39 (functions -> swap .)
    IF              reduce using rule 39 (functions -> swap .)
    ELSE            reduce using rule 39 (functions -> swap .)
    THEN            reduce using rule 39 (functions -> swap .)
    DO              reduce using rule 39 (functions -> swap .)
    LOOP            reduce using rule 39 (functions -> swap .)
    $end            reduce using rule 39 (functions -> swap .)
    PLUS            reduce using rule 39 (functions -> swap .)
    MINUS           reduce using rule 39 (functions -> swap .)
    TIMES           reduce using rule 39 (functions -> swap .)
    DIVIDE          reduce using rule 39 (functions -> swap .)
    MOD             reduce using rule 39 (functions -> swap .)
    NOT             reduce using rule 39 (functions -> swap .)
    INF             reduce using rule 39 (functions -> swap .)
    SUP             reduce using rule 39 (functions -> swap .)
    INFEQ           reduce using rule 39 (functions -> swap .)
    SUPEQ           reduce using rule 39 (functions -> swap .)


state 18

    (40) functions -> rot .

    DUP             reduce using rule 40 (functions -> rot .)
    NUMBER          reduce using rule 40 (functions -> rot .)
    STRING          reduce using rule 40 (functions -> rot .)
    STDOUT          reduce using rule 40 (functions -> rot .)
    DOT             reduce using rule 40 (functions -> rot .)
    SPACE           reduce using rule 40 (functions -> rot .)
    COMMENT_LINE    reduce using rule 40 (functions -> rot .)
    COMMENT_BLOCK   reduce using rule 40 (functions -> rot .)
    DROP            reduce using rule 40 (functions -> rot .)
    SWAP            reduce using rule 40 (functions -> rot .)
    ROT             reduce using rule 40 (functions -> rot .)
    OVER            reduce using rule 40 (functions -> rot .)
    CONCAT          reduce using rule 40 (functions -> rot .)
    CR              reduce using rule 40 (functions -> rot .)
    EMIT            reduce using rule 40 (functions -> rot .)
    CHAR            reduce using rule 40 (functions -> rot .)
    KEY             reduce using rule 40 (functions -> rot .)
    SPACES          reduce using rule 40 (functions -> rot .)
    2DUP            reduce using rule 40 (functions -> rot .)
    FUNC_BODY       reduce using rule 40 (functions -> rot .)
    FUNCTION        reduce using rule 40 (functions -> rot .)
    FUNCTION_CALL   reduce using rule 40 (functions -> rot .)
    VARIABLE_DEFENITION reduce using rule 40 (functions -> rot .)
    VARIABLE_ASSIGNMENT reduce using rule 40 (functions -> rot .)
    VARIABLE_FETCH  reduce using rule 40 (functions -> rot .)
    VARIABLE_PRINT  reduce using rule 40 (functions -> rot .)
    IF              reduce using rule 40 (functions -> rot .)
    ELSE            reduce using rule 40 (functions -> rot .)
    THEN            reduce using rule 40 (functions -> rot .)
    DO              reduce using rule 40 (functions -> rot .)
    LOOP            reduce using rule 40 (functions -> rot .)
    $end            reduce using rule 40 (functions -> rot .)
    PLUS            reduce using rule 40 (functions -> rot .)
    MINUS           reduce using rule 40 (functions -> rot .)
    TIMES           reduce using rule 40 (functions -> rot .)
    DIVIDE          reduce using rule 40 (functions -> rot .)
    MOD             reduce using rule 40 (functions -> rot .)
    NOT             reduce using rule 40 (functions -> rot .)
    INF             reduce using rule 40 (functions -> rot .)
    SUP             reduce using rule 40 (functions -> rot .)
    INFEQ           reduce using rule 40 (functions -> rot .)
    SUPEQ           reduce using rule 40 (functions -> rot .)


state 19

    (41) functions -> over .

    DUP             reduce using rule 41 (functions -> over .)
    NUMBER          reduce using rule 41 (functions -> over .)
    STRING          reduce using rule 41 (functions -> over .)
    STDOUT          reduce using rule 41 (functions -> over .)
    DOT             reduce using rule 41 (functions -> over .)
    SPACE           reduce using rule 41 (functions -> over .)
    COMMENT_LINE    reduce using rule 41 (functions -> over .)
    COMMENT_BLOCK   reduce using rule 41 (functions -> over .)
    DROP            reduce using rule 41 (functions -> over .)
    SWAP            reduce using rule 41 (functions -> over .)
    ROT             reduce using rule 41 (functions -> over .)
    OVER            reduce using rule 41 (functions -> over .)
    CONCAT          reduce using rule 41 (functions -> over .)
    CR              reduce using rule 41 (functions -> over .)
    EMIT            reduce using rule 41 (functions -> over .)
    CHAR            reduce using rule 41 (functions -> over .)
    KEY             reduce using rule 41 (functions -> over .)
    SPACES          reduce using rule 41 (functions -> over .)
    2DUP            reduce using rule 41 (functions -> over .)
    FUNC_BODY       reduce using rule 41 (functions -> over .)
    FUNCTION        reduce using rule 41 (functions -> over .)
    FUNCTION_CALL   reduce using rule 41 (functions -> over .)
    VARIABLE_DEFENITION reduce using rule 41 (functions -> over .)
    VARIABLE_ASSIGNMENT reduce using rule 41 (functions -> over .)
    VARIABLE_FETCH  reduce using rule 41 (functions -> over .)
    VARIABLE_PRINT  reduce using rule 41 (functions -> over .)
    IF              reduce using rule 41 (functions -> over .)
    ELSE            reduce using rule 41 (functions -> over .)
    THEN            reduce using rule 41 (functions -> over .)
    DO              reduce using rule 41 (functions -> over .)
    LOOP            reduce using rule 41 (functions -> over .)
    $end            reduce using rule 41 (functions -> over .)
    PLUS            reduce using rule 41 (functions -> over .)
    MINUS           reduce using rule 41 (functions -> over .)
    TIMES           reduce using rule 41 (functions -> over .)
    DIVIDE          reduce using rule 41 (functions -> over .)
    MOD             reduce using rule 41 (functions -> over .)
    NOT             reduce using rule 41 (functions -> over .)
    INF             reduce using rule 41 (functions -> over .)
    SUP             reduce using rule 41 (functions -> over .)
    INFEQ           reduce using rule 41 (functions -> over .)
    SUPEQ           reduce using rule 41 (functions -> over .)


state 20

    (42) functions -> concat .

    DUP             reduce using rule 42 (functions -> concat .)
    NUMBER          reduce using rule 42 (functions -> concat .)
    STRING          reduce using rule 42 (functions -> concat .)
    STDOUT          reduce using rule 42 (functions -> concat .)
    DOT             reduce using rule 42 (functions -> concat .)
    SPACE           reduce using rule 42 (functions -> concat .)
    COMMENT_LINE    reduce using rule 42 (functions -> concat .)
    COMMENT_BLOCK   reduce using rule 42 (functions -> concat .)
    DROP            reduce using rule 42 (functions -> concat .)
    SWAP            reduce using rule 42 (functions -> concat .)
    ROT             reduce using rule 42 (functions -> concat .)
    OVER            reduce using rule 42 (functions -> concat .)
    CONCAT          reduce using rule 42 (functions -> concat .)
    CR              reduce using rule 42 (functions -> concat .)
    EMIT            reduce using rule 42 (functions -> concat .)
    CHAR            reduce using rule 42 (functions -> concat .)
    KEY             reduce using rule 42 (functions -> concat .)
    SPACES          reduce using rule 42 (functions -> concat .)
    2DUP            reduce using rule 42 (functions -> concat .)
    FUNC_BODY       reduce using rule 42 (functions -> concat .)
    FUNCTION        reduce using rule 42 (functions -> concat .)
    FUNCTION_CALL   reduce using rule 42 (functions -> concat .)
    VARIABLE_DEFENITION reduce using rule 42 (functions -> concat .)
    VARIABLE_ASSIGNMENT reduce using rule 42 (functions -> concat .)
    VARIABLE_FETCH  reduce using rule 42 (functions -> concat .)
    VARIABLE_PRINT  reduce using rule 42 (functions -> concat .)
    IF              reduce using rule 42 (functions -> concat .)
    ELSE            reduce using rule 42 (functions -> concat .)
    THEN            reduce using rule 42 (functions -> concat .)
    DO              reduce using rule 42 (functions -> concat .)
    LOOP            reduce using rule 42 (functions -> concat .)
    $end            reduce using rule 42 (functions -> concat .)
    PLUS            reduce using rule 42 (functions -> concat .)
    MINUS           reduce using rule 42 (functions -> concat .)
    TIMES           reduce using rule 42 (functions -> concat .)
    DIVIDE          reduce using rule 42 (functions -> concat .)
    MOD             reduce using rule 42 (functions -> concat .)
    NOT             reduce using rule 42 (functions -> concat .)
    INF             reduce using rule 42 (functions -> concat .)
    SUP             reduce using rule 42 (functions -> concat .)
    INFEQ           reduce using rule 42 (functions -> concat .)
    SUPEQ           reduce using rule 42 (functions -> concat .)


state 21

    (43) functions -> cr .

    DUP             reduce using rule 43 (functions -> cr .)
    NUMBER          reduce using rule 43 (functions -> cr .)
    STRING          reduce using rule 43 (functions -> cr .)
    STDOUT          reduce using rule 43 (functions -> cr .)
    DOT             reduce using rule 43 (functions -> cr .)
    SPACE           reduce using rule 43 (functions -> cr .)
    COMMENT_LINE    reduce using rule 43 (functions -> cr .)
    COMMENT_BLOCK   reduce using rule 43 (functions -> cr .)
    DROP            reduce using rule 43 (functions -> cr .)
    SWAP            reduce using rule 43 (functions -> cr .)
    ROT             reduce using rule 43 (functions -> cr .)
    OVER            reduce using rule 43 (functions -> cr .)
    CONCAT          reduce using rule 43 (functions -> cr .)
    CR              reduce using rule 43 (functions -> cr .)
    EMIT            reduce using rule 43 (functions -> cr .)
    CHAR            reduce using rule 43 (functions -> cr .)
    KEY             reduce using rule 43 (functions -> cr .)
    SPACES          reduce using rule 43 (functions -> cr .)
    2DUP            reduce using rule 43 (functions -> cr .)
    FUNC_BODY       reduce using rule 43 (functions -> cr .)
    FUNCTION        reduce using rule 43 (functions -> cr .)
    FUNCTION_CALL   reduce using rule 43 (functions -> cr .)
    VARIABLE_DEFENITION reduce using rule 43 (functions -> cr .)
    VARIABLE_ASSIGNMENT reduce using rule 43 (functions -> cr .)
    VARIABLE_FETCH  reduce using rule 43 (functions -> cr .)
    VARIABLE_PRINT  reduce using rule 43 (functions -> cr .)
    IF              reduce using rule 43 (functions -> cr .)
    ELSE            reduce using rule 43 (functions -> cr .)
    THEN            reduce using rule 43 (functions -> cr .)
    DO              reduce using rule 43 (functions -> cr .)
    LOOP            reduce using rule 43 (functions -> cr .)
    $end            reduce using rule 43 (functions -> cr .)
    PLUS            reduce using rule 43 (functions -> cr .)
    MINUS           reduce using rule 43 (functions -> cr .)
    TIMES           reduce using rule 43 (functions -> cr .)
    DIVIDE          reduce using rule 43 (functions -> cr .)
    MOD             reduce using rule 43 (functions -> cr .)
    NOT             reduce using rule 43 (functions -> cr .)
    INF             reduce using rule 43 (functions -> cr .)
    SUP             reduce using rule 43 (functions -> cr .)
    INFEQ           reduce using rule 43 (functions -> cr .)
    SUPEQ           reduce using rule 43 (functions -> cr .)


state 22

    (44) functions -> emit .

    DUP             reduce using rule 44 (functions -> emit .)
    NUMBER          reduce using rule 44 (functions -> emit .)
    STRING          reduce using rule 44 (functions -> emit .)
    STDOUT          reduce using rule 44 (functions -> emit .)
    DOT             reduce using rule 44 (functions -> emit .)
    SPACE           reduce using rule 44 (functions -> emit .)
    COMMENT_LINE    reduce using rule 44 (functions -> emit .)
    COMMENT_BLOCK   reduce using rule 44 (functions -> emit .)
    DROP            reduce using rule 44 (functions -> emit .)
    SWAP            reduce using rule 44 (functions -> emit .)
    ROT             reduce using rule 44 (functions -> emit .)
    OVER            reduce using rule 44 (functions -> emit .)
    CONCAT          reduce using rule 44 (functions -> emit .)
    CR              reduce using rule 44 (functions -> emit .)
    EMIT            reduce using rule 44 (functions -> emit .)
    CHAR            reduce using rule 44 (functions -> emit .)
    KEY             reduce using rule 44 (functions -> emit .)
    SPACES          reduce using rule 44 (functions -> emit .)
    2DUP            reduce using rule 44 (functions -> emit .)
    FUNC_BODY       reduce using rule 44 (functions -> emit .)
    FUNCTION        reduce using rule 44 (functions -> emit .)
    FUNCTION_CALL   reduce using rule 44 (functions -> emit .)
    VARIABLE_DEFENITION reduce using rule 44 (functions -> emit .)
    VARIABLE_ASSIGNMENT reduce using rule 44 (functions -> emit .)
    VARIABLE_FETCH  reduce using rule 44 (functions -> emit .)
    VARIABLE_PRINT  reduce using rule 44 (functions -> emit .)
    IF              reduce using rule 44 (functions -> emit .)
    ELSE            reduce using rule 44 (functions -> emit .)
    THEN            reduce using rule 44 (functions -> emit .)
    DO              reduce using rule 44 (functions -> emit .)
    LOOP            reduce using rule 44 (functions -> emit .)
    $end            reduce using rule 44 (functions -> emit .)
    PLUS            reduce using rule 44 (functions -> emit .)
    MINUS           reduce using rule 44 (functions -> emit .)
    TIMES           reduce using rule 44 (functions -> emit .)
    DIVIDE          reduce using rule 44 (functions -> emit .)
    MOD             reduce using rule 44 (functions -> emit .)
    NOT             reduce using rule 44 (functions -> emit .)
    INF             reduce using rule 44 (functions -> emit .)
    SUP             reduce using rule 44 (functions -> emit .)
    INFEQ           reduce using rule 44 (functions -> emit .)
    SUPEQ           reduce using rule 44 (functions -> emit .)


state 23

    (45) functions -> char .

    DUP             reduce using rule 45 (functions -> char .)
    NUMBER          reduce using rule 45 (functions -> char .)
    STRING          reduce using rule 45 (functions -> char .)
    STDOUT          reduce using rule 45 (functions -> char .)
    DOT             reduce using rule 45 (functions -> char .)
    SPACE           reduce using rule 45 (functions -> char .)
    COMMENT_LINE    reduce using rule 45 (functions -> char .)
    COMMENT_BLOCK   reduce using rule 45 (functions -> char .)
    DROP            reduce using rule 45 (functions -> char .)
    SWAP            reduce using rule 45 (functions -> char .)
    ROT             reduce using rule 45 (functions -> char .)
    OVER            reduce using rule 45 (functions -> char .)
    CONCAT          reduce using rule 45 (functions -> char .)
    CR              reduce using rule 45 (functions -> char .)
    EMIT            reduce using rule 45 (functions -> char .)
    CHAR            reduce using rule 45 (functions -> char .)
    KEY             reduce using rule 45 (functions -> char .)
    SPACES          reduce using rule 45 (functions -> char .)
    2DUP            reduce using rule 45 (functions -> char .)
    FUNC_BODY       reduce using rule 45 (functions -> char .)
    FUNCTION        reduce using rule 45 (functions -> char .)
    FUNCTION_CALL   reduce using rule 45 (functions -> char .)
    VARIABLE_DEFENITION reduce using rule 45 (functions -> char .)
    VARIABLE_ASSIGNMENT reduce using rule 45 (functions -> char .)
    VARIABLE_FETCH  reduce using rule 45 (functions -> char .)
    VARIABLE_PRINT  reduce using rule 45 (functions -> char .)
    IF              reduce using rule 45 (functions -> char .)
    ELSE            reduce using rule 45 (functions -> char .)
    THEN            reduce using rule 45 (functions -> char .)
    DO              reduce using rule 45 (functions -> char .)
    LOOP            reduce using rule 45 (functions -> char .)
    $end            reduce using rule 45 (functions -> char .)
    PLUS            reduce using rule 45 (functions -> char .)
    MINUS           reduce using rule 45 (functions -> char .)
    TIMES           reduce using rule 45 (functions -> char .)
    DIVIDE          reduce using rule 45 (functions -> char .)
    MOD             reduce using rule 45 (functions -> char .)
    NOT             reduce using rule 45 (functions -> char .)
    INF             reduce using rule 45 (functions -> char .)
    SUP             reduce using rule 45 (functions -> char .)
    INFEQ           reduce using rule 45 (functions -> char .)
    SUPEQ           reduce using rule 45 (functions -> char .)


state 24

    (46) functions -> key .

    DUP             reduce using rule 46 (functions -> key .)
    NUMBER          reduce using rule 46 (functions -> key .)
    STRING          reduce using rule 46 (functions -> key .)
    STDOUT          reduce using rule 46 (functions -> key .)
    DOT             reduce using rule 46 (functions -> key .)
    SPACE           reduce using rule 46 (functions -> key .)
    COMMENT_LINE    reduce using rule 46 (functions -> key .)
    COMMENT_BLOCK   reduce using rule 46 (functions -> key .)
    DROP            reduce using rule 46 (functions -> key .)
    SWAP            reduce using rule 46 (functions -> key .)
    ROT             reduce using rule 46 (functions -> key .)
    OVER            reduce using rule 46 (functions -> key .)
    CONCAT          reduce using rule 46 (functions -> key .)
    CR              reduce using rule 46 (functions -> key .)
    EMIT            reduce using rule 46 (functions -> key .)
    CHAR            reduce using rule 46 (functions -> key .)
    KEY             reduce using rule 46 (functions -> key .)
    SPACES          reduce using rule 46 (functions -> key .)
    2DUP            reduce using rule 46 (functions -> key .)
    FUNC_BODY       reduce using rule 46 (functions -> key .)
    FUNCTION        reduce using rule 46 (functions -> key .)
    FUNCTION_CALL   reduce using rule 46 (functions -> key .)
    VARIABLE_DEFENITION reduce using rule 46 (functions -> key .)
    VARIABLE_ASSIGNMENT reduce using rule 46 (functions -> key .)
    VARIABLE_FETCH  reduce using rule 46 (functions -> key .)
    VARIABLE_PRINT  reduce using rule 46 (functions -> key .)
    IF              reduce using rule 46 (functions -> key .)
    ELSE            reduce using rule 46 (functions -> key .)
    THEN            reduce using rule 46 (functions -> key .)
    DO              reduce using rule 46 (functions -> key .)
    LOOP            reduce using rule 46 (functions -> key .)
    $end            reduce using rule 46 (functions -> key .)
    PLUS            reduce using rule 46 (functions -> key .)
    MINUS           reduce using rule 46 (functions -> key .)
    TIMES           reduce using rule 46 (functions -> key .)
    DIVIDE          reduce using rule 46 (functions -> key .)
    MOD             reduce using rule 46 (functions -> key .)
    NOT             reduce using rule 46 (functions -> key .)
    INF             reduce using rule 46 (functions -> key .)
    SUP             reduce using rule 46 (functions -> key .)
    INFEQ           reduce using rule 46 (functions -> key .)
    SUPEQ           reduce using rule 46 (functions -> key .)


state 25

    (47) functions -> spaces .

    DUP             reduce using rule 47 (functions -> spaces .)
    NUMBER          reduce using rule 47 (functions -> spaces .)
    STRING          reduce using rule 47 (functions -> spaces .)
    STDOUT          reduce using rule 47 (functions -> spaces .)
    DOT             reduce using rule 47 (functions -> spaces .)
    SPACE           reduce using rule 47 (functions -> spaces .)
    COMMENT_LINE    reduce using rule 47 (functions -> spaces .)
    COMMENT_BLOCK   reduce using rule 47 (functions -> spaces .)
    DROP            reduce using rule 47 (functions -> spaces .)
    SWAP            reduce using rule 47 (functions -> spaces .)
    ROT             reduce using rule 47 (functions -> spaces .)
    OVER            reduce using rule 47 (functions -> spaces .)
    CONCAT          reduce using rule 47 (functions -> spaces .)
    CR              reduce using rule 47 (functions -> spaces .)
    EMIT            reduce using rule 47 (functions -> spaces .)
    CHAR            reduce using rule 47 (functions -> spaces .)
    KEY             reduce using rule 47 (functions -> spaces .)
    SPACES          reduce using rule 47 (functions -> spaces .)
    2DUP            reduce using rule 47 (functions -> spaces .)
    FUNC_BODY       reduce using rule 47 (functions -> spaces .)
    FUNCTION        reduce using rule 47 (functions -> spaces .)
    FUNCTION_CALL   reduce using rule 47 (functions -> spaces .)
    VARIABLE_DEFENITION reduce using rule 47 (functions -> spaces .)
    VARIABLE_ASSIGNMENT reduce using rule 47 (functions -> spaces .)
    VARIABLE_FETCH  reduce using rule 47 (functions -> spaces .)
    VARIABLE_PRINT  reduce using rule 47 (functions -> spaces .)
    IF              reduce using rule 47 (functions -> spaces .)
    ELSE            reduce using rule 47 (functions -> spaces .)
    THEN            reduce using rule 47 (functions -> spaces .)
    DO              reduce using rule 47 (functions -> spaces .)
    LOOP            reduce using rule 47 (functions -> spaces .)
    $end            reduce using rule 47 (functions -> spaces .)
    PLUS            reduce using rule 47 (functions -> spaces .)
    MINUS           reduce using rule 47 (functions -> spaces .)
    TIMES           reduce using rule 47 (functions -> spaces .)
    DIVIDE          reduce using rule 47 (functions -> spaces .)
    MOD             reduce using rule 47 (functions -> spaces .)
    NOT             reduce using rule 47 (functions -> spaces .)
    INF             reduce using rule 47 (functions -> spaces .)
    SUP             reduce using rule 47 (functions -> spaces .)
    INFEQ           reduce using rule 47 (functions -> spaces .)
    SUPEQ           reduce using rule 47 (functions -> spaces .)


state 26

    (48) functions -> 2dup .

    DUP             reduce using rule 48 (functions -> 2dup .)
    NUMBER          reduce using rule 48 (functions -> 2dup .)
    STRING          reduce using rule 48 (functions -> 2dup .)
    STDOUT          reduce using rule 48 (functions -> 2dup .)
    DOT             reduce using rule 48 (functions -> 2dup .)
    SPACE           reduce using rule 48 (functions -> 2dup .)
    COMMENT_LINE    reduce using rule 48 (functions -> 2dup .)
    COMMENT_BLOCK   reduce using rule 48 (functions -> 2dup .)
    DROP            reduce using rule 48 (functions -> 2dup .)
    SWAP            reduce using rule 48 (functions -> 2dup .)
    ROT             reduce using rule 48 (functions -> 2dup .)
    OVER            reduce using rule 48 (functions -> 2dup .)
    CONCAT          reduce using rule 48 (functions -> 2dup .)
    CR              reduce using rule 48 (functions -> 2dup .)
    EMIT            reduce using rule 48 (functions -> 2dup .)
    CHAR            reduce using rule 48 (functions -> 2dup .)
    KEY             reduce using rule 48 (functions -> 2dup .)
    SPACES          reduce using rule 48 (functions -> 2dup .)
    2DUP            reduce using rule 48 (functions -> 2dup .)
    FUNC_BODY       reduce using rule 48 (functions -> 2dup .)
    FUNCTION        reduce using rule 48 (functions -> 2dup .)
    FUNCTION_CALL   reduce using rule 48 (functions -> 2dup .)
    VARIABLE_DEFENITION reduce using rule 48 (functions -> 2dup .)
    VARIABLE_ASSIGNMENT reduce using rule 48 (functions -> 2dup .)
    VARIABLE_FETCH  reduce using rule 48 (functions -> 2dup .)
    VARIABLE_PRINT  reduce using rule 48 (functions -> 2dup .)
    IF              reduce using rule 48 (functions -> 2dup .)
    ELSE            reduce using rule 48 (functions -> 2dup .)
    THEN            reduce using rule 48 (functions -> 2dup .)
    DO              reduce using rule 48 (functions -> 2dup .)
    LOOP            reduce using rule 48 (functions -> 2dup .)
    $end            reduce using rule 48 (functions -> 2dup .)
    PLUS            reduce using rule 48 (functions -> 2dup .)
    MINUS           reduce using rule 48 (functions -> 2dup .)
    TIMES           reduce using rule 48 (functions -> 2dup .)
    DIVIDE          reduce using rule 48 (functions -> 2dup .)
    MOD             reduce using rule 48 (functions -> 2dup .)
    NOT             reduce using rule 48 (functions -> 2dup .)
    INF             reduce using rule 48 (functions -> 2dup .)
    SUP             reduce using rule 48 (functions -> 2dup .)
    INFEQ           reduce using rule 48 (functions -> 2dup .)
    SUPEQ           reduce using rule 48 (functions -> 2dup .)


state 27

    (21) values -> NUMBER .

    DUP             reduce using rule 21 (values -> NUMBER .)
    NUMBER          reduce using rule 21 (values -> NUMBER .)
    STRING          reduce using rule 21 (values -> NUMBER .)
    STDOUT          reduce using rule 21 (values -> NUMBER .)
    DOT             reduce using rule 21 (values -> NUMBER .)
    SPACE           reduce using rule 21 (values -> NUMBER .)
    COMMENT_LINE    reduce using rule 21 (values -> NUMBER .)
    COMMENT_BLOCK   reduce using rule 21 (values -> NUMBER .)
    DROP            reduce using rule 21 (values -> NUMBER .)
    SWAP            reduce using rule 21 (values -> NUMBER .)
    ROT             reduce using rule 21 (values -> NUMBER .)
    OVER            reduce using rule 21 (values -> NUMBER .)
    CONCAT          reduce using rule 21 (values -> NUMBER .)
    CR              reduce using rule 21 (values -> NUMBER .)
    EMIT            reduce using rule 21 (values -> NUMBER .)
    CHAR            reduce using rule 21 (values -> NUMBER .)
    KEY             reduce using rule 21 (values -> NUMBER .)
    SPACES          reduce using rule 21 (values -> NUMBER .)
    2DUP            reduce using rule 21 (values -> NUMBER .)
    FUNC_BODY       reduce using rule 21 (values -> NUMBER .)
    FUNCTION        reduce using rule 21 (values -> NUMBER .)
    FUNCTION_CALL   reduce using rule 21 (values -> NUMBER .)
    VARIABLE_DEFENITION reduce using rule 21 (values -> NUMBER .)
    VARIABLE_ASSIGNMENT reduce using rule 21 (values -> NUMBER .)
    VARIABLE_FETCH  reduce using rule 21 (values -> NUMBER .)
    VARIABLE_PRINT  reduce using rule 21 (values -> NUMBER .)
    IF              reduce using rule 21 (values -> NUMBER .)
    ELSE            reduce using rule 21 (values -> NUMBER .)
    THEN            reduce using rule 21 (values -> NUMBER .)
    DO              reduce using rule 21 (values -> NUMBER .)
    LOOP            reduce using rule 21 (values -> NUMBER .)
    $end            reduce using rule 21 (values -> NUMBER .)
    PLUS            reduce using rule 21 (values -> NUMBER .)
    MINUS           reduce using rule 21 (values -> NUMBER .)
    TIMES           reduce using rule 21 (values -> NUMBER .)
    DIVIDE          reduce using rule 21 (values -> NUMBER .)
    MOD             reduce using rule 21 (values -> NUMBER .)
    NOT             reduce using rule 21 (values -> NUMBER .)
    INF             reduce using rule 21 (values -> NUMBER .)
    SUP             reduce using rule 21 (values -> NUMBER .)
    INFEQ           reduce using rule 21 (values -> NUMBER .)
    SUPEQ           reduce using rule 21 (values -> NUMBER .)


state 28

    (22) values -> STRING .

    DUP             reduce using rule 22 (values -> STRING .)
    NUMBER          reduce using rule 22 (values -> STRING .)
    STRING          reduce using rule 22 (values -> STRING .)
    STDOUT          reduce using rule 22 (values -> STRING .)
    DOT             reduce using rule 22 (values -> STRING .)
    SPACE           reduce using rule 22 (values -> STRING .)
    COMMENT_LINE    reduce using rule 22 (values -> STRING .)
    COMMENT_BLOCK   reduce using rule 22 (values -> STRING .)
    DROP            reduce using rule 22 (values -> STRING .)
    SWAP            reduce using rule 22 (values -> STRING .)
    ROT             reduce using rule 22 (values -> STRING .)
    OVER            reduce using rule 22 (values -> STRING .)
    CONCAT          reduce using rule 22 (values -> STRING .)
    CR              reduce using rule 22 (values -> STRING .)
    EMIT            reduce using rule 22 (values -> STRING .)
    CHAR            reduce using rule 22 (values -> STRING .)
    KEY             reduce using rule 22 (values -> STRING .)
    SPACES          reduce using rule 22 (values -> STRING .)
    2DUP            reduce using rule 22 (values -> STRING .)
    FUNC_BODY       reduce using rule 22 (values -> STRING .)
    FUNCTION        reduce using rule 22 (values -> STRING .)
    FUNCTION_CALL   reduce using rule 22 (values -> STRING .)
    VARIABLE_DEFENITION reduce using rule 22 (values -> STRING .)
    VARIABLE_ASSIGNMENT reduce using rule 22 (values -> STRING .)
    VARIABLE_FETCH  reduce using rule 22 (values -> STRING .)
    VARIABLE_PRINT  reduce using rule 22 (values -> STRING .)
    IF              reduce using rule 22 (values -> STRING .)
    ELSE            reduce using rule 22 (values -> STRING .)
    THEN            reduce using rule 22 (values -> STRING .)
    DO              reduce using rule 22 (values -> STRING .)
    LOOP            reduce using rule 22 (values -> STRING .)
    $end            reduce using rule 22 (values -> STRING .)
    PLUS            reduce using rule 22 (values -> STRING .)
    MINUS           reduce using rule 22 (values -> STRING .)
    TIMES           reduce using rule 22 (values -> STRING .)
    DIVIDE          reduce using rule 22 (values -> STRING .)
    MOD             reduce using rule 22 (values -> STRING .)
    NOT             reduce using rule 22 (values -> STRING .)
    INF             reduce using rule 22 (values -> STRING .)
    SUP             reduce using rule 22 (values -> STRING .)
    INFEQ           reduce using rule 22 (values -> STRING .)
    SUPEQ           reduce using rule 22 (values -> STRING .)


state 29

    (74) creating_funcs -> func_criada .

    FUNCTION        reduce using rule 74 (creating_funcs -> func_criada .)
    FUNCTION_CALL   reduce using rule 74 (creating_funcs -> func_criada .)
    FUNC_BODY       reduce using rule 74 (creating_funcs -> func_criada .)
    DUP             reduce using rule 74 (creating_funcs -> func_criada .)
    NUMBER          reduce using rule 74 (creating_funcs -> func_criada .)
    STRING          reduce using rule 74 (creating_funcs -> func_criada .)
    STDOUT          reduce using rule 74 (creating_funcs -> func_criada .)
    DOT             reduce using rule 74 (creating_funcs -> func_criada .)
    SPACE           reduce using rule 74 (creating_funcs -> func_criada .)
    COMMENT_LINE    reduce using rule 74 (creating_funcs -> func_criada .)
    COMMENT_BLOCK   reduce using rule 74 (creating_funcs -> func_criada .)
    DROP            reduce using rule 74 (creating_funcs -> func_criada .)
    SWAP            reduce using rule 74 (creating_funcs -> func_criada .)
    ROT             reduce using rule 74 (creating_funcs -> func_criada .)
    OVER            reduce using rule 74 (creating_funcs -> func_criada .)
    CONCAT          reduce using rule 74 (creating_funcs -> func_criada .)
    CR              reduce using rule 74 (creating_funcs -> func_criada .)
    EMIT            reduce using rule 74 (creating_funcs -> func_criada .)
    CHAR            reduce using rule 74 (creating_funcs -> func_criada .)
    KEY             reduce using rule 74 (creating_funcs -> func_criada .)
    SPACES          reduce using rule 74 (creating_funcs -> func_criada .)
    2DUP            reduce using rule 74 (creating_funcs -> func_criada .)
    VARIABLE_DEFENITION reduce using rule 74 (creating_funcs -> func_criada .)
    VARIABLE_ASSIGNMENT reduce using rule 74 (creating_funcs -> func_criada .)
    VARIABLE_FETCH  reduce using rule 74 (creating_funcs -> func_criada .)
    VARIABLE_PRINT  reduce using rule 74 (creating_funcs -> func_criada .)
    IF              reduce using rule 74 (creating_funcs -> func_criada .)
    ELSE            reduce using rule 74 (creating_funcs -> func_criada .)
    THEN            reduce using rule 74 (creating_funcs -> func_criada .)
    DO              reduce using rule 74 (creating_funcs -> func_criada .)
    LOOP            reduce using rule 74 (creating_funcs -> func_criada .)
    $end            reduce using rule 74 (creating_funcs -> func_criada .)
    PLUS            reduce using rule 74 (creating_funcs -> func_criada .)
    MINUS           reduce using rule 74 (creating_funcs -> func_criada .)
    TIMES           reduce using rule 74 (creating_funcs -> func_criada .)
    DIVIDE          reduce using rule 74 (creating_funcs -> func_criada .)
    MOD             reduce using rule 74 (creating_funcs -> func_criada .)
    NOT             reduce using rule 74 (creating_funcs -> func_criada .)
    INF             reduce using rule 74 (creating_funcs -> func_criada .)
    SUP             reduce using rule 74 (creating_funcs -> func_criada .)
    INFEQ           reduce using rule 74 (creating_funcs -> func_criada .)
    SUPEQ           reduce using rule 74 (creating_funcs -> func_criada .)


state 30

    (75) creating_funcs -> function .

    FUNCTION        reduce using rule 75 (creating_funcs -> function .)
    FUNCTION_CALL   reduce using rule 75 (creating_funcs -> function .)
    FUNC_BODY       reduce using rule 75 (creating_funcs -> function .)
    DUP             reduce using rule 75 (creating_funcs -> function .)
    NUMBER          reduce using rule 75 (creating_funcs -> function .)
    STRING          reduce using rule 75 (creating_funcs -> function .)
    STDOUT          reduce using rule 75 (creating_funcs -> function .)
    DOT             reduce using rule 75 (creating_funcs -> function .)
    SPACE           reduce using rule 75 (creating_funcs -> function .)
    COMMENT_LINE    reduce using rule 75 (creating_funcs -> function .)
    COMMENT_BLOCK   reduce using rule 75 (creating_funcs -> function .)
    DROP            reduce using rule 75 (creating_funcs -> function .)
    SWAP            reduce using rule 75 (creating_funcs -> function .)
    ROT             reduce using rule 75 (creating_funcs -> function .)
    OVER            reduce using rule 75 (creating_funcs -> function .)
    CONCAT          reduce using rule 75 (creating_funcs -> function .)
    CR              reduce using rule 75 (creating_funcs -> function .)
    EMIT            reduce using rule 75 (creating_funcs -> function .)
    CHAR            reduce using rule 75 (creating_funcs -> function .)
    KEY             reduce using rule 75 (creating_funcs -> function .)
    SPACES          reduce using rule 75 (creating_funcs -> function .)
    2DUP            reduce using rule 75 (creating_funcs -> function .)
    VARIABLE_DEFENITION reduce using rule 75 (creating_funcs -> function .)
    VARIABLE_ASSIGNMENT reduce using rule 75 (creating_funcs -> function .)
    VARIABLE_FETCH  reduce using rule 75 (creating_funcs -> function .)
    VARIABLE_PRINT  reduce using rule 75 (creating_funcs -> function .)
    IF              reduce using rule 75 (creating_funcs -> function .)
    ELSE            reduce using rule 75 (creating_funcs -> function .)
    THEN            reduce using rule 75 (creating_funcs -> function .)
    DO              reduce using rule 75 (creating_funcs -> function .)
    LOOP            reduce using rule 75 (creating_funcs -> function .)
    $end            reduce using rule 75 (creating_funcs -> function .)
    PLUS            reduce using rule 75 (creating_funcs -> function .)
    MINUS           reduce using rule 75 (creating_funcs -> function .)
    TIMES           reduce using rule 75 (creating_funcs -> function .)
    DIVIDE          reduce using rule 75 (creating_funcs -> function .)
    MOD             reduce using rule 75 (creating_funcs -> function .)
    NOT             reduce using rule 75 (creating_funcs -> function .)
    INF             reduce using rule 75 (creating_funcs -> function .)
    SUP             reduce using rule 75 (creating_funcs -> function .)
    INFEQ           reduce using rule 75 (creating_funcs -> function .)
    SUPEQ           reduce using rule 75 (creating_funcs -> function .)


state 31

    (66) variable -> variable_definition .

    DUP             reduce using rule 66 (variable -> variable_definition .)
    NUMBER          reduce using rule 66 (variable -> variable_definition .)
    STRING          reduce using rule 66 (variable -> variable_definition .)
    STDOUT          reduce using rule 66 (variable -> variable_definition .)
    DOT             reduce using rule 66 (variable -> variable_definition .)
    SPACE           reduce using rule 66 (variable -> variable_definition .)
    COMMENT_LINE    reduce using rule 66 (variable -> variable_definition .)
    COMMENT_BLOCK   reduce using rule 66 (variable -> variable_definition .)
    DROP            reduce using rule 66 (variable -> variable_definition .)
    SWAP            reduce using rule 66 (variable -> variable_definition .)
    ROT             reduce using rule 66 (variable -> variable_definition .)
    OVER            reduce using rule 66 (variable -> variable_definition .)
    CONCAT          reduce using rule 66 (variable -> variable_definition .)
    CR              reduce using rule 66 (variable -> variable_definition .)
    EMIT            reduce using rule 66 (variable -> variable_definition .)
    CHAR            reduce using rule 66 (variable -> variable_definition .)
    KEY             reduce using rule 66 (variable -> variable_definition .)
    SPACES          reduce using rule 66 (variable -> variable_definition .)
    2DUP            reduce using rule 66 (variable -> variable_definition .)
    FUNC_BODY       reduce using rule 66 (variable -> variable_definition .)
    FUNCTION        reduce using rule 66 (variable -> variable_definition .)
    FUNCTION_CALL   reduce using rule 66 (variable -> variable_definition .)
    VARIABLE_DEFENITION reduce using rule 66 (variable -> variable_definition .)
    VARIABLE_ASSIGNMENT reduce using rule 66 (variable -> variable_definition .)
    VARIABLE_FETCH  reduce using rule 66 (variable -> variable_definition .)
    VARIABLE_PRINT  reduce using rule 66 (variable -> variable_definition .)
    IF              reduce using rule 66 (variable -> variable_definition .)
    ELSE            reduce using rule 66 (variable -> variable_definition .)
    THEN            reduce using rule 66 (variable -> variable_definition .)
    DO              reduce using rule 66 (variable -> variable_definition .)
    LOOP            reduce using rule 66 (variable -> variable_definition .)
    $end            reduce using rule 66 (variable -> variable_definition .)
    PLUS            reduce using rule 66 (variable -> variable_definition .)
    MINUS           reduce using rule 66 (variable -> variable_definition .)
    TIMES           reduce using rule 66 (variable -> variable_definition .)
    DIVIDE          reduce using rule 66 (variable -> variable_definition .)
    MOD             reduce using rule 66 (variable -> variable_definition .)
    NOT             reduce using rule 66 (variable -> variable_definition .)
    INF             reduce using rule 66 (variable -> variable_definition .)
    SUP             reduce using rule 66 (variable -> variable_definition .)
    INFEQ           reduce using rule 66 (variable -> variable_definition .)
    SUPEQ           reduce using rule 66 (variable -> variable_definition .)


state 32

    (67) variable -> variable_assignment .

    DUP             reduce using rule 67 (variable -> variable_assignment .)
    NUMBER          reduce using rule 67 (variable -> variable_assignment .)
    STRING          reduce using rule 67 (variable -> variable_assignment .)
    STDOUT          reduce using rule 67 (variable -> variable_assignment .)
    DOT             reduce using rule 67 (variable -> variable_assignment .)
    SPACE           reduce using rule 67 (variable -> variable_assignment .)
    COMMENT_LINE    reduce using rule 67 (variable -> variable_assignment .)
    COMMENT_BLOCK   reduce using rule 67 (variable -> variable_assignment .)
    DROP            reduce using rule 67 (variable -> variable_assignment .)
    SWAP            reduce using rule 67 (variable -> variable_assignment .)
    ROT             reduce using rule 67 (variable -> variable_assignment .)
    OVER            reduce using rule 67 (variable -> variable_assignment .)
    CONCAT          reduce using rule 67 (variable -> variable_assignment .)
    CR              reduce using rule 67 (variable -> variable_assignment .)
    EMIT            reduce using rule 67 (variable -> variable_assignment .)
    CHAR            reduce using rule 67 (variable -> variable_assignment .)
    KEY             reduce using rule 67 (variable -> variable_assignment .)
    SPACES          reduce using rule 67 (variable -> variable_assignment .)
    2DUP            reduce using rule 67 (variable -> variable_assignment .)
    FUNC_BODY       reduce using rule 67 (variable -> variable_assignment .)
    FUNCTION        reduce using rule 67 (variable -> variable_assignment .)
    FUNCTION_CALL   reduce using rule 67 (variable -> variable_assignment .)
    VARIABLE_DEFENITION reduce using rule 67 (variable -> variable_assignment .)
    VARIABLE_ASSIGNMENT reduce using rule 67 (variable -> variable_assignment .)
    VARIABLE_FETCH  reduce using rule 67 (variable -> variable_assignment .)
    VARIABLE_PRINT  reduce using rule 67 (variable -> variable_assignment .)
    IF              reduce using rule 67 (variable -> variable_assignment .)
    ELSE            reduce using rule 67 (variable -> variable_assignment .)
    THEN            reduce using rule 67 (variable -> variable_assignment .)
    DO              reduce using rule 67 (variable -> variable_assignment .)
    LOOP            reduce using rule 67 (variable -> variable_assignment .)
    $end            reduce using rule 67 (variable -> variable_assignment .)
    PLUS            reduce using rule 67 (variable -> variable_assignment .)
    MINUS           reduce using rule 67 (variable -> variable_assignment .)
    TIMES           reduce using rule 67 (variable -> variable_assignment .)
    DIVIDE          reduce using rule 67 (variable -> variable_assignment .)
    MOD             reduce using rule 67 (variable -> variable_assignment .)
    NOT             reduce using rule 67 (variable -> variable_assignment .)
    INF             reduce using rule 67 (variable -> variable_assignment .)
    SUP             reduce using rule 67 (variable -> variable_assignment .)
    INFEQ           reduce using rule 67 (variable -> variable_assignment .)
    SUPEQ           reduce using rule 67 (variable -> variable_assignment .)


state 33

    (68) variable -> variable_fetch .

    DUP             reduce using rule 68 (variable -> variable_fetch .)
    NUMBER          reduce using rule 68 (variable -> variable_fetch .)
    STRING          reduce using rule 68 (variable -> variable_fetch .)
    STDOUT          reduce using rule 68 (variable -> variable_fetch .)
    DOT             reduce using rule 68 (variable -> variable_fetch .)
    SPACE           reduce using rule 68 (variable -> variable_fetch .)
    COMMENT_LINE    reduce using rule 68 (variable -> variable_fetch .)
    COMMENT_BLOCK   reduce using rule 68 (variable -> variable_fetch .)
    DROP            reduce using rule 68 (variable -> variable_fetch .)
    SWAP            reduce using rule 68 (variable -> variable_fetch .)
    ROT             reduce using rule 68 (variable -> variable_fetch .)
    OVER            reduce using rule 68 (variable -> variable_fetch .)
    CONCAT          reduce using rule 68 (variable -> variable_fetch .)
    CR              reduce using rule 68 (variable -> variable_fetch .)
    EMIT            reduce using rule 68 (variable -> variable_fetch .)
    CHAR            reduce using rule 68 (variable -> variable_fetch .)
    KEY             reduce using rule 68 (variable -> variable_fetch .)
    SPACES          reduce using rule 68 (variable -> variable_fetch .)
    2DUP            reduce using rule 68 (variable -> variable_fetch .)
    FUNC_BODY       reduce using rule 68 (variable -> variable_fetch .)
    FUNCTION        reduce using rule 68 (variable -> variable_fetch .)
    FUNCTION_CALL   reduce using rule 68 (variable -> variable_fetch .)
    VARIABLE_DEFENITION reduce using rule 68 (variable -> variable_fetch .)
    VARIABLE_ASSIGNMENT reduce using rule 68 (variable -> variable_fetch .)
    VARIABLE_FETCH  reduce using rule 68 (variable -> variable_fetch .)
    VARIABLE_PRINT  reduce using rule 68 (variable -> variable_fetch .)
    IF              reduce using rule 68 (variable -> variable_fetch .)
    ELSE            reduce using rule 68 (variable -> variable_fetch .)
    THEN            reduce using rule 68 (variable -> variable_fetch .)
    DO              reduce using rule 68 (variable -> variable_fetch .)
    LOOP            reduce using rule 68 (variable -> variable_fetch .)
    $end            reduce using rule 68 (variable -> variable_fetch .)
    PLUS            reduce using rule 68 (variable -> variable_fetch .)
    MINUS           reduce using rule 68 (variable -> variable_fetch .)
    TIMES           reduce using rule 68 (variable -> variable_fetch .)
    DIVIDE          reduce using rule 68 (variable -> variable_fetch .)
    MOD             reduce using rule 68 (variable -> variable_fetch .)
    NOT             reduce using rule 68 (variable -> variable_fetch .)
    INF             reduce using rule 68 (variable -> variable_fetch .)
    SUP             reduce using rule 68 (variable -> variable_fetch .)
    INFEQ           reduce using rule 68 (variable -> variable_fetch .)
    SUPEQ           reduce using rule 68 (variable -> variable_fetch .)


state 34

    (69) variable -> variable_print .

    DUP             reduce using rule 69 (variable -> variable_print .)
    NUMBER          reduce using rule 69 (variable -> variable_print .)
    STRING          reduce using rule 69 (variable -> variable_print .)
    STDOUT          reduce using rule 69 (variable -> variable_print .)
    DOT             reduce using rule 69 (variable -> variable_print .)
    SPACE           reduce using rule 69 (variable -> variable_print .)
    COMMENT_LINE    reduce using rule 69 (variable -> variable_print .)
    COMMENT_BLOCK   reduce using rule 69 (variable -> variable_print .)
    DROP            reduce using rule 69 (variable -> variable_print .)
    SWAP            reduce using rule 69 (variable -> variable_print .)
    ROT             reduce using rule 69 (variable -> variable_print .)
    OVER            reduce using rule 69 (variable -> variable_print .)
    CONCAT          reduce using rule 69 (variable -> variable_print .)
    CR              reduce using rule 69 (variable -> variable_print .)
    EMIT            reduce using rule 69 (variable -> variable_print .)
    CHAR            reduce using rule 69 (variable -> variable_print .)
    KEY             reduce using rule 69 (variable -> variable_print .)
    SPACES          reduce using rule 69 (variable -> variable_print .)
    2DUP            reduce using rule 69 (variable -> variable_print .)
    FUNC_BODY       reduce using rule 69 (variable -> variable_print .)
    FUNCTION        reduce using rule 69 (variable -> variable_print .)
    FUNCTION_CALL   reduce using rule 69 (variable -> variable_print .)
    VARIABLE_DEFENITION reduce using rule 69 (variable -> variable_print .)
    VARIABLE_ASSIGNMENT reduce using rule 69 (variable -> variable_print .)
    VARIABLE_FETCH  reduce using rule 69 (variable -> variable_print .)
    VARIABLE_PRINT  reduce using rule 69 (variable -> variable_print .)
    IF              reduce using rule 69 (variable -> variable_print .)
    ELSE            reduce using rule 69 (variable -> variable_print .)
    THEN            reduce using rule 69 (variable -> variable_print .)
    DO              reduce using rule 69 (variable -> variable_print .)
    LOOP            reduce using rule 69 (variable -> variable_print .)
    $end            reduce using rule 69 (variable -> variable_print .)
    PLUS            reduce using rule 69 (variable -> variable_print .)
    MINUS           reduce using rule 69 (variable -> variable_print .)
    TIMES           reduce using rule 69 (variable -> variable_print .)
    DIVIDE          reduce using rule 69 (variable -> variable_print .)
    MOD             reduce using rule 69 (variable -> variable_print .)
    NOT             reduce using rule 69 (variable -> variable_print .)
    INF             reduce using rule 69 (variable -> variable_print .)
    SUP             reduce using rule 69 (variable -> variable_print .)
    INFEQ           reduce using rule 69 (variable -> variable_print .)
    SUPEQ           reduce using rule 69 (variable -> variable_print .)


state 35

    (23) flow_control -> if .

    DUP             reduce using rule 23 (flow_control -> if .)
    NUMBER          reduce using rule 23 (flow_control -> if .)
    STRING          reduce using rule 23 (flow_control -> if .)
    STDOUT          reduce using rule 23 (flow_control -> if .)
    DOT             reduce using rule 23 (flow_control -> if .)
    SPACE           reduce using rule 23 (flow_control -> if .)
    COMMENT_LINE    reduce using rule 23 (flow_control -> if .)
    COMMENT_BLOCK   reduce using rule 23 (flow_control -> if .)
    DROP            reduce using rule 23 (flow_control -> if .)
    SWAP            reduce using rule 23 (flow_control -> if .)
    ROT             reduce using rule 23 (flow_control -> if .)
    OVER            reduce using rule 23 (flow_control -> if .)
    CONCAT          reduce using rule 23 (flow_control -> if .)
    CR              reduce using rule 23 (flow_control -> if .)
    EMIT            reduce using rule 23 (flow_control -> if .)
    CHAR            reduce using rule 23 (flow_control -> if .)
    KEY             reduce using rule 23 (flow_control -> if .)
    SPACES          reduce using rule 23 (flow_control -> if .)
    2DUP            reduce using rule 23 (flow_control -> if .)
    FUNC_BODY       reduce using rule 23 (flow_control -> if .)
    FUNCTION        reduce using rule 23 (flow_control -> if .)
    FUNCTION_CALL   reduce using rule 23 (flow_control -> if .)
    VARIABLE_DEFENITION reduce using rule 23 (flow_control -> if .)
    VARIABLE_ASSIGNMENT reduce using rule 23 (flow_control -> if .)
    VARIABLE_FETCH  reduce using rule 23 (flow_control -> if .)
    VARIABLE_PRINT  reduce using rule 23 (flow_control -> if .)
    IF              reduce using rule 23 (flow_control -> if .)
    ELSE            reduce using rule 23 (flow_control -> if .)
    THEN            reduce using rule 23 (flow_control -> if .)
    DO              reduce using rule 23 (flow_control -> if .)
    LOOP            reduce using rule 23 (flow_control -> if .)
    $end            reduce using rule 23 (flow_control -> if .)
    PLUS            reduce using rule 23 (flow_control -> if .)
    MINUS           reduce using rule 23 (flow_control -> if .)
    TIMES           reduce using rule 23 (flow_control -> if .)
    DIVIDE          reduce using rule 23 (flow_control -> if .)
    MOD             reduce using rule 23 (flow_control -> if .)
    NOT             reduce using rule 23 (flow_control -> if .)
    INF             reduce using rule 23 (flow_control -> if .)
    SUP             reduce using rule 23 (flow_control -> if .)
    INFEQ           reduce using rule 23 (flow_control -> if .)
    SUPEQ           reduce using rule 23 (flow_control -> if .)


state 36

    (24) flow_control -> else .

    DUP             reduce using rule 24 (flow_control -> else .)
    NUMBER          reduce using rule 24 (flow_control -> else .)
    STRING          reduce using rule 24 (flow_control -> else .)
    STDOUT          reduce using rule 24 (flow_control -> else .)
    DOT             reduce using rule 24 (flow_control -> else .)
    SPACE           reduce using rule 24 (flow_control -> else .)
    COMMENT_LINE    reduce using rule 24 (flow_control -> else .)
    COMMENT_BLOCK   reduce using rule 24 (flow_control -> else .)
    DROP            reduce using rule 24 (flow_control -> else .)
    SWAP            reduce using rule 24 (flow_control -> else .)
    ROT             reduce using rule 24 (flow_control -> else .)
    OVER            reduce using rule 24 (flow_control -> else .)
    CONCAT          reduce using rule 24 (flow_control -> else .)
    CR              reduce using rule 24 (flow_control -> else .)
    EMIT            reduce using rule 24 (flow_control -> else .)
    CHAR            reduce using rule 24 (flow_control -> else .)
    KEY             reduce using rule 24 (flow_control -> else .)
    SPACES          reduce using rule 24 (flow_control -> else .)
    2DUP            reduce using rule 24 (flow_control -> else .)
    FUNC_BODY       reduce using rule 24 (flow_control -> else .)
    FUNCTION        reduce using rule 24 (flow_control -> else .)
    FUNCTION_CALL   reduce using rule 24 (flow_control -> else .)
    VARIABLE_DEFENITION reduce using rule 24 (flow_control -> else .)
    VARIABLE_ASSIGNMENT reduce using rule 24 (flow_control -> else .)
    VARIABLE_FETCH  reduce using rule 24 (flow_control -> else .)
    VARIABLE_PRINT  reduce using rule 24 (flow_control -> else .)
    IF              reduce using rule 24 (flow_control -> else .)
    ELSE            reduce using rule 24 (flow_control -> else .)
    THEN            reduce using rule 24 (flow_control -> else .)
    DO              reduce using rule 24 (flow_control -> else .)
    LOOP            reduce using rule 24 (flow_control -> else .)
    $end            reduce using rule 24 (flow_control -> else .)
    PLUS            reduce using rule 24 (flow_control -> else .)
    MINUS           reduce using rule 24 (flow_control -> else .)
    TIMES           reduce using rule 24 (flow_control -> else .)
    DIVIDE          reduce using rule 24 (flow_control -> else .)
    MOD             reduce using rule 24 (flow_control -> else .)
    NOT             reduce using rule 24 (flow_control -> else .)
    INF             reduce using rule 24 (flow_control -> else .)
    SUP             reduce using rule 24 (flow_control -> else .)
    INFEQ           reduce using rule 24 (flow_control -> else .)
    SUPEQ           reduce using rule 24 (flow_control -> else .)


state 37

    (25) flow_control -> then .

    DUP             reduce using rule 25 (flow_control -> then .)
    NUMBER          reduce using rule 25 (flow_control -> then .)
    STRING          reduce using rule 25 (flow_control -> then .)
    STDOUT          reduce using rule 25 (flow_control -> then .)
    DOT             reduce using rule 25 (flow_control -> then .)
    SPACE           reduce using rule 25 (flow_control -> then .)
    COMMENT_LINE    reduce using rule 25 (flow_control -> then .)
    COMMENT_BLOCK   reduce using rule 25 (flow_control -> then .)
    DROP            reduce using rule 25 (flow_control -> then .)
    SWAP            reduce using rule 25 (flow_control -> then .)
    ROT             reduce using rule 25 (flow_control -> then .)
    OVER            reduce using rule 25 (flow_control -> then .)
    CONCAT          reduce using rule 25 (flow_control -> then .)
    CR              reduce using rule 25 (flow_control -> then .)
    EMIT            reduce using rule 25 (flow_control -> then .)
    CHAR            reduce using rule 25 (flow_control -> then .)
    KEY             reduce using rule 25 (flow_control -> then .)
    SPACES          reduce using rule 25 (flow_control -> then .)
    2DUP            reduce using rule 25 (flow_control -> then .)
    FUNC_BODY       reduce using rule 25 (flow_control -> then .)
    FUNCTION        reduce using rule 25 (flow_control -> then .)
    FUNCTION_CALL   reduce using rule 25 (flow_control -> then .)
    VARIABLE_DEFENITION reduce using rule 25 (flow_control -> then .)
    VARIABLE_ASSIGNMENT reduce using rule 25 (flow_control -> then .)
    VARIABLE_FETCH  reduce using rule 25 (flow_control -> then .)
    VARIABLE_PRINT  reduce using rule 25 (flow_control -> then .)
    IF              reduce using rule 25 (flow_control -> then .)
    ELSE            reduce using rule 25 (flow_control -> then .)
    THEN            reduce using rule 25 (flow_control -> then .)
    DO              reduce using rule 25 (flow_control -> then .)
    LOOP            reduce using rule 25 (flow_control -> then .)
    $end            reduce using rule 25 (flow_control -> then .)
    PLUS            reduce using rule 25 (flow_control -> then .)
    MINUS           reduce using rule 25 (flow_control -> then .)
    TIMES           reduce using rule 25 (flow_control -> then .)
    DIVIDE          reduce using rule 25 (flow_control -> then .)
    MOD             reduce using rule 25 (flow_control -> then .)
    NOT             reduce using rule 25 (flow_control -> then .)
    INF             reduce using rule 25 (flow_control -> then .)
    SUP             reduce using rule 25 (flow_control -> then .)
    INFEQ           reduce using rule 25 (flow_control -> then .)
    SUPEQ           reduce using rule 25 (flow_control -> then .)


state 38

    (26) flow_control -> do .

    DUP             reduce using rule 26 (flow_control -> do .)
    NUMBER          reduce using rule 26 (flow_control -> do .)
    STRING          reduce using rule 26 (flow_control -> do .)
    STDOUT          reduce using rule 26 (flow_control -> do .)
    DOT             reduce using rule 26 (flow_control -> do .)
    SPACE           reduce using rule 26 (flow_control -> do .)
    COMMENT_LINE    reduce using rule 26 (flow_control -> do .)
    COMMENT_BLOCK   reduce using rule 26 (flow_control -> do .)
    DROP            reduce using rule 26 (flow_control -> do .)
    SWAP            reduce using rule 26 (flow_control -> do .)
    ROT             reduce using rule 26 (flow_control -> do .)
    OVER            reduce using rule 26 (flow_control -> do .)
    CONCAT          reduce using rule 26 (flow_control -> do .)
    CR              reduce using rule 26 (flow_control -> do .)
    EMIT            reduce using rule 26 (flow_control -> do .)
    CHAR            reduce using rule 26 (flow_control -> do .)
    KEY             reduce using rule 26 (flow_control -> do .)
    SPACES          reduce using rule 26 (flow_control -> do .)
    2DUP            reduce using rule 26 (flow_control -> do .)
    FUNC_BODY       reduce using rule 26 (flow_control -> do .)
    FUNCTION        reduce using rule 26 (flow_control -> do .)
    FUNCTION_CALL   reduce using rule 26 (flow_control -> do .)
    VARIABLE_DEFENITION reduce using rule 26 (flow_control -> do .)
    VARIABLE_ASSIGNMENT reduce using rule 26 (flow_control -> do .)
    VARIABLE_FETCH  reduce using rule 26 (flow_control -> do .)
    VARIABLE_PRINT  reduce using rule 26 (flow_control -> do .)
    IF              reduce using rule 26 (flow_control -> do .)
    ELSE            reduce using rule 26 (flow_control -> do .)
    THEN            reduce using rule 26 (flow_control -> do .)
    DO              reduce using rule 26 (flow_control -> do .)
    LOOP            reduce using rule 26 (flow_control -> do .)
    $end            reduce using rule 26 (flow_control -> do .)
    PLUS            reduce using rule 26 (flow_control -> do .)
    MINUS           reduce using rule 26 (flow_control -> do .)
    TIMES           reduce using rule 26 (flow_control -> do .)
    DIVIDE          reduce using rule 26 (flow_control -> do .)
    MOD             reduce using rule 26 (flow_control -> do .)
    NOT             reduce using rule 26 (flow_control -> do .)
    INF             reduce using rule 26 (flow_control -> do .)
    SUP             reduce using rule 26 (flow_control -> do .)
    INFEQ           reduce using rule 26 (flow_control -> do .)
    SUPEQ           reduce using rule 26 (flow_control -> do .)


state 39

    (27) flow_control -> loop .

    DUP             reduce using rule 27 (flow_control -> loop .)
    NUMBER          reduce using rule 27 (flow_control -> loop .)
    STRING          reduce using rule 27 (flow_control -> loop .)
    STDOUT          reduce using rule 27 (flow_control -> loop .)
    DOT             reduce using rule 27 (flow_control -> loop .)
    SPACE           reduce using rule 27 (flow_control -> loop .)
    COMMENT_LINE    reduce using rule 27 (flow_control -> loop .)
    COMMENT_BLOCK   reduce using rule 27 (flow_control -> loop .)
    DROP            reduce using rule 27 (flow_control -> loop .)
    SWAP            reduce using rule 27 (flow_control -> loop .)
    ROT             reduce using rule 27 (flow_control -> loop .)
    OVER            reduce using rule 27 (flow_control -> loop .)
    CONCAT          reduce using rule 27 (flow_control -> loop .)
    CR              reduce using rule 27 (flow_control -> loop .)
    EMIT            reduce using rule 27 (flow_control -> loop .)
    CHAR            reduce using rule 27 (flow_control -> loop .)
    KEY             reduce using rule 27 (flow_control -> loop .)
    SPACES          reduce using rule 27 (flow_control -> loop .)
    2DUP            reduce using rule 27 (flow_control -> loop .)
    FUNC_BODY       reduce using rule 27 (flow_control -> loop .)
    FUNCTION        reduce using rule 27 (flow_control -> loop .)
    FUNCTION_CALL   reduce using rule 27 (flow_control -> loop .)
    VARIABLE_DEFENITION reduce using rule 27 (flow_control -> loop .)
    VARIABLE_ASSIGNMENT reduce using rule 27 (flow_control -> loop .)
    VARIABLE_FETCH  reduce using rule 27 (flow_control -> loop .)
    VARIABLE_PRINT  reduce using rule 27 (flow_control -> loop .)
    IF              reduce using rule 27 (flow_control -> loop .)
    ELSE            reduce using rule 27 (flow_control -> loop .)
    THEN            reduce using rule 27 (flow_control -> loop .)
    DO              reduce using rule 27 (flow_control -> loop .)
    LOOP            reduce using rule 27 (flow_control -> loop .)
    $end            reduce using rule 27 (flow_control -> loop .)
    PLUS            reduce using rule 27 (flow_control -> loop .)
    MINUS           reduce using rule 27 (flow_control -> loop .)
    TIMES           reduce using rule 27 (flow_control -> loop .)
    DIVIDE          reduce using rule 27 (flow_control -> loop .)
    MOD             reduce using rule 27 (flow_control -> loop .)
    NOT             reduce using rule 27 (flow_control -> loop .)
    INF             reduce using rule 27 (flow_control -> loop .)
    SUP             reduce using rule 27 (flow_control -> loop .)
    INFEQ           reduce using rule 27 (flow_control -> loop .)
    SUPEQ           reduce using rule 27 (flow_control -> loop .)


state 40

    (49) stdout -> STDOUT .

    DUP             reduce using rule 49 (stdout -> STDOUT .)
    NUMBER          reduce using rule 49 (stdout -> STDOUT .)
    STRING          reduce using rule 49 (stdout -> STDOUT .)
    STDOUT          reduce using rule 49 (stdout -> STDOUT .)
    DOT             reduce using rule 49 (stdout -> STDOUT .)
    SPACE           reduce using rule 49 (stdout -> STDOUT .)
    COMMENT_LINE    reduce using rule 49 (stdout -> STDOUT .)
    COMMENT_BLOCK   reduce using rule 49 (stdout -> STDOUT .)
    DROP            reduce using rule 49 (stdout -> STDOUT .)
    SWAP            reduce using rule 49 (stdout -> STDOUT .)
    ROT             reduce using rule 49 (stdout -> STDOUT .)
    OVER            reduce using rule 49 (stdout -> STDOUT .)
    CONCAT          reduce using rule 49 (stdout -> STDOUT .)
    CR              reduce using rule 49 (stdout -> STDOUT .)
    EMIT            reduce using rule 49 (stdout -> STDOUT .)
    CHAR            reduce using rule 49 (stdout -> STDOUT .)
    KEY             reduce using rule 49 (stdout -> STDOUT .)
    SPACES          reduce using rule 49 (stdout -> STDOUT .)
    2DUP            reduce using rule 49 (stdout -> STDOUT .)
    FUNC_BODY       reduce using rule 49 (stdout -> STDOUT .)
    FUNCTION        reduce using rule 49 (stdout -> STDOUT .)
    FUNCTION_CALL   reduce using rule 49 (stdout -> STDOUT .)
    VARIABLE_DEFENITION reduce using rule 49 (stdout -> STDOUT .)
    VARIABLE_ASSIGNMENT reduce using rule 49 (stdout -> STDOUT .)
    VARIABLE_FETCH  reduce using rule 49 (stdout -> STDOUT .)
    VARIABLE_PRINT  reduce using rule 49 (stdout -> STDOUT .)
    IF              reduce using rule 49 (stdout -> STDOUT .)
    ELSE            reduce using rule 49 (stdout -> STDOUT .)
    THEN            reduce using rule 49 (stdout -> STDOUT .)
    DO              reduce using rule 49 (stdout -> STDOUT .)
    LOOP            reduce using rule 49 (stdout -> STDOUT .)
    $end            reduce using rule 49 (stdout -> STDOUT .)
    PLUS            reduce using rule 49 (stdout -> STDOUT .)
    MINUS           reduce using rule 49 (stdout -> STDOUT .)
    TIMES           reduce using rule 49 (stdout -> STDOUT .)
    DIVIDE          reduce using rule 49 (stdout -> STDOUT .)
    MOD             reduce using rule 49 (stdout -> STDOUT .)
    NOT             reduce using rule 49 (stdout -> STDOUT .)
    INF             reduce using rule 49 (stdout -> STDOUT .)
    SUP             reduce using rule 49 (stdout -> STDOUT .)
    INFEQ           reduce using rule 49 (stdout -> STDOUT .)
    SUPEQ           reduce using rule 49 (stdout -> STDOUT .)


state 41

    (50) dot -> DOT .

    DUP             reduce using rule 50 (dot -> DOT .)
    NUMBER          reduce using rule 50 (dot -> DOT .)
    STRING          reduce using rule 50 (dot -> DOT .)
    STDOUT          reduce using rule 50 (dot -> DOT .)
    DOT             reduce using rule 50 (dot -> DOT .)
    SPACE           reduce using rule 50 (dot -> DOT .)
    COMMENT_LINE    reduce using rule 50 (dot -> DOT .)
    COMMENT_BLOCK   reduce using rule 50 (dot -> DOT .)
    DROP            reduce using rule 50 (dot -> DOT .)
    SWAP            reduce using rule 50 (dot -> DOT .)
    ROT             reduce using rule 50 (dot -> DOT .)
    OVER            reduce using rule 50 (dot -> DOT .)
    CONCAT          reduce using rule 50 (dot -> DOT .)
    CR              reduce using rule 50 (dot -> DOT .)
    EMIT            reduce using rule 50 (dot -> DOT .)
    CHAR            reduce using rule 50 (dot -> DOT .)
    KEY             reduce using rule 50 (dot -> DOT .)
    SPACES          reduce using rule 50 (dot -> DOT .)
    2DUP            reduce using rule 50 (dot -> DOT .)
    FUNC_BODY       reduce using rule 50 (dot -> DOT .)
    FUNCTION        reduce using rule 50 (dot -> DOT .)
    FUNCTION_CALL   reduce using rule 50 (dot -> DOT .)
    VARIABLE_DEFENITION reduce using rule 50 (dot -> DOT .)
    VARIABLE_ASSIGNMENT reduce using rule 50 (dot -> DOT .)
    VARIABLE_FETCH  reduce using rule 50 (dot -> DOT .)
    VARIABLE_PRINT  reduce using rule 50 (dot -> DOT .)
    IF              reduce using rule 50 (dot -> DOT .)
    ELSE            reduce using rule 50 (dot -> DOT .)
    THEN            reduce using rule 50 (dot -> DOT .)
    DO              reduce using rule 50 (dot -> DOT .)
    LOOP            reduce using rule 50 (dot -> DOT .)
    $end            reduce using rule 50 (dot -> DOT .)
    PLUS            reduce using rule 50 (dot -> DOT .)
    MINUS           reduce using rule 50 (dot -> DOT .)
    TIMES           reduce using rule 50 (dot -> DOT .)
    DIVIDE          reduce using rule 50 (dot -> DOT .)
    MOD             reduce using rule 50 (dot -> DOT .)
    NOT             reduce using rule 50 (dot -> DOT .)
    INF             reduce using rule 50 (dot -> DOT .)
    SUP             reduce using rule 50 (dot -> DOT .)
    INFEQ           reduce using rule 50 (dot -> DOT .)
    SUPEQ           reduce using rule 50 (dot -> DOT .)


state 42

    (51) space -> SPACE .

    DUP             reduce using rule 51 (space -> SPACE .)
    NUMBER          reduce using rule 51 (space -> SPACE .)
    STRING          reduce using rule 51 (space -> SPACE .)
    STDOUT          reduce using rule 51 (space -> SPACE .)
    DOT             reduce using rule 51 (space -> SPACE .)
    SPACE           reduce using rule 51 (space -> SPACE .)
    COMMENT_LINE    reduce using rule 51 (space -> SPACE .)
    COMMENT_BLOCK   reduce using rule 51 (space -> SPACE .)
    DROP            reduce using rule 51 (space -> SPACE .)
    SWAP            reduce using rule 51 (space -> SPACE .)
    ROT             reduce using rule 51 (space -> SPACE .)
    OVER            reduce using rule 51 (space -> SPACE .)
    CONCAT          reduce using rule 51 (space -> SPACE .)
    CR              reduce using rule 51 (space -> SPACE .)
    EMIT            reduce using rule 51 (space -> SPACE .)
    CHAR            reduce using rule 51 (space -> SPACE .)
    KEY             reduce using rule 51 (space -> SPACE .)
    SPACES          reduce using rule 51 (space -> SPACE .)
    2DUP            reduce using rule 51 (space -> SPACE .)
    FUNC_BODY       reduce using rule 51 (space -> SPACE .)
    FUNCTION        reduce using rule 51 (space -> SPACE .)
    FUNCTION_CALL   reduce using rule 51 (space -> SPACE .)
    VARIABLE_DEFENITION reduce using rule 51 (space -> SPACE .)
    VARIABLE_ASSIGNMENT reduce using rule 51 (space -> SPACE .)
    VARIABLE_FETCH  reduce using rule 51 (space -> SPACE .)
    VARIABLE_PRINT  reduce using rule 51 (space -> SPACE .)
    IF              reduce using rule 51 (space -> SPACE .)
    ELSE            reduce using rule 51 (space -> SPACE .)
    THEN            reduce using rule 51 (space -> SPACE .)
    DO              reduce using rule 51 (space -> SPACE .)
    LOOP            reduce using rule 51 (space -> SPACE .)
    $end            reduce using rule 51 (space -> SPACE .)
    PLUS            reduce using rule 51 (space -> SPACE .)
    MINUS           reduce using rule 51 (space -> SPACE .)
    TIMES           reduce using rule 51 (space -> SPACE .)
    DIVIDE          reduce using rule 51 (space -> SPACE .)
    MOD             reduce using rule 51 (space -> SPACE .)
    NOT             reduce using rule 51 (space -> SPACE .)
    INF             reduce using rule 51 (space -> SPACE .)
    SUP             reduce using rule 51 (space -> SPACE .)
    INFEQ           reduce using rule 51 (space -> SPACE .)
    SUPEQ           reduce using rule 51 (space -> SPACE .)


state 43

    (53) comment -> COMMENT_LINE .

    DUP             reduce using rule 53 (comment -> COMMENT_LINE .)
    NUMBER          reduce using rule 53 (comment -> COMMENT_LINE .)
    STRING          reduce using rule 53 (comment -> COMMENT_LINE .)
    STDOUT          reduce using rule 53 (comment -> COMMENT_LINE .)
    DOT             reduce using rule 53 (comment -> COMMENT_LINE .)
    SPACE           reduce using rule 53 (comment -> COMMENT_LINE .)
    COMMENT_LINE    reduce using rule 53 (comment -> COMMENT_LINE .)
    COMMENT_BLOCK   reduce using rule 53 (comment -> COMMENT_LINE .)
    DROP            reduce using rule 53 (comment -> COMMENT_LINE .)
    SWAP            reduce using rule 53 (comment -> COMMENT_LINE .)
    ROT             reduce using rule 53 (comment -> COMMENT_LINE .)
    OVER            reduce using rule 53 (comment -> COMMENT_LINE .)
    CONCAT          reduce using rule 53 (comment -> COMMENT_LINE .)
    CR              reduce using rule 53 (comment -> COMMENT_LINE .)
    EMIT            reduce using rule 53 (comment -> COMMENT_LINE .)
    CHAR            reduce using rule 53 (comment -> COMMENT_LINE .)
    KEY             reduce using rule 53 (comment -> COMMENT_LINE .)
    SPACES          reduce using rule 53 (comment -> COMMENT_LINE .)
    2DUP            reduce using rule 53 (comment -> COMMENT_LINE .)
    FUNC_BODY       reduce using rule 53 (comment -> COMMENT_LINE .)
    FUNCTION        reduce using rule 53 (comment -> COMMENT_LINE .)
    FUNCTION_CALL   reduce using rule 53 (comment -> COMMENT_LINE .)
    VARIABLE_DEFENITION reduce using rule 53 (comment -> COMMENT_LINE .)
    VARIABLE_ASSIGNMENT reduce using rule 53 (comment -> COMMENT_LINE .)
    VARIABLE_FETCH  reduce using rule 53 (comment -> COMMENT_LINE .)
    VARIABLE_PRINT  reduce using rule 53 (comment -> COMMENT_LINE .)
    IF              reduce using rule 53 (comment -> COMMENT_LINE .)
    ELSE            reduce using rule 53 (comment -> COMMENT_LINE .)
    THEN            reduce using rule 53 (comment -> COMMENT_LINE .)
    DO              reduce using rule 53 (comment -> COMMENT_LINE .)
    LOOP            reduce using rule 53 (comment -> COMMENT_LINE .)
    $end            reduce using rule 53 (comment -> COMMENT_LINE .)
    PLUS            reduce using rule 53 (comment -> COMMENT_LINE .)
    MINUS           reduce using rule 53 (comment -> COMMENT_LINE .)
    TIMES           reduce using rule 53 (comment -> COMMENT_LINE .)
    DIVIDE          reduce using rule 53 (comment -> COMMENT_LINE .)
    MOD             reduce using rule 53 (comment -> COMMENT_LINE .)
    NOT             reduce using rule 53 (comment -> COMMENT_LINE .)
    INF             reduce using rule 53 (comment -> COMMENT_LINE .)
    SUP             reduce using rule 53 (comment -> COMMENT_LINE .)
    INFEQ           reduce using rule 53 (comment -> COMMENT_LINE .)
    SUPEQ           reduce using rule 53 (comment -> COMMENT_LINE .)


state 44

    (54) comment -> COMMENT_BLOCK .

    DUP             reduce using rule 54 (comment -> COMMENT_BLOCK .)
    NUMBER          reduce using rule 54 (comment -> COMMENT_BLOCK .)
    STRING          reduce using rule 54 (comment -> COMMENT_BLOCK .)
    STDOUT          reduce using rule 54 (comment -> COMMENT_BLOCK .)
    DOT             reduce using rule 54 (comment -> COMMENT_BLOCK .)
    SPACE           reduce using rule 54 (comment -> COMMENT_BLOCK .)
    COMMENT_LINE    reduce using rule 54 (comment -> COMMENT_BLOCK .)
    COMMENT_BLOCK   reduce using rule 54 (comment -> COMMENT_BLOCK .)
    DROP            reduce using rule 54 (comment -> COMMENT_BLOCK .)
    SWAP            reduce using rule 54 (comment -> COMMENT_BLOCK .)
    ROT             reduce using rule 54 (comment -> COMMENT_BLOCK .)
    OVER            reduce using rule 54 (comment -> COMMENT_BLOCK .)
    CONCAT          reduce using rule 54 (comment -> COMMENT_BLOCK .)
    CR              reduce using rule 54 (comment -> COMMENT_BLOCK .)
    EMIT            reduce using rule 54 (comment -> COMMENT_BLOCK .)
    CHAR            reduce using rule 54 (comment -> COMMENT_BLOCK .)
    KEY             reduce using rule 54 (comment -> COMMENT_BLOCK .)
    SPACES          reduce using rule 54 (comment -> COMMENT_BLOCK .)
    2DUP            reduce using rule 54 (comment -> COMMENT_BLOCK .)
    FUNC_BODY       reduce using rule 54 (comment -> COMMENT_BLOCK .)
    FUNCTION        reduce using rule 54 (comment -> COMMENT_BLOCK .)
    FUNCTION_CALL   reduce using rule 54 (comment -> COMMENT_BLOCK .)
    VARIABLE_DEFENITION reduce using rule 54 (comment -> COMMENT_BLOCK .)
    VARIABLE_ASSIGNMENT reduce using rule 54 (comment -> COMMENT_BLOCK .)
    VARIABLE_FETCH  reduce using rule 54 (comment -> COMMENT_BLOCK .)
    VARIABLE_PRINT  reduce using rule 54 (comment -> COMMENT_BLOCK .)
    IF              reduce using rule 54 (comment -> COMMENT_BLOCK .)
    ELSE            reduce using rule 54 (comment -> COMMENT_BLOCK .)
    THEN            reduce using rule 54 (comment -> COMMENT_BLOCK .)
    DO              reduce using rule 54 (comment -> COMMENT_BLOCK .)
    LOOP            reduce using rule 54 (comment -> COMMENT_BLOCK .)
    $end            reduce using rule 54 (comment -> COMMENT_BLOCK .)
    PLUS            reduce using rule 54 (comment -> COMMENT_BLOCK .)
    MINUS           reduce using rule 54 (comment -> COMMENT_BLOCK .)
    TIMES           reduce using rule 54 (comment -> COMMENT_BLOCK .)
    DIVIDE          reduce using rule 54 (comment -> COMMENT_BLOCK .)
    MOD             reduce using rule 54 (comment -> COMMENT_BLOCK .)
    NOT             reduce using rule 54 (comment -> COMMENT_BLOCK .)
    INF             reduce using rule 54 (comment -> COMMENT_BLOCK .)
    SUP             reduce using rule 54 (comment -> COMMENT_BLOCK .)
    INFEQ           reduce using rule 54 (comment -> COMMENT_BLOCK .)
    SUPEQ           reduce using rule 54 (comment -> COMMENT_BLOCK .)


state 45

    (55) drop -> DROP .

    DUP             reduce using rule 55 (drop -> DROP .)
    NUMBER          reduce using rule 55 (drop -> DROP .)
    STRING          reduce using rule 55 (drop -> DROP .)
    STDOUT          reduce using rule 55 (drop -> DROP .)
    DOT             reduce using rule 55 (drop -> DROP .)
    SPACE           reduce using rule 55 (drop -> DROP .)
    COMMENT_LINE    reduce using rule 55 (drop -> DROP .)
    COMMENT_BLOCK   reduce using rule 55 (drop -> DROP .)
    DROP            reduce using rule 55 (drop -> DROP .)
    SWAP            reduce using rule 55 (drop -> DROP .)
    ROT             reduce using rule 55 (drop -> DROP .)
    OVER            reduce using rule 55 (drop -> DROP .)
    CONCAT          reduce using rule 55 (drop -> DROP .)
    CR              reduce using rule 55 (drop -> DROP .)
    EMIT            reduce using rule 55 (drop -> DROP .)
    CHAR            reduce using rule 55 (drop -> DROP .)
    KEY             reduce using rule 55 (drop -> DROP .)
    SPACES          reduce using rule 55 (drop -> DROP .)
    2DUP            reduce using rule 55 (drop -> DROP .)
    FUNC_BODY       reduce using rule 55 (drop -> DROP .)
    FUNCTION        reduce using rule 55 (drop -> DROP .)
    FUNCTION_CALL   reduce using rule 55 (drop -> DROP .)
    VARIABLE_DEFENITION reduce using rule 55 (drop -> DROP .)
    VARIABLE_ASSIGNMENT reduce using rule 55 (drop -> DROP .)
    VARIABLE_FETCH  reduce using rule 55 (drop -> DROP .)
    VARIABLE_PRINT  reduce using rule 55 (drop -> DROP .)
    IF              reduce using rule 55 (drop -> DROP .)
    ELSE            reduce using rule 55 (drop -> DROP .)
    THEN            reduce using rule 55 (drop -> DROP .)
    DO              reduce using rule 55 (drop -> DROP .)
    LOOP            reduce using rule 55 (drop -> DROP .)
    $end            reduce using rule 55 (drop -> DROP .)
    PLUS            reduce using rule 55 (drop -> DROP .)
    MINUS           reduce using rule 55 (drop -> DROP .)
    TIMES           reduce using rule 55 (drop -> DROP .)
    DIVIDE          reduce using rule 55 (drop -> DROP .)
    MOD             reduce using rule 55 (drop -> DROP .)
    NOT             reduce using rule 55 (drop -> DROP .)
    INF             reduce using rule 55 (drop -> DROP .)
    SUP             reduce using rule 55 (drop -> DROP .)
    INFEQ           reduce using rule 55 (drop -> DROP .)
    SUPEQ           reduce using rule 55 (drop -> DROP .)


state 46

    (56) swap -> SWAP .

    DUP             reduce using rule 56 (swap -> SWAP .)
    NUMBER          reduce using rule 56 (swap -> SWAP .)
    STRING          reduce using rule 56 (swap -> SWAP .)
    STDOUT          reduce using rule 56 (swap -> SWAP .)
    DOT             reduce using rule 56 (swap -> SWAP .)
    SPACE           reduce using rule 56 (swap -> SWAP .)
    COMMENT_LINE    reduce using rule 56 (swap -> SWAP .)
    COMMENT_BLOCK   reduce using rule 56 (swap -> SWAP .)
    DROP            reduce using rule 56 (swap -> SWAP .)
    SWAP            reduce using rule 56 (swap -> SWAP .)
    ROT             reduce using rule 56 (swap -> SWAP .)
    OVER            reduce using rule 56 (swap -> SWAP .)
    CONCAT          reduce using rule 56 (swap -> SWAP .)
    CR              reduce using rule 56 (swap -> SWAP .)
    EMIT            reduce using rule 56 (swap -> SWAP .)
    CHAR            reduce using rule 56 (swap -> SWAP .)
    KEY             reduce using rule 56 (swap -> SWAP .)
    SPACES          reduce using rule 56 (swap -> SWAP .)
    2DUP            reduce using rule 56 (swap -> SWAP .)
    FUNC_BODY       reduce using rule 56 (swap -> SWAP .)
    FUNCTION        reduce using rule 56 (swap -> SWAP .)
    FUNCTION_CALL   reduce using rule 56 (swap -> SWAP .)
    VARIABLE_DEFENITION reduce using rule 56 (swap -> SWAP .)
    VARIABLE_ASSIGNMENT reduce using rule 56 (swap -> SWAP .)
    VARIABLE_FETCH  reduce using rule 56 (swap -> SWAP .)
    VARIABLE_PRINT  reduce using rule 56 (swap -> SWAP .)
    IF              reduce using rule 56 (swap -> SWAP .)
    ELSE            reduce using rule 56 (swap -> SWAP .)
    THEN            reduce using rule 56 (swap -> SWAP .)
    DO              reduce using rule 56 (swap -> SWAP .)
    LOOP            reduce using rule 56 (swap -> SWAP .)
    $end            reduce using rule 56 (swap -> SWAP .)
    PLUS            reduce using rule 56 (swap -> SWAP .)
    MINUS           reduce using rule 56 (swap -> SWAP .)
    TIMES           reduce using rule 56 (swap -> SWAP .)
    DIVIDE          reduce using rule 56 (swap -> SWAP .)
    MOD             reduce using rule 56 (swap -> SWAP .)
    NOT             reduce using rule 56 (swap -> SWAP .)
    INF             reduce using rule 56 (swap -> SWAP .)
    SUP             reduce using rule 56 (swap -> SWAP .)
    INFEQ           reduce using rule 56 (swap -> SWAP .)
    SUPEQ           reduce using rule 56 (swap -> SWAP .)


state 47

    (57) rot -> ROT .

    DUP             reduce using rule 57 (rot -> ROT .)
    NUMBER          reduce using rule 57 (rot -> ROT .)
    STRING          reduce using rule 57 (rot -> ROT .)
    STDOUT          reduce using rule 57 (rot -> ROT .)
    DOT             reduce using rule 57 (rot -> ROT .)
    SPACE           reduce using rule 57 (rot -> ROT .)
    COMMENT_LINE    reduce using rule 57 (rot -> ROT .)
    COMMENT_BLOCK   reduce using rule 57 (rot -> ROT .)
    DROP            reduce using rule 57 (rot -> ROT .)
    SWAP            reduce using rule 57 (rot -> ROT .)
    ROT             reduce using rule 57 (rot -> ROT .)
    OVER            reduce using rule 57 (rot -> ROT .)
    CONCAT          reduce using rule 57 (rot -> ROT .)
    CR              reduce using rule 57 (rot -> ROT .)
    EMIT            reduce using rule 57 (rot -> ROT .)
    CHAR            reduce using rule 57 (rot -> ROT .)
    KEY             reduce using rule 57 (rot -> ROT .)
    SPACES          reduce using rule 57 (rot -> ROT .)
    2DUP            reduce using rule 57 (rot -> ROT .)
    FUNC_BODY       reduce using rule 57 (rot -> ROT .)
    FUNCTION        reduce using rule 57 (rot -> ROT .)
    FUNCTION_CALL   reduce using rule 57 (rot -> ROT .)
    VARIABLE_DEFENITION reduce using rule 57 (rot -> ROT .)
    VARIABLE_ASSIGNMENT reduce using rule 57 (rot -> ROT .)
    VARIABLE_FETCH  reduce using rule 57 (rot -> ROT .)
    VARIABLE_PRINT  reduce using rule 57 (rot -> ROT .)
    IF              reduce using rule 57 (rot -> ROT .)
    ELSE            reduce using rule 57 (rot -> ROT .)
    THEN            reduce using rule 57 (rot -> ROT .)
    DO              reduce using rule 57 (rot -> ROT .)
    LOOP            reduce using rule 57 (rot -> ROT .)
    $end            reduce using rule 57 (rot -> ROT .)
    PLUS            reduce using rule 57 (rot -> ROT .)
    MINUS           reduce using rule 57 (rot -> ROT .)
    TIMES           reduce using rule 57 (rot -> ROT .)
    DIVIDE          reduce using rule 57 (rot -> ROT .)
    MOD             reduce using rule 57 (rot -> ROT .)
    NOT             reduce using rule 57 (rot -> ROT .)
    INF             reduce using rule 57 (rot -> ROT .)
    SUP             reduce using rule 57 (rot -> ROT .)
    INFEQ           reduce using rule 57 (rot -> ROT .)
    SUPEQ           reduce using rule 57 (rot -> ROT .)


state 48

    (58) over -> OVER .

    DUP             reduce using rule 58 (over -> OVER .)
    NUMBER          reduce using rule 58 (over -> OVER .)
    STRING          reduce using rule 58 (over -> OVER .)
    STDOUT          reduce using rule 58 (over -> OVER .)
    DOT             reduce using rule 58 (over -> OVER .)
    SPACE           reduce using rule 58 (over -> OVER .)
    COMMENT_LINE    reduce using rule 58 (over -> OVER .)
    COMMENT_BLOCK   reduce using rule 58 (over -> OVER .)
    DROP            reduce using rule 58 (over -> OVER .)
    SWAP            reduce using rule 58 (over -> OVER .)
    ROT             reduce using rule 58 (over -> OVER .)
    OVER            reduce using rule 58 (over -> OVER .)
    CONCAT          reduce using rule 58 (over -> OVER .)
    CR              reduce using rule 58 (over -> OVER .)
    EMIT            reduce using rule 58 (over -> OVER .)
    CHAR            reduce using rule 58 (over -> OVER .)
    KEY             reduce using rule 58 (over -> OVER .)
    SPACES          reduce using rule 58 (over -> OVER .)
    2DUP            reduce using rule 58 (over -> OVER .)
    FUNC_BODY       reduce using rule 58 (over -> OVER .)
    FUNCTION        reduce using rule 58 (over -> OVER .)
    FUNCTION_CALL   reduce using rule 58 (over -> OVER .)
    VARIABLE_DEFENITION reduce using rule 58 (over -> OVER .)
    VARIABLE_ASSIGNMENT reduce using rule 58 (over -> OVER .)
    VARIABLE_FETCH  reduce using rule 58 (over -> OVER .)
    VARIABLE_PRINT  reduce using rule 58 (over -> OVER .)
    IF              reduce using rule 58 (over -> OVER .)
    ELSE            reduce using rule 58 (over -> OVER .)
    THEN            reduce using rule 58 (over -> OVER .)
    DO              reduce using rule 58 (over -> OVER .)
    LOOP            reduce using rule 58 (over -> OVER .)
    $end            reduce using rule 58 (over -> OVER .)
    PLUS            reduce using rule 58 (over -> OVER .)
    MINUS           reduce using rule 58 (over -> OVER .)
    TIMES           reduce using rule 58 (over -> OVER .)
    DIVIDE          reduce using rule 58 (over -> OVER .)
    MOD             reduce using rule 58 (over -> OVER .)
    NOT             reduce using rule 58 (over -> OVER .)
    INF             reduce using rule 58 (over -> OVER .)
    SUP             reduce using rule 58 (over -> OVER .)
    INFEQ           reduce using rule 58 (over -> OVER .)
    SUPEQ           reduce using rule 58 (over -> OVER .)


state 49

    (59) concat -> CONCAT .

    DUP             reduce using rule 59 (concat -> CONCAT .)
    NUMBER          reduce using rule 59 (concat -> CONCAT .)
    STRING          reduce using rule 59 (concat -> CONCAT .)
    STDOUT          reduce using rule 59 (concat -> CONCAT .)
    DOT             reduce using rule 59 (concat -> CONCAT .)
    SPACE           reduce using rule 59 (concat -> CONCAT .)
    COMMENT_LINE    reduce using rule 59 (concat -> CONCAT .)
    COMMENT_BLOCK   reduce using rule 59 (concat -> CONCAT .)
    DROP            reduce using rule 59 (concat -> CONCAT .)
    SWAP            reduce using rule 59 (concat -> CONCAT .)
    ROT             reduce using rule 59 (concat -> CONCAT .)
    OVER            reduce using rule 59 (concat -> CONCAT .)
    CONCAT          reduce using rule 59 (concat -> CONCAT .)
    CR              reduce using rule 59 (concat -> CONCAT .)
    EMIT            reduce using rule 59 (concat -> CONCAT .)
    CHAR            reduce using rule 59 (concat -> CONCAT .)
    KEY             reduce using rule 59 (concat -> CONCAT .)
    SPACES          reduce using rule 59 (concat -> CONCAT .)
    2DUP            reduce using rule 59 (concat -> CONCAT .)
    FUNC_BODY       reduce using rule 59 (concat -> CONCAT .)
    FUNCTION        reduce using rule 59 (concat -> CONCAT .)
    FUNCTION_CALL   reduce using rule 59 (concat -> CONCAT .)
    VARIABLE_DEFENITION reduce using rule 59 (concat -> CONCAT .)
    VARIABLE_ASSIGNMENT reduce using rule 59 (concat -> CONCAT .)
    VARIABLE_FETCH  reduce using rule 59 (concat -> CONCAT .)
    VARIABLE_PRINT  reduce using rule 59 (concat -> CONCAT .)
    IF              reduce using rule 59 (concat -> CONCAT .)
    ELSE            reduce using rule 59 (concat -> CONCAT .)
    THEN            reduce using rule 59 (concat -> CONCAT .)
    DO              reduce using rule 59 (concat -> CONCAT .)
    LOOP            reduce using rule 59 (concat -> CONCAT .)
    $end            reduce using rule 59 (concat -> CONCAT .)
    PLUS            reduce using rule 59 (concat -> CONCAT .)
    MINUS           reduce using rule 59 (concat -> CONCAT .)
    TIMES           reduce using rule 59 (concat -> CONCAT .)
    DIVIDE          reduce using rule 59 (concat -> CONCAT .)
    MOD             reduce using rule 59 (concat -> CONCAT .)
    NOT             reduce using rule 59 (concat -> CONCAT .)
    INF             reduce using rule 59 (concat -> CONCAT .)
    SUP             reduce using rule 59 (concat -> CONCAT .)
    INFEQ           reduce using rule 59 (concat -> CONCAT .)
    SUPEQ           reduce using rule 59 (concat -> CONCAT .)


state 50

    (60) cr -> CR .

    DUP             reduce using rule 60 (cr -> CR .)
    NUMBER          reduce using rule 60 (cr -> CR .)
    STRING          reduce using rule 60 (cr -> CR .)
    STDOUT          reduce using rule 60 (cr -> CR .)
    DOT             reduce using rule 60 (cr -> CR .)
    SPACE           reduce using rule 60 (cr -> CR .)
    COMMENT_LINE    reduce using rule 60 (cr -> CR .)
    COMMENT_BLOCK   reduce using rule 60 (cr -> CR .)
    DROP            reduce using rule 60 (cr -> CR .)
    SWAP            reduce using rule 60 (cr -> CR .)
    ROT             reduce using rule 60 (cr -> CR .)
    OVER            reduce using rule 60 (cr -> CR .)
    CONCAT          reduce using rule 60 (cr -> CR .)
    CR              reduce using rule 60 (cr -> CR .)
    EMIT            reduce using rule 60 (cr -> CR .)
    CHAR            reduce using rule 60 (cr -> CR .)
    KEY             reduce using rule 60 (cr -> CR .)
    SPACES          reduce using rule 60 (cr -> CR .)
    2DUP            reduce using rule 60 (cr -> CR .)
    FUNC_BODY       reduce using rule 60 (cr -> CR .)
    FUNCTION        reduce using rule 60 (cr -> CR .)
    FUNCTION_CALL   reduce using rule 60 (cr -> CR .)
    VARIABLE_DEFENITION reduce using rule 60 (cr -> CR .)
    VARIABLE_ASSIGNMENT reduce using rule 60 (cr -> CR .)
    VARIABLE_FETCH  reduce using rule 60 (cr -> CR .)
    VARIABLE_PRINT  reduce using rule 60 (cr -> CR .)
    IF              reduce using rule 60 (cr -> CR .)
    ELSE            reduce using rule 60 (cr -> CR .)
    THEN            reduce using rule 60 (cr -> CR .)
    DO              reduce using rule 60 (cr -> CR .)
    LOOP            reduce using rule 60 (cr -> CR .)
    $end            reduce using rule 60 (cr -> CR .)
    PLUS            reduce using rule 60 (cr -> CR .)
    MINUS           reduce using rule 60 (cr -> CR .)
    TIMES           reduce using rule 60 (cr -> CR .)
    DIVIDE          reduce using rule 60 (cr -> CR .)
    MOD             reduce using rule 60 (cr -> CR .)
    NOT             reduce using rule 60 (cr -> CR .)
    INF             reduce using rule 60 (cr -> CR .)
    SUP             reduce using rule 60 (cr -> CR .)
    INFEQ           reduce using rule 60 (cr -> CR .)
    SUPEQ           reduce using rule 60 (cr -> CR .)


state 51

    (61) emit -> EMIT .

    DUP             reduce using rule 61 (emit -> EMIT .)
    NUMBER          reduce using rule 61 (emit -> EMIT .)
    STRING          reduce using rule 61 (emit -> EMIT .)
    STDOUT          reduce using rule 61 (emit -> EMIT .)
    DOT             reduce using rule 61 (emit -> EMIT .)
    SPACE           reduce using rule 61 (emit -> EMIT .)
    COMMENT_LINE    reduce using rule 61 (emit -> EMIT .)
    COMMENT_BLOCK   reduce using rule 61 (emit -> EMIT .)
    DROP            reduce using rule 61 (emit -> EMIT .)
    SWAP            reduce using rule 61 (emit -> EMIT .)
    ROT             reduce using rule 61 (emit -> EMIT .)
    OVER            reduce using rule 61 (emit -> EMIT .)
    CONCAT          reduce using rule 61 (emit -> EMIT .)
    CR              reduce using rule 61 (emit -> EMIT .)
    EMIT            reduce using rule 61 (emit -> EMIT .)
    CHAR            reduce using rule 61 (emit -> EMIT .)
    KEY             reduce using rule 61 (emit -> EMIT .)
    SPACES          reduce using rule 61 (emit -> EMIT .)
    2DUP            reduce using rule 61 (emit -> EMIT .)
    FUNC_BODY       reduce using rule 61 (emit -> EMIT .)
    FUNCTION        reduce using rule 61 (emit -> EMIT .)
    FUNCTION_CALL   reduce using rule 61 (emit -> EMIT .)
    VARIABLE_DEFENITION reduce using rule 61 (emit -> EMIT .)
    VARIABLE_ASSIGNMENT reduce using rule 61 (emit -> EMIT .)
    VARIABLE_FETCH  reduce using rule 61 (emit -> EMIT .)
    VARIABLE_PRINT  reduce using rule 61 (emit -> EMIT .)
    IF              reduce using rule 61 (emit -> EMIT .)
    ELSE            reduce using rule 61 (emit -> EMIT .)
    THEN            reduce using rule 61 (emit -> EMIT .)
    DO              reduce using rule 61 (emit -> EMIT .)
    LOOP            reduce using rule 61 (emit -> EMIT .)
    $end            reduce using rule 61 (emit -> EMIT .)
    PLUS            reduce using rule 61 (emit -> EMIT .)
    MINUS           reduce using rule 61 (emit -> EMIT .)
    TIMES           reduce using rule 61 (emit -> EMIT .)
    DIVIDE          reduce using rule 61 (emit -> EMIT .)
    MOD             reduce using rule 61 (emit -> EMIT .)
    NOT             reduce using rule 61 (emit -> EMIT .)
    INF             reduce using rule 61 (emit -> EMIT .)
    SUP             reduce using rule 61 (emit -> EMIT .)
    INFEQ           reduce using rule 61 (emit -> EMIT .)
    SUPEQ           reduce using rule 61 (emit -> EMIT .)


state 52

    (62) char -> CHAR .

    DUP             reduce using rule 62 (char -> CHAR .)
    NUMBER          reduce using rule 62 (char -> CHAR .)
    STRING          reduce using rule 62 (char -> CHAR .)
    STDOUT          reduce using rule 62 (char -> CHAR .)
    DOT             reduce using rule 62 (char -> CHAR .)
    SPACE           reduce using rule 62 (char -> CHAR .)
    COMMENT_LINE    reduce using rule 62 (char -> CHAR .)
    COMMENT_BLOCK   reduce using rule 62 (char -> CHAR .)
    DROP            reduce using rule 62 (char -> CHAR .)
    SWAP            reduce using rule 62 (char -> CHAR .)
    ROT             reduce using rule 62 (char -> CHAR .)
    OVER            reduce using rule 62 (char -> CHAR .)
    CONCAT          reduce using rule 62 (char -> CHAR .)
    CR              reduce using rule 62 (char -> CHAR .)
    EMIT            reduce using rule 62 (char -> CHAR .)
    CHAR            reduce using rule 62 (char -> CHAR .)
    KEY             reduce using rule 62 (char -> CHAR .)
    SPACES          reduce using rule 62 (char -> CHAR .)
    2DUP            reduce using rule 62 (char -> CHAR .)
    FUNC_BODY       reduce using rule 62 (char -> CHAR .)
    FUNCTION        reduce using rule 62 (char -> CHAR .)
    FUNCTION_CALL   reduce using rule 62 (char -> CHAR .)
    VARIABLE_DEFENITION reduce using rule 62 (char -> CHAR .)
    VARIABLE_ASSIGNMENT reduce using rule 62 (char -> CHAR .)
    VARIABLE_FETCH  reduce using rule 62 (char -> CHAR .)
    VARIABLE_PRINT  reduce using rule 62 (char -> CHAR .)
    IF              reduce using rule 62 (char -> CHAR .)
    ELSE            reduce using rule 62 (char -> CHAR .)
    THEN            reduce using rule 62 (char -> CHAR .)
    DO              reduce using rule 62 (char -> CHAR .)
    LOOP            reduce using rule 62 (char -> CHAR .)
    $end            reduce using rule 62 (char -> CHAR .)
    PLUS            reduce using rule 62 (char -> CHAR .)
    MINUS           reduce using rule 62 (char -> CHAR .)
    TIMES           reduce using rule 62 (char -> CHAR .)
    DIVIDE          reduce using rule 62 (char -> CHAR .)
    MOD             reduce using rule 62 (char -> CHAR .)
    NOT             reduce using rule 62 (char -> CHAR .)
    INF             reduce using rule 62 (char -> CHAR .)
    SUP             reduce using rule 62 (char -> CHAR .)
    INFEQ           reduce using rule 62 (char -> CHAR .)
    SUPEQ           reduce using rule 62 (char -> CHAR .)


state 53

    (63) key -> KEY .

    DUP             reduce using rule 63 (key -> KEY .)
    NUMBER          reduce using rule 63 (key -> KEY .)
    STRING          reduce using rule 63 (key -> KEY .)
    STDOUT          reduce using rule 63 (key -> KEY .)
    DOT             reduce using rule 63 (key -> KEY .)
    SPACE           reduce using rule 63 (key -> KEY .)
    COMMENT_LINE    reduce using rule 63 (key -> KEY .)
    COMMENT_BLOCK   reduce using rule 63 (key -> KEY .)
    DROP            reduce using rule 63 (key -> KEY .)
    SWAP            reduce using rule 63 (key -> KEY .)
    ROT             reduce using rule 63 (key -> KEY .)
    OVER            reduce using rule 63 (key -> KEY .)
    CONCAT          reduce using rule 63 (key -> KEY .)
    CR              reduce using rule 63 (key -> KEY .)
    EMIT            reduce using rule 63 (key -> KEY .)
    CHAR            reduce using rule 63 (key -> KEY .)
    KEY             reduce using rule 63 (key -> KEY .)
    SPACES          reduce using rule 63 (key -> KEY .)
    2DUP            reduce using rule 63 (key -> KEY .)
    FUNC_BODY       reduce using rule 63 (key -> KEY .)
    FUNCTION        reduce using rule 63 (key -> KEY .)
    FUNCTION_CALL   reduce using rule 63 (key -> KEY .)
    VARIABLE_DEFENITION reduce using rule 63 (key -> KEY .)
    VARIABLE_ASSIGNMENT reduce using rule 63 (key -> KEY .)
    VARIABLE_FETCH  reduce using rule 63 (key -> KEY .)
    VARIABLE_PRINT  reduce using rule 63 (key -> KEY .)
    IF              reduce using rule 63 (key -> KEY .)
    ELSE            reduce using rule 63 (key -> KEY .)
    THEN            reduce using rule 63 (key -> KEY .)
    DO              reduce using rule 63 (key -> KEY .)
    LOOP            reduce using rule 63 (key -> KEY .)
    $end            reduce using rule 63 (key -> KEY .)
    PLUS            reduce using rule 63 (key -> KEY .)
    MINUS           reduce using rule 63 (key -> KEY .)
    TIMES           reduce using rule 63 (key -> KEY .)
    DIVIDE          reduce using rule 63 (key -> KEY .)
    MOD             reduce using rule 63 (key -> KEY .)
    NOT             reduce using rule 63 (key -> KEY .)
    INF             reduce using rule 63 (key -> KEY .)
    SUP             reduce using rule 63 (key -> KEY .)
    INFEQ           reduce using rule 63 (key -> KEY .)
    SUPEQ           reduce using rule 63 (key -> KEY .)


state 54

    (64) spaces -> SPACES .

    DUP             reduce using rule 64 (spaces -> SPACES .)
    NUMBER          reduce using rule 64 (spaces -> SPACES .)
    STRING          reduce using rule 64 (spaces -> SPACES .)
    STDOUT          reduce using rule 64 (spaces -> SPACES .)
    DOT             reduce using rule 64 (spaces -> SPACES .)
    SPACE           reduce using rule 64 (spaces -> SPACES .)
    COMMENT_LINE    reduce using rule 64 (spaces -> SPACES .)
    COMMENT_BLOCK   reduce using rule 64 (spaces -> SPACES .)
    DROP            reduce using rule 64 (spaces -> SPACES .)
    SWAP            reduce using rule 64 (spaces -> SPACES .)
    ROT             reduce using rule 64 (spaces -> SPACES .)
    OVER            reduce using rule 64 (spaces -> SPACES .)
    CONCAT          reduce using rule 64 (spaces -> SPACES .)
    CR              reduce using rule 64 (spaces -> SPACES .)
    EMIT            reduce using rule 64 (spaces -> SPACES .)
    CHAR            reduce using rule 64 (spaces -> SPACES .)
    KEY             reduce using rule 64 (spaces -> SPACES .)
    SPACES          reduce using rule 64 (spaces -> SPACES .)
    2DUP            reduce using rule 64 (spaces -> SPACES .)
    FUNC_BODY       reduce using rule 64 (spaces -> SPACES .)
    FUNCTION        reduce using rule 64 (spaces -> SPACES .)
    FUNCTION_CALL   reduce using rule 64 (spaces -> SPACES .)
    VARIABLE_DEFENITION reduce using rule 64 (spaces -> SPACES .)
    VARIABLE_ASSIGNMENT reduce using rule 64 (spaces -> SPACES .)
    VARIABLE_FETCH  reduce using rule 64 (spaces -> SPACES .)
    VARIABLE_PRINT  reduce using rule 64 (spaces -> SPACES .)
    IF              reduce using rule 64 (spaces -> SPACES .)
    ELSE            reduce using rule 64 (spaces -> SPACES .)
    THEN            reduce using rule 64 (spaces -> SPACES .)
    DO              reduce using rule 64 (spaces -> SPACES .)
    LOOP            reduce using rule 64 (spaces -> SPACES .)
    $end            reduce using rule 64 (spaces -> SPACES .)
    PLUS            reduce using rule 64 (spaces -> SPACES .)
    MINUS           reduce using rule 64 (spaces -> SPACES .)
    TIMES           reduce using rule 64 (spaces -> SPACES .)
    DIVIDE          reduce using rule 64 (spaces -> SPACES .)
    MOD             reduce using rule 64 (spaces -> SPACES .)
    NOT             reduce using rule 64 (spaces -> SPACES .)
    INF             reduce using rule 64 (spaces -> SPACES .)
    SUP             reduce using rule 64 (spaces -> SPACES .)
    INFEQ           reduce using rule 64 (spaces -> SPACES .)
    SUPEQ           reduce using rule 64 (spaces -> SPACES .)


state 55

    (65) 2dup -> 2DUP .

    DUP             reduce using rule 65 (2dup -> 2DUP .)
    NUMBER          reduce using rule 65 (2dup -> 2DUP .)
    STRING          reduce using rule 65 (2dup -> 2DUP .)
    STDOUT          reduce using rule 65 (2dup -> 2DUP .)
    DOT             reduce using rule 65 (2dup -> 2DUP .)
    SPACE           reduce using rule 65 (2dup -> 2DUP .)
    COMMENT_LINE    reduce using rule 65 (2dup -> 2DUP .)
    COMMENT_BLOCK   reduce using rule 65 (2dup -> 2DUP .)
    DROP            reduce using rule 65 (2dup -> 2DUP .)
    SWAP            reduce using rule 65 (2dup -> 2DUP .)
    ROT             reduce using rule 65 (2dup -> 2DUP .)
    OVER            reduce using rule 65 (2dup -> 2DUP .)
    CONCAT          reduce using rule 65 (2dup -> 2DUP .)
    CR              reduce using rule 65 (2dup -> 2DUP .)
    EMIT            reduce using rule 65 (2dup -> 2DUP .)
    CHAR            reduce using rule 65 (2dup -> 2DUP .)
    KEY             reduce using rule 65 (2dup -> 2DUP .)
    SPACES          reduce using rule 65 (2dup -> 2DUP .)
    2DUP            reduce using rule 65 (2dup -> 2DUP .)
    FUNC_BODY       reduce using rule 65 (2dup -> 2DUP .)
    FUNCTION        reduce using rule 65 (2dup -> 2DUP .)
    FUNCTION_CALL   reduce using rule 65 (2dup -> 2DUP .)
    VARIABLE_DEFENITION reduce using rule 65 (2dup -> 2DUP .)
    VARIABLE_ASSIGNMENT reduce using rule 65 (2dup -> 2DUP .)
    VARIABLE_FETCH  reduce using rule 65 (2dup -> 2DUP .)
    VARIABLE_PRINT  reduce using rule 65 (2dup -> 2DUP .)
    IF              reduce using rule 65 (2dup -> 2DUP .)
    ELSE            reduce using rule 65 (2dup -> 2DUP .)
    THEN            reduce using rule 65 (2dup -> 2DUP .)
    DO              reduce using rule 65 (2dup -> 2DUP .)
    LOOP            reduce using rule 65 (2dup -> 2DUP .)
    $end            reduce using rule 65 (2dup -> 2DUP .)
    PLUS            reduce using rule 65 (2dup -> 2DUP .)
    MINUS           reduce using rule 65 (2dup -> 2DUP .)
    TIMES           reduce using rule 65 (2dup -> 2DUP .)
    DIVIDE          reduce using rule 65 (2dup -> 2DUP .)
    MOD             reduce using rule 65 (2dup -> 2DUP .)
    NOT             reduce using rule 65 (2dup -> 2DUP .)
    INF             reduce using rule 65 (2dup -> 2DUP .)
    SUP             reduce using rule 65 (2dup -> 2DUP .)
    INFEQ           reduce using rule 65 (2dup -> 2DUP .)
    SUPEQ           reduce using rule 65 (2dup -> 2DUP .)


state 56

    (80) func_criada -> FUNC_BODY .

    FUNCTION        reduce using rule 80 (func_criada -> FUNC_BODY .)
    FUNCTION_CALL   reduce using rule 80 (func_criada -> FUNC_BODY .)
    FUNC_BODY       reduce using rule 80 (func_criada -> FUNC_BODY .)
    DUP             reduce using rule 80 (func_criada -> FUNC_BODY .)
    NUMBER          reduce using rule 80 (func_criada -> FUNC_BODY .)
    STRING          reduce using rule 80 (func_criada -> FUNC_BODY .)
    STDOUT          reduce using rule 80 (func_criada -> FUNC_BODY .)
    DOT             reduce using rule 80 (func_criada -> FUNC_BODY .)
    SPACE           reduce using rule 80 (func_criada -> FUNC_BODY .)
    COMMENT_LINE    reduce using rule 80 (func_criada -> FUNC_BODY .)
    COMMENT_BLOCK   reduce using rule 80 (func_criada -> FUNC_BODY .)
    DROP            reduce using rule 80 (func_criada -> FUNC_BODY .)
    SWAP            reduce using rule 80 (func_criada -> FUNC_BODY .)
    ROT             reduce using rule 80 (func_criada -> FUNC_BODY .)
    OVER            reduce using rule 80 (func_criada -> FUNC_BODY .)
    CONCAT          reduce using rule 80 (func_criada -> FUNC_BODY .)
    CR              reduce using rule 80 (func_criada -> FUNC_BODY .)
    EMIT            reduce using rule 80 (func_criada -> FUNC_BODY .)
    CHAR            reduce using rule 80 (func_criada -> FUNC_BODY .)
    KEY             reduce using rule 80 (func_criada -> FUNC_BODY .)
    SPACES          reduce using rule 80 (func_criada -> FUNC_BODY .)
    2DUP            reduce using rule 80 (func_criada -> FUNC_BODY .)
    VARIABLE_DEFENITION reduce using rule 80 (func_criada -> FUNC_BODY .)
    VARIABLE_ASSIGNMENT reduce using rule 80 (func_criada -> FUNC_BODY .)
    VARIABLE_FETCH  reduce using rule 80 (func_criada -> FUNC_BODY .)
    VARIABLE_PRINT  reduce using rule 80 (func_criada -> FUNC_BODY .)
    IF              reduce using rule 80 (func_criada -> FUNC_BODY .)
    ELSE            reduce using rule 80 (func_criada -> FUNC_BODY .)
    THEN            reduce using rule 80 (func_criada -> FUNC_BODY .)
    DO              reduce using rule 80 (func_criada -> FUNC_BODY .)
    LOOP            reduce using rule 80 (func_criada -> FUNC_BODY .)
    $end            reduce using rule 80 (func_criada -> FUNC_BODY .)
    PLUS            reduce using rule 80 (func_criada -> FUNC_BODY .)
    MINUS           reduce using rule 80 (func_criada -> FUNC_BODY .)
    TIMES           reduce using rule 80 (func_criada -> FUNC_BODY .)
    DIVIDE          reduce using rule 80 (func_criada -> FUNC_BODY .)
    MOD             reduce using rule 80 (func_criada -> FUNC_BODY .)
    NOT             reduce using rule 80 (func_criada -> FUNC_BODY .)
    INF             reduce using rule 80 (func_criada -> FUNC_BODY .)
    SUP             reduce using rule 80 (func_criada -> FUNC_BODY .)
    INFEQ           reduce using rule 80 (func_criada -> FUNC_BODY .)
    SUPEQ           reduce using rule 80 (func_criada -> FUNC_BODY .)


state 57

    (78) function -> FUNCTION .

    FUNCTION        reduce using rule 78 (function -> FUNCTION .)
    FUNCTION_CALL   reduce using rule 78 (function -> FUNCTION .)
    FUNC_BODY       reduce using rule 78 (function -> FUNCTION .)
    DUP             reduce using rule 78 (function -> FUNCTION .)
    NUMBER          reduce using rule 78 (function -> FUNCTION .)
    STRING          reduce using rule 78 (function -> FUNCTION .)
    STDOUT          reduce using rule 78 (function -> FUNCTION .)
    DOT             reduce using rule 78 (function -> FUNCTION .)
    SPACE           reduce using rule 78 (function -> FUNCTION .)
    COMMENT_LINE    reduce using rule 78 (function -> FUNCTION .)
    COMMENT_BLOCK   reduce using rule 78 (function -> FUNCTION .)
    DROP            reduce using rule 78 (function -> FUNCTION .)
    SWAP            reduce using rule 78 (function -> FUNCTION .)
    ROT             reduce using rule 78 (function -> FUNCTION .)
    OVER            reduce using rule 78 (function -> FUNCTION .)
    CONCAT          reduce using rule 78 (function -> FUNCTION .)
    CR              reduce using rule 78 (function -> FUNCTION .)
    EMIT            reduce using rule 78 (function -> FUNCTION .)
    CHAR            reduce using rule 78 (function -> FUNCTION .)
    KEY             reduce using rule 78 (function -> FUNCTION .)
    SPACES          reduce using rule 78 (function -> FUNCTION .)
    2DUP            reduce using rule 78 (function -> FUNCTION .)
    VARIABLE_DEFENITION reduce using rule 78 (function -> FUNCTION .)
    VARIABLE_ASSIGNMENT reduce using rule 78 (function -> FUNCTION .)
    VARIABLE_FETCH  reduce using rule 78 (function -> FUNCTION .)
    VARIABLE_PRINT  reduce using rule 78 (function -> FUNCTION .)
    IF              reduce using rule 78 (function -> FUNCTION .)
    ELSE            reduce using rule 78 (function -> FUNCTION .)
    THEN            reduce using rule 78 (function -> FUNCTION .)
    DO              reduce using rule 78 (function -> FUNCTION .)
    LOOP            reduce using rule 78 (function -> FUNCTION .)
    $end            reduce using rule 78 (function -> FUNCTION .)
    PLUS            reduce using rule 78 (function -> FUNCTION .)
    MINUS           reduce using rule 78 (function -> FUNCTION .)
    TIMES           reduce using rule 78 (function -> FUNCTION .)
    DIVIDE          reduce using rule 78 (function -> FUNCTION .)
    MOD             reduce using rule 78 (function -> FUNCTION .)
    NOT             reduce using rule 78 (function -> FUNCTION .)
    INF             reduce using rule 78 (function -> FUNCTION .)
    SUP             reduce using rule 78 (function -> FUNCTION .)
    INFEQ           reduce using rule 78 (function -> FUNCTION .)
    SUPEQ           reduce using rule 78 (function -> FUNCTION .)


state 58

    (79) function -> FUNCTION_CALL .

    FUNCTION        reduce using rule 79 (function -> FUNCTION_CALL .)
    FUNCTION_CALL   reduce using rule 79 (function -> FUNCTION_CALL .)
    FUNC_BODY       reduce using rule 79 (function -> FUNCTION_CALL .)
    DUP             reduce using rule 79 (function -> FUNCTION_CALL .)
    NUMBER          reduce using rule 79 (function -> FUNCTION_CALL .)
    STRING          reduce using rule 79 (function -> FUNCTION_CALL .)
    STDOUT          reduce using rule 79 (function -> FUNCTION_CALL .)
    DOT             reduce using rule 79 (function -> FUNCTION_CALL .)
    SPACE           reduce using rule 79 (function -> FUNCTION_CALL .)
    COMMENT_LINE    reduce using rule 79 (function -> FUNCTION_CALL .)
    COMMENT_BLOCK   reduce using rule 79 (function -> FUNCTION_CALL .)
    DROP            reduce using rule 79 (function -> FUNCTION_CALL .)
    SWAP            reduce using rule 79 (function -> FUNCTION_CALL .)
    ROT             reduce using rule 79 (function -> FUNCTION_CALL .)
    OVER            reduce using rule 79 (function -> FUNCTION_CALL .)
    CONCAT          reduce using rule 79 (function -> FUNCTION_CALL .)
    CR              reduce using rule 79 (function -> FUNCTION_CALL .)
    EMIT            reduce using rule 79 (function -> FUNCTION_CALL .)
    CHAR            reduce using rule 79 (function -> FUNCTION_CALL .)
    KEY             reduce using rule 79 (function -> FUNCTION_CALL .)
    SPACES          reduce using rule 79 (function -> FUNCTION_CALL .)
    2DUP            reduce using rule 79 (function -> FUNCTION_CALL .)
    VARIABLE_DEFENITION reduce using rule 79 (function -> FUNCTION_CALL .)
    VARIABLE_ASSIGNMENT reduce using rule 79 (function -> FUNCTION_CALL .)
    VARIABLE_FETCH  reduce using rule 79 (function -> FUNCTION_CALL .)
    VARIABLE_PRINT  reduce using rule 79 (function -> FUNCTION_CALL .)
    IF              reduce using rule 79 (function -> FUNCTION_CALL .)
    ELSE            reduce using rule 79 (function -> FUNCTION_CALL .)
    THEN            reduce using rule 79 (function -> FUNCTION_CALL .)
    DO              reduce using rule 79 (function -> FUNCTION_CALL .)
    LOOP            reduce using rule 79 (function -> FUNCTION_CALL .)
    $end            reduce using rule 79 (function -> FUNCTION_CALL .)
    PLUS            reduce using rule 79 (function -> FUNCTION_CALL .)
    MINUS           reduce using rule 79 (function -> FUNCTION_CALL .)
    TIMES           reduce using rule 79 (function -> FUNCTION_CALL .)
    DIVIDE          reduce using rule 79 (function -> FUNCTION_CALL .)
    MOD             reduce using rule 79 (function -> FUNCTION_CALL .)
    NOT             reduce using rule 79 (function -> FUNCTION_CALL .)
    INF             reduce using rule 79 (function -> FUNCTION_CALL .)
    SUP             reduce using rule 79 (function -> FUNCTION_CALL .)
    INFEQ           reduce using rule 79 (function -> FUNCTION_CALL .)
    SUPEQ           reduce using rule 79 (function -> FUNCTION_CALL .)


state 59

    (70) variable_definition -> VARIABLE_DEFENITION .

    DUP             reduce using rule 70 (variable_definition -> VARIABLE_DEFENITION .)
    NUMBER          reduce using rule 70 (variable_definition -> VARIABLE_DEFENITION .)
    STRING          reduce using rule 70 (variable_definition -> VARIABLE_DEFENITION .)
    STDOUT          reduce using rule 70 (variable_definition -> VARIABLE_DEFENITION .)
    DOT             reduce using rule 70 (variable_definition -> VARIABLE_DEFENITION .)
    SPACE           reduce using rule 70 (variable_definition -> VARIABLE_DEFENITION .)
    COMMENT_LINE    reduce using rule 70 (variable_definition -> VARIABLE_DEFENITION .)
    COMMENT_BLOCK   reduce using rule 70 (variable_definition -> VARIABLE_DEFENITION .)
    DROP            reduce using rule 70 (variable_definition -> VARIABLE_DEFENITION .)
    SWAP            reduce using rule 70 (variable_definition -> VARIABLE_DEFENITION .)
    ROT             reduce using rule 70 (variable_definition -> VARIABLE_DEFENITION .)
    OVER            reduce using rule 70 (variable_definition -> VARIABLE_DEFENITION .)
    CONCAT          reduce using rule 70 (variable_definition -> VARIABLE_DEFENITION .)
    CR              reduce using rule 70 (variable_definition -> VARIABLE_DEFENITION .)
    EMIT            reduce using rule 70 (variable_definition -> VARIABLE_DEFENITION .)
    CHAR            reduce using rule 70 (variable_definition -> VARIABLE_DEFENITION .)
    KEY             reduce using rule 70 (variable_definition -> VARIABLE_DEFENITION .)
    SPACES          reduce using rule 70 (variable_definition -> VARIABLE_DEFENITION .)
    2DUP            reduce using rule 70 (variable_definition -> VARIABLE_DEFENITION .)
    FUNC_BODY       reduce using rule 70 (variable_definition -> VARIABLE_DEFENITION .)
    FUNCTION        reduce using rule 70 (variable_definition -> VARIABLE_DEFENITION .)
    FUNCTION_CALL   reduce using rule 70 (variable_definition -> VARIABLE_DEFENITION .)
    VARIABLE_DEFENITION reduce using rule 70 (variable_definition -> VARIABLE_DEFENITION .)
    VARIABLE_ASSIGNMENT reduce using rule 70 (variable_definition -> VARIABLE_DEFENITION .)
    VARIABLE_FETCH  reduce using rule 70 (variable_definition -> VARIABLE_DEFENITION .)
    VARIABLE_PRINT  reduce using rule 70 (variable_definition -> VARIABLE_DEFENITION .)
    IF              reduce using rule 70 (variable_definition -> VARIABLE_DEFENITION .)
    ELSE            reduce using rule 70 (variable_definition -> VARIABLE_DEFENITION .)
    THEN            reduce using rule 70 (variable_definition -> VARIABLE_DEFENITION .)
    DO              reduce using rule 70 (variable_definition -> VARIABLE_DEFENITION .)
    LOOP            reduce using rule 70 (variable_definition -> VARIABLE_DEFENITION .)
    $end            reduce using rule 70 (variable_definition -> VARIABLE_DEFENITION .)
    PLUS            reduce using rule 70 (variable_definition -> VARIABLE_DEFENITION .)
    MINUS           reduce using rule 70 (variable_definition -> VARIABLE_DEFENITION .)
    TIMES           reduce using rule 70 (variable_definition -> VARIABLE_DEFENITION .)
    DIVIDE          reduce using rule 70 (variable_definition -> VARIABLE_DEFENITION .)
    MOD             reduce using rule 70 (variable_definition -> VARIABLE_DEFENITION .)
    NOT             reduce using rule 70 (variable_definition -> VARIABLE_DEFENITION .)
    INF             reduce using rule 70 (variable_definition -> VARIABLE_DEFENITION .)
    SUP             reduce using rule 70 (variable_definition -> VARIABLE_DEFENITION .)
    INFEQ           reduce using rule 70 (variable_definition -> VARIABLE_DEFENITION .)
    SUPEQ           reduce using rule 70 (variable_definition -> VARIABLE_DEFENITION .)


state 60

    (71) variable_assignment -> VARIABLE_ASSIGNMENT .

    DUP             reduce using rule 71 (variable_assignment -> VARIABLE_ASSIGNMENT .)
    NUMBER          reduce using rule 71 (variable_assignment -> VARIABLE_ASSIGNMENT .)
    STRING          reduce using rule 71 (variable_assignment -> VARIABLE_ASSIGNMENT .)
    STDOUT          reduce using rule 71 (variable_assignment -> VARIABLE_ASSIGNMENT .)
    DOT             reduce using rule 71 (variable_assignment -> VARIABLE_ASSIGNMENT .)
    SPACE           reduce using rule 71 (variable_assignment -> VARIABLE_ASSIGNMENT .)
    COMMENT_LINE    reduce using rule 71 (variable_assignment -> VARIABLE_ASSIGNMENT .)
    COMMENT_BLOCK   reduce using rule 71 (variable_assignment -> VARIABLE_ASSIGNMENT .)
    DROP            reduce using rule 71 (variable_assignment -> VARIABLE_ASSIGNMENT .)
    SWAP            reduce using rule 71 (variable_assignment -> VARIABLE_ASSIGNMENT .)
    ROT             reduce using rule 71 (variable_assignment -> VARIABLE_ASSIGNMENT .)
    OVER            reduce using rule 71 (variable_assignment -> VARIABLE_ASSIGNMENT .)
    CONCAT          reduce using rule 71 (variable_assignment -> VARIABLE_ASSIGNMENT .)
    CR              reduce using rule 71 (variable_assignment -> VARIABLE_ASSIGNMENT .)
    EMIT            reduce using rule 71 (variable_assignment -> VARIABLE_ASSIGNMENT .)
    CHAR            reduce using rule 71 (variable_assignment -> VARIABLE_ASSIGNMENT .)
    KEY             reduce using rule 71 (variable_assignment -> VARIABLE_ASSIGNMENT .)
    SPACES          reduce using rule 71 (variable_assignment -> VARIABLE_ASSIGNMENT .)
    2DUP            reduce using rule 71 (variable_assignment -> VARIABLE_ASSIGNMENT .)
    FUNC_BODY       reduce using rule 71 (variable_assignment -> VARIABLE_ASSIGNMENT .)
    FUNCTION        reduce using rule 71 (variable_assignment -> VARIABLE_ASSIGNMENT .)
    FUNCTION_CALL   reduce using rule 71 (variable_assignment -> VARIABLE_ASSIGNMENT .)
    VARIABLE_DEFENITION reduce using rule 71 (variable_assignment -> VARIABLE_ASSIGNMENT .)
    VARIABLE_ASSIGNMENT reduce using rule 71 (variable_assignment -> VARIABLE_ASSIGNMENT .)
    VARIABLE_FETCH  reduce using rule 71 (variable_assignment -> VARIABLE_ASSIGNMENT .)
    VARIABLE_PRINT  reduce using rule 71 (variable_assignment -> VARIABLE_ASSIGNMENT .)
    IF              reduce using rule 71 (variable_assignment -> VARIABLE_ASSIGNMENT .)
    ELSE            reduce using rule 71 (variable_assignment -> VARIABLE_ASSIGNMENT .)
    THEN            reduce using rule 71 (variable_assignment -> VARIABLE_ASSIGNMENT .)
    DO              reduce using rule 71 (variable_assignment -> VARIABLE_ASSIGNMENT .)
    LOOP            reduce using rule 71 (variable_assignment -> VARIABLE_ASSIGNMENT .)
    $end            reduce using rule 71 (variable_assignment -> VARIABLE_ASSIGNMENT .)
    PLUS            reduce using rule 71 (variable_assignment -> VARIABLE_ASSIGNMENT .)
    MINUS           reduce using rule 71 (variable_assignment -> VARIABLE_ASSIGNMENT .)
    TIMES           reduce using rule 71 (variable_assignment -> VARIABLE_ASSIGNMENT .)
    DIVIDE          reduce using rule 71 (variable_assignment -> VARIABLE_ASSIGNMENT .)
    MOD             reduce using rule 71 (variable_assignment -> VARIABLE_ASSIGNMENT .)
    NOT             reduce using rule 71 (variable_assignment -> VARIABLE_ASSIGNMENT .)
    INF             reduce using rule 71 (variable_assignment -> VARIABLE_ASSIGNMENT .)
    SUP             reduce using rule 71 (variable_assignment -> VARIABLE_ASSIGNMENT .)
    INFEQ           reduce using rule 71 (variable_assignment -> VARIABLE_ASSIGNMENT .)
    SUPEQ           reduce using rule 71 (variable_assignment -> VARIABLE_ASSIGNMENT .)


state 61

    (72) variable_fetch -> VARIABLE_FETCH .

    DUP             reduce using rule 72 (variable_fetch -> VARIABLE_FETCH .)
    NUMBER          reduce using rule 72 (variable_fetch -> VARIABLE_FETCH .)
    STRING          reduce using rule 72 (variable_fetch -> VARIABLE_FETCH .)
    STDOUT          reduce using rule 72 (variable_fetch -> VARIABLE_FETCH .)
    DOT             reduce using rule 72 (variable_fetch -> VARIABLE_FETCH .)
    SPACE           reduce using rule 72 (variable_fetch -> VARIABLE_FETCH .)
    COMMENT_LINE    reduce using rule 72 (variable_fetch -> VARIABLE_FETCH .)
    COMMENT_BLOCK   reduce using rule 72 (variable_fetch -> VARIABLE_FETCH .)
    DROP            reduce using rule 72 (variable_fetch -> VARIABLE_FETCH .)
    SWAP            reduce using rule 72 (variable_fetch -> VARIABLE_FETCH .)
    ROT             reduce using rule 72 (variable_fetch -> VARIABLE_FETCH .)
    OVER            reduce using rule 72 (variable_fetch -> VARIABLE_FETCH .)
    CONCAT          reduce using rule 72 (variable_fetch -> VARIABLE_FETCH .)
    CR              reduce using rule 72 (variable_fetch -> VARIABLE_FETCH .)
    EMIT            reduce using rule 72 (variable_fetch -> VARIABLE_FETCH .)
    CHAR            reduce using rule 72 (variable_fetch -> VARIABLE_FETCH .)
    KEY             reduce using rule 72 (variable_fetch -> VARIABLE_FETCH .)
    SPACES          reduce using rule 72 (variable_fetch -> VARIABLE_FETCH .)
    2DUP            reduce using rule 72 (variable_fetch -> VARIABLE_FETCH .)
    FUNC_BODY       reduce using rule 72 (variable_fetch -> VARIABLE_FETCH .)
    FUNCTION        reduce using rule 72 (variable_fetch -> VARIABLE_FETCH .)
    FUNCTION_CALL   reduce using rule 72 (variable_fetch -> VARIABLE_FETCH .)
    VARIABLE_DEFENITION reduce using rule 72 (variable_fetch -> VARIABLE_FETCH .)
    VARIABLE_ASSIGNMENT reduce using rule 72 (variable_fetch -> VARIABLE_FETCH .)
    VARIABLE_FETCH  reduce using rule 72 (variable_fetch -> VARIABLE_FETCH .)
    VARIABLE_PRINT  reduce using rule 72 (variable_fetch -> VARIABLE_FETCH .)
    IF              reduce using rule 72 (variable_fetch -> VARIABLE_FETCH .)
    ELSE            reduce using rule 72 (variable_fetch -> VARIABLE_FETCH .)
    THEN            reduce using rule 72 (variable_fetch -> VARIABLE_FETCH .)
    DO              reduce using rule 72 (variable_fetch -> VARIABLE_FETCH .)
    LOOP            reduce using rule 72 (variable_fetch -> VARIABLE_FETCH .)
    $end            reduce using rule 72 (variable_fetch -> VARIABLE_FETCH .)
    PLUS            reduce using rule 72 (variable_fetch -> VARIABLE_FETCH .)
    MINUS           reduce using rule 72 (variable_fetch -> VARIABLE_FETCH .)
    TIMES           reduce using rule 72 (variable_fetch -> VARIABLE_FETCH .)
    DIVIDE          reduce using rule 72 (variable_fetch -> VARIABLE_FETCH .)
    MOD             reduce using rule 72 (variable_fetch -> VARIABLE_FETCH .)
    NOT             reduce using rule 72 (variable_fetch -> VARIABLE_FETCH .)
    INF             reduce using rule 72 (variable_fetch -> VARIABLE_FETCH .)
    SUP             reduce using rule 72 (variable_fetch -> VARIABLE_FETCH .)
    INFEQ           reduce using rule 72 (variable_fetch -> VARIABLE_FETCH .)
    SUPEQ           reduce using rule 72 (variable_fetch -> VARIABLE_FETCH .)


state 62

    (73) variable_print -> VARIABLE_PRINT .

    DUP             reduce using rule 73 (variable_print -> VARIABLE_PRINT .)
    NUMBER          reduce using rule 73 (variable_print -> VARIABLE_PRINT .)
    STRING          reduce using rule 73 (variable_print -> VARIABLE_PRINT .)
    STDOUT          reduce using rule 73 (variable_print -> VARIABLE_PRINT .)
    DOT             reduce using rule 73 (variable_print -> VARIABLE_PRINT .)
    SPACE           reduce using rule 73 (variable_print -> VARIABLE_PRINT .)
    COMMENT_LINE    reduce using rule 73 (variable_print -> VARIABLE_PRINT .)
    COMMENT_BLOCK   reduce using rule 73 (variable_print -> VARIABLE_PRINT .)
    DROP            reduce using rule 73 (variable_print -> VARIABLE_PRINT .)
    SWAP            reduce using rule 73 (variable_print -> VARIABLE_PRINT .)
    ROT             reduce using rule 73 (variable_print -> VARIABLE_PRINT .)
    OVER            reduce using rule 73 (variable_print -> VARIABLE_PRINT .)
    CONCAT          reduce using rule 73 (variable_print -> VARIABLE_PRINT .)
    CR              reduce using rule 73 (variable_print -> VARIABLE_PRINT .)
    EMIT            reduce using rule 73 (variable_print -> VARIABLE_PRINT .)
    CHAR            reduce using rule 73 (variable_print -> VARIABLE_PRINT .)
    KEY             reduce using rule 73 (variable_print -> VARIABLE_PRINT .)
    SPACES          reduce using rule 73 (variable_print -> VARIABLE_PRINT .)
    2DUP            reduce using rule 73 (variable_print -> VARIABLE_PRINT .)
    FUNC_BODY       reduce using rule 73 (variable_print -> VARIABLE_PRINT .)
    FUNCTION        reduce using rule 73 (variable_print -> VARIABLE_PRINT .)
    FUNCTION_CALL   reduce using rule 73 (variable_print -> VARIABLE_PRINT .)
    VARIABLE_DEFENITION reduce using rule 73 (variable_print -> VARIABLE_PRINT .)
    VARIABLE_ASSIGNMENT reduce using rule 73 (variable_print -> VARIABLE_PRINT .)
    VARIABLE_FETCH  reduce using rule 73 (variable_print -> VARIABLE_PRINT .)
    VARIABLE_PRINT  reduce using rule 73 (variable_print -> VARIABLE_PRINT .)
    IF              reduce using rule 73 (variable_print -> VARIABLE_PRINT .)
    ELSE            reduce using rule 73 (variable_print -> VARIABLE_PRINT .)
    THEN            reduce using rule 73 (variable_print -> VARIABLE_PRINT .)
    DO              reduce using rule 73 (variable_print -> VARIABLE_PRINT .)
    LOOP            reduce using rule 73 (variable_print -> VARIABLE_PRINT .)
    $end            reduce using rule 73 (variable_print -> VARIABLE_PRINT .)
    PLUS            reduce using rule 73 (variable_print -> VARIABLE_PRINT .)
    MINUS           reduce using rule 73 (variable_print -> VARIABLE_PRINT .)
    TIMES           reduce using rule 73 (variable_print -> VARIABLE_PRINT .)
    DIVIDE          reduce using rule 73 (variable_print -> VARIABLE_PRINT .)
    MOD             reduce using rule 73 (variable_print -> VARIABLE_PRINT .)
    NOT             reduce using rule 73 (variable_print -> VARIABLE_PRINT .)
    INF             reduce using rule 73 (variable_print -> VARIABLE_PRINT .)
    SUP             reduce using rule 73 (variable_print -> VARIABLE_PRINT .)
    INFEQ           reduce using rule 73 (variable_print -> VARIABLE_PRINT .)
    SUPEQ           reduce using rule 73 (variable_print -> VARIABLE_PRINT .)


state 63

    (28) if -> IF .

    DUP             reduce using rule 28 (if -> IF .)
    NUMBER          reduce using rule 28 (if -> IF .)
    STRING          reduce using rule 28 (if -> IF .)
    STDOUT          reduce using rule 28 (if -> IF .)
    DOT             reduce using rule 28 (if -> IF .)
    SPACE           reduce using rule 28 (if -> IF .)
    COMMENT_LINE    reduce using rule 28 (if -> IF .)
    COMMENT_BLOCK   reduce using rule 28 (if -> IF .)
    DROP            reduce using rule 28 (if -> IF .)
    SWAP            reduce using rule 28 (if -> IF .)
    ROT             reduce using rule 28 (if -> IF .)
    OVER            reduce using rule 28 (if -> IF .)
    CONCAT          reduce using rule 28 (if -> IF .)
    CR              reduce using rule 28 (if -> IF .)
    EMIT            reduce using rule 28 (if -> IF .)
    CHAR            reduce using rule 28 (if -> IF .)
    KEY             reduce using rule 28 (if -> IF .)
    SPACES          reduce using rule 28 (if -> IF .)
    2DUP            reduce using rule 28 (if -> IF .)
    FUNC_BODY       reduce using rule 28 (if -> IF .)
    FUNCTION        reduce using rule 28 (if -> IF .)
    FUNCTION_CALL   reduce using rule 28 (if -> IF .)
    VARIABLE_DEFENITION reduce using rule 28 (if -> IF .)
    VARIABLE_ASSIGNMENT reduce using rule 28 (if -> IF .)
    VARIABLE_FETCH  reduce using rule 28 (if -> IF .)
    VARIABLE_PRINT  reduce using rule 28 (if -> IF .)
    IF              reduce using rule 28 (if -> IF .)
    ELSE            reduce using rule 28 (if -> IF .)
    THEN            reduce using rule 28 (if -> IF .)
    DO              reduce using rule 28 (if -> IF .)
    LOOP            reduce using rule 28 (if -> IF .)
    $end            reduce using rule 28 (if -> IF .)
    PLUS            reduce using rule 28 (if -> IF .)
    MINUS           reduce using rule 28 (if -> IF .)
    TIMES           reduce using rule 28 (if -> IF .)
    DIVIDE          reduce using rule 28 (if -> IF .)
    MOD             reduce using rule 28 (if -> IF .)
    NOT             reduce using rule 28 (if -> IF .)
    INF             reduce using rule 28 (if -> IF .)
    SUP             reduce using rule 28 (if -> IF .)
    INFEQ           reduce using rule 28 (if -> IF .)
    SUPEQ           reduce using rule 28 (if -> IF .)


state 64

    (29) else -> ELSE .

    DUP             reduce using rule 29 (else -> ELSE .)
    NUMBER          reduce using rule 29 (else -> ELSE .)
    STRING          reduce using rule 29 (else -> ELSE .)
    STDOUT          reduce using rule 29 (else -> ELSE .)
    DOT             reduce using rule 29 (else -> ELSE .)
    SPACE           reduce using rule 29 (else -> ELSE .)
    COMMENT_LINE    reduce using rule 29 (else -> ELSE .)
    COMMENT_BLOCK   reduce using rule 29 (else -> ELSE .)
    DROP            reduce using rule 29 (else -> ELSE .)
    SWAP            reduce using rule 29 (else -> ELSE .)
    ROT             reduce using rule 29 (else -> ELSE .)
    OVER            reduce using rule 29 (else -> ELSE .)
    CONCAT          reduce using rule 29 (else -> ELSE .)
    CR              reduce using rule 29 (else -> ELSE .)
    EMIT            reduce using rule 29 (else -> ELSE .)
    CHAR            reduce using rule 29 (else -> ELSE .)
    KEY             reduce using rule 29 (else -> ELSE .)
    SPACES          reduce using rule 29 (else -> ELSE .)
    2DUP            reduce using rule 29 (else -> ELSE .)
    FUNC_BODY       reduce using rule 29 (else -> ELSE .)
    FUNCTION        reduce using rule 29 (else -> ELSE .)
    FUNCTION_CALL   reduce using rule 29 (else -> ELSE .)
    VARIABLE_DEFENITION reduce using rule 29 (else -> ELSE .)
    VARIABLE_ASSIGNMENT reduce using rule 29 (else -> ELSE .)
    VARIABLE_FETCH  reduce using rule 29 (else -> ELSE .)
    VARIABLE_PRINT  reduce using rule 29 (else -> ELSE .)
    IF              reduce using rule 29 (else -> ELSE .)
    ELSE            reduce using rule 29 (else -> ELSE .)
    THEN            reduce using rule 29 (else -> ELSE .)
    DO              reduce using rule 29 (else -> ELSE .)
    LOOP            reduce using rule 29 (else -> ELSE .)
    $end            reduce using rule 29 (else -> ELSE .)
    PLUS            reduce using rule 29 (else -> ELSE .)
    MINUS           reduce using rule 29 (else -> ELSE .)
    TIMES           reduce using rule 29 (else -> ELSE .)
    DIVIDE          reduce using rule 29 (else -> ELSE .)
    MOD             reduce using rule 29 (else -> ELSE .)
    NOT             reduce using rule 29 (else -> ELSE .)
    INF             reduce using rule 29 (else -> ELSE .)
    SUP             reduce using rule 29 (else -> ELSE .)
    INFEQ           reduce using rule 29 (else -> ELSE .)
    SUPEQ           reduce using rule 29 (else -> ELSE .)


state 65

    (30) then -> THEN .

    DUP             reduce using rule 30 (then -> THEN .)
    NUMBER          reduce using rule 30 (then -> THEN .)
    STRING          reduce using rule 30 (then -> THEN .)
    STDOUT          reduce using rule 30 (then -> THEN .)
    DOT             reduce using rule 30 (then -> THEN .)
    SPACE           reduce using rule 30 (then -> THEN .)
    COMMENT_LINE    reduce using rule 30 (then -> THEN .)
    COMMENT_BLOCK   reduce using rule 30 (then -> THEN .)
    DROP            reduce using rule 30 (then -> THEN .)
    SWAP            reduce using rule 30 (then -> THEN .)
    ROT             reduce using rule 30 (then -> THEN .)
    OVER            reduce using rule 30 (then -> THEN .)
    CONCAT          reduce using rule 30 (then -> THEN .)
    CR              reduce using rule 30 (then -> THEN .)
    EMIT            reduce using rule 30 (then -> THEN .)
    CHAR            reduce using rule 30 (then -> THEN .)
    KEY             reduce using rule 30 (then -> THEN .)
    SPACES          reduce using rule 30 (then -> THEN .)
    2DUP            reduce using rule 30 (then -> THEN .)
    FUNC_BODY       reduce using rule 30 (then -> THEN .)
    FUNCTION        reduce using rule 30 (then -> THEN .)
    FUNCTION_CALL   reduce using rule 30 (then -> THEN .)
    VARIABLE_DEFENITION reduce using rule 30 (then -> THEN .)
    VARIABLE_ASSIGNMENT reduce using rule 30 (then -> THEN .)
    VARIABLE_FETCH  reduce using rule 30 (then -> THEN .)
    VARIABLE_PRINT  reduce using rule 30 (then -> THEN .)
    IF              reduce using rule 30 (then -> THEN .)
    ELSE            reduce using rule 30 (then -> THEN .)
    THEN            reduce using rule 30 (then -> THEN .)
    DO              reduce using rule 30 (then -> THEN .)
    LOOP            reduce using rule 30 (then -> THEN .)
    $end            reduce using rule 30 (then -> THEN .)
    PLUS            reduce using rule 30 (then -> THEN .)
    MINUS           reduce using rule 30 (then -> THEN .)
    TIMES           reduce using rule 30 (then -> THEN .)
    DIVIDE          reduce using rule 30 (then -> THEN .)
    MOD             reduce using rule 30 (then -> THEN .)
    NOT             reduce using rule 30 (then -> THEN .)
    INF             reduce using rule 30 (then -> THEN .)
    SUP             reduce using rule 30 (then -> THEN .)
    INFEQ           reduce using rule 30 (then -> THEN .)
    SUPEQ           reduce using rule 30 (then -> THEN .)


state 66

    (31) do -> DO .

    DUP             reduce using rule 31 (do -> DO .)
    NUMBER          reduce using rule 31 (do -> DO .)
    STRING          reduce using rule 31 (do -> DO .)
    STDOUT          reduce using rule 31 (do -> DO .)
    DOT             reduce using rule 31 (do -> DO .)
    SPACE           reduce using rule 31 (do -> DO .)
    COMMENT_LINE    reduce using rule 31 (do -> DO .)
    COMMENT_BLOCK   reduce using rule 31 (do -> DO .)
    DROP            reduce using rule 31 (do -> DO .)
    SWAP            reduce using rule 31 (do -> DO .)
    ROT             reduce using rule 31 (do -> DO .)
    OVER            reduce using rule 31 (do -> DO .)
    CONCAT          reduce using rule 31 (do -> DO .)
    CR              reduce using rule 31 (do -> DO .)
    EMIT            reduce using rule 31 (do -> DO .)
    CHAR            reduce using rule 31 (do -> DO .)
    KEY             reduce using rule 31 (do -> DO .)
    SPACES          reduce using rule 31 (do -> DO .)
    2DUP            reduce using rule 31 (do -> DO .)
    FUNC_BODY       reduce using rule 31 (do -> DO .)
    FUNCTION        reduce using rule 31 (do -> DO .)
    FUNCTION_CALL   reduce using rule 31 (do -> DO .)
    VARIABLE_DEFENITION reduce using rule 31 (do -> DO .)
    VARIABLE_ASSIGNMENT reduce using rule 31 (do -> DO .)
    VARIABLE_FETCH  reduce using rule 31 (do -> DO .)
    VARIABLE_PRINT  reduce using rule 31 (do -> DO .)
    IF              reduce using rule 31 (do -> DO .)
    ELSE            reduce using rule 31 (do -> DO .)
    THEN            reduce using rule 31 (do -> DO .)
    DO              reduce using rule 31 (do -> DO .)
    LOOP            reduce using rule 31 (do -> DO .)
    $end            reduce using rule 31 (do -> DO .)
    PLUS            reduce using rule 31 (do -> DO .)
    MINUS           reduce using rule 31 (do -> DO .)
    TIMES           reduce using rule 31 (do -> DO .)
    DIVIDE          reduce using rule 31 (do -> DO .)
    MOD             reduce using rule 31 (do -> DO .)
    NOT             reduce using rule 31 (do -> DO .)
    INF             reduce using rule 31 (do -> DO .)
    SUP             reduce using rule 31 (do -> DO .)
    INFEQ           reduce using rule 31 (do -> DO .)
    SUPEQ           reduce using rule 31 (do -> DO .)


state 67

    (32) loop -> LOOP .

    DUP             reduce using rule 32 (loop -> LOOP .)
    NUMBER          reduce using rule 32 (loop -> LOOP .)
    STRING          reduce using rule 32 (loop -> LOOP .)
    STDOUT          reduce using rule 32 (loop -> LOOP .)
    DOT             reduce using rule 32 (loop -> LOOP .)
    SPACE           reduce using rule 32 (loop -> LOOP .)
    COMMENT_LINE    reduce using rule 32 (loop -> LOOP .)
    COMMENT_BLOCK   reduce using rule 32 (loop -> LOOP .)
    DROP            reduce using rule 32 (loop -> LOOP .)
    SWAP            reduce using rule 32 (loop -> LOOP .)
    ROT             reduce using rule 32 (loop -> LOOP .)
    OVER            reduce using rule 32 (loop -> LOOP .)
    CONCAT          reduce using rule 32 (loop -> LOOP .)
    CR              reduce using rule 32 (loop -> LOOP .)
    EMIT            reduce using rule 32 (loop -> LOOP .)
    CHAR            reduce using rule 32 (loop -> LOOP .)
    KEY             reduce using rule 32 (loop -> LOOP .)
    SPACES          reduce using rule 32 (loop -> LOOP .)
    2DUP            reduce using rule 32 (loop -> LOOP .)
    FUNC_BODY       reduce using rule 32 (loop -> LOOP .)
    FUNCTION        reduce using rule 32 (loop -> LOOP .)
    FUNCTION_CALL   reduce using rule 32 (loop -> LOOP .)
    VARIABLE_DEFENITION reduce using rule 32 (loop -> LOOP .)
    VARIABLE_ASSIGNMENT reduce using rule 32 (loop -> LOOP .)
    VARIABLE_FETCH  reduce using rule 32 (loop -> LOOP .)
    VARIABLE_PRINT  reduce using rule 32 (loop -> LOOP .)
    IF              reduce using rule 32 (loop -> LOOP .)
    ELSE            reduce using rule 32 (loop -> LOOP .)
    THEN            reduce using rule 32 (loop -> LOOP .)
    DO              reduce using rule 32 (loop -> LOOP .)
    LOOP            reduce using rule 32 (loop -> LOOP .)
    $end            reduce using rule 32 (loop -> LOOP .)
    PLUS            reduce using rule 32 (loop -> LOOP .)
    MINUS           reduce using rule 32 (loop -> LOOP .)
    TIMES           reduce using rule 32 (loop -> LOOP .)
    DIVIDE          reduce using rule 32 (loop -> LOOP .)
    MOD             reduce using rule 32 (loop -> LOOP .)
    NOT             reduce using rule 32 (loop -> LOOP .)
    INF             reduce using rule 32 (loop -> LOOP .)
    SUP             reduce using rule 32 (loop -> LOOP .)
    INFEQ           reduce using rule 32 (loop -> LOOP .)
    SUPEQ           reduce using rule 32 (loop -> LOOP .)


state 68

    (3) comandos -> comandos comando .
    (11) exp_aritmeticas -> comando . comando PLUS
    (12) exp_aritmeticas -> comando . comando MINUS
    (13) exp_aritmeticas -> comando . comando TIMES
    (14) exp_aritmeticas -> comando . comando DIVIDE
    (15) exp_aritmeticas -> comando . comando MOD
    (16) exp_relacionais -> comando . comando NOT
    (17) exp_relacionais -> comando . comando INF
    (18) exp_relacionais -> comando . comando SUP
    (19) exp_relacionais -> comando . comando INFEQ
    (20) exp_relacionais -> comando . comando SUPEQ
    (52) dup -> comando . DUP
    (4) comando -> . exp_aritmeticas
    (5) comando -> . exp_relacionais
    (6) comando -> . functions
    (7) comando -> . values
    (8) comando -> . creating_funcs
    (9) comando -> . variable
    (10) comando -> . flow_control
    (11) exp_aritmeticas -> . comando comando PLUS
    (12) exp_aritmeticas -> . comando comando MINUS
    (13) exp_aritmeticas -> . comando comando TIMES
    (14) exp_aritmeticas -> . comando comando DIVIDE
    (15) exp_aritmeticas -> . comando comando MOD
    (16) exp_relacionais -> . comando comando NOT
    (17) exp_relacionais -> . comando comando INF
    (18) exp_relacionais -> . comando comando SUP
    (19) exp_relacionais -> . comando comando INFEQ
    (20) exp_relacionais -> . comando comando SUPEQ
    (33) functions -> . stdout
    (34) functions -> . dot
    (35) functions -> . space
    (36) functions -> . dup
    (37) functions -> . comment
    (38) functions -> . drop
    (39) functions -> . swap
    (40) functions -> . rot
    (41) functions -> . over
    (42) functions -> . concat
    (43) functions -> . cr
    (44) functions -> . emit
    (45) functions -> . char
    (46) functions -> . key
    (47) functions -> . spaces
    (48) functions -> . 2dup
    (21) values -> . NUMBER
    (22) values -> . STRING
    (74) creating_funcs -> . func_criada
    (75) creating_funcs -> . function
    (76) creating_funcs -> . creating_funcs function
    (77) creating_funcs -> . creating_funcs func_criada
    (66) variable -> . variable_definition
    (67) variable -> . variable_assignment
    (68) variable -> . variable_fetch
    (69) variable -> . variable_print
    (23) flow_control -> . if
    (24) flow_control -> . else
    (25) flow_control -> . then
    (26) flow_control -> . do
    (27) flow_control -> . loop
    (49) stdout -> . STDOUT
    (50) dot -> . DOT
    (51) space -> . SPACE
    (52) dup -> . comando DUP
    (53) comment -> . COMMENT_LINE
    (54) comment -> . COMMENT_BLOCK
    (55) drop -> . DROP
    (56) swap -> . SWAP
    (57) rot -> . ROT
    (58) over -> . OVER
    (59) concat -> . CONCAT
    (60) cr -> . CR
    (61) emit -> . EMIT
    (62) char -> . CHAR
    (63) key -> . KEY
    (64) spaces -> . SPACES
    (65) 2dup -> . 2DUP
    (80) func_criada -> . FUNC_BODY
    (78) function -> . FUNCTION
    (79) function -> . FUNCTION_CALL
    (70) variable_definition -> . VARIABLE_DEFENITION
    (71) variable_assignment -> . VARIABLE_ASSIGNMENT
    (72) variable_fetch -> . VARIABLE_FETCH
    (73) variable_print -> . VARIABLE_PRINT
    (28) if -> . IF
    (29) else -> . ELSE
    (30) then -> . THEN
    (31) do -> . DO
    (32) loop -> . LOOP

  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for STDOUT resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for SPACE resolved as shift
  ! shift/reduce conflict for COMMENT_LINE resolved as shift
  ! shift/reduce conflict for COMMENT_BLOCK resolved as shift
  ! shift/reduce conflict for DROP resolved as shift
  ! shift/reduce conflict for SWAP resolved as shift
  ! shift/reduce conflict for ROT resolved as shift
  ! shift/reduce conflict for OVER resolved as shift
  ! shift/reduce conflict for CONCAT resolved as shift
  ! shift/reduce conflict for CR resolved as shift
  ! shift/reduce conflict for EMIT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for KEY resolved as shift
  ! shift/reduce conflict for SPACES resolved as shift
  ! shift/reduce conflict for 2DUP resolved as shift
  ! shift/reduce conflict for FUNC_BODY resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for FUNCTION_CALL resolved as shift
  ! shift/reduce conflict for VARIABLE_DEFENITION resolved as shift
  ! shift/reduce conflict for VARIABLE_ASSIGNMENT resolved as shift
  ! shift/reduce conflict for VARIABLE_FETCH resolved as shift
  ! shift/reduce conflict for VARIABLE_PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for THEN resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for LOOP resolved as shift
    $end            reduce using rule 3 (comandos -> comandos comando .)
    DUP             shift and go to state 70
    NUMBER          shift and go to state 27
    STRING          shift and go to state 28
    STDOUT          shift and go to state 40
    DOT             shift and go to state 41
    SPACE           shift and go to state 42
    COMMENT_LINE    shift and go to state 43
    COMMENT_BLOCK   shift and go to state 44
    DROP            shift and go to state 45
    SWAP            shift and go to state 46
    ROT             shift and go to state 47
    OVER            shift and go to state 48
    CONCAT          shift and go to state 49
    CR              shift and go to state 50
    EMIT            shift and go to state 51
    CHAR            shift and go to state 52
    KEY             shift and go to state 53
    SPACES          shift and go to state 54
    2DUP            shift and go to state 55
    FUNC_BODY       shift and go to state 56
    FUNCTION        shift and go to state 57
    FUNCTION_CALL   shift and go to state 58
    VARIABLE_DEFENITION shift and go to state 59
    VARIABLE_ASSIGNMENT shift and go to state 60
    VARIABLE_FETCH  shift and go to state 61
    VARIABLE_PRINT  shift and go to state 62
    IF              shift and go to state 63
    ELSE            shift and go to state 64
    THEN            shift and go to state 65
    DO              shift and go to state 66
    LOOP            shift and go to state 67

  ! NUMBER          [ reduce using rule 3 (comandos -> comandos comando .) ]
  ! STRING          [ reduce using rule 3 (comandos -> comandos comando .) ]
  ! STDOUT          [ reduce using rule 3 (comandos -> comandos comando .) ]
  ! DOT             [ reduce using rule 3 (comandos -> comandos comando .) ]
  ! SPACE           [ reduce using rule 3 (comandos -> comandos comando .) ]
  ! COMMENT_LINE    [ reduce using rule 3 (comandos -> comandos comando .) ]
  ! COMMENT_BLOCK   [ reduce using rule 3 (comandos -> comandos comando .) ]
  ! DROP            [ reduce using rule 3 (comandos -> comandos comando .) ]
  ! SWAP            [ reduce using rule 3 (comandos -> comandos comando .) ]
  ! ROT             [ reduce using rule 3 (comandos -> comandos comando .) ]
  ! OVER            [ reduce using rule 3 (comandos -> comandos comando .) ]
  ! CONCAT          [ reduce using rule 3 (comandos -> comandos comando .) ]
  ! CR              [ reduce using rule 3 (comandos -> comandos comando .) ]
  ! EMIT            [ reduce using rule 3 (comandos -> comandos comando .) ]
  ! CHAR            [ reduce using rule 3 (comandos -> comandos comando .) ]
  ! KEY             [ reduce using rule 3 (comandos -> comandos comando .) ]
  ! SPACES          [ reduce using rule 3 (comandos -> comandos comando .) ]
  ! 2DUP            [ reduce using rule 3 (comandos -> comandos comando .) ]
  ! FUNC_BODY       [ reduce using rule 3 (comandos -> comandos comando .) ]
  ! FUNCTION        [ reduce using rule 3 (comandos -> comandos comando .) ]
  ! FUNCTION_CALL   [ reduce using rule 3 (comandos -> comandos comando .) ]
  ! VARIABLE_DEFENITION [ reduce using rule 3 (comandos -> comandos comando .) ]
  ! VARIABLE_ASSIGNMENT [ reduce using rule 3 (comandos -> comandos comando .) ]
  ! VARIABLE_FETCH  [ reduce using rule 3 (comandos -> comandos comando .) ]
  ! VARIABLE_PRINT  [ reduce using rule 3 (comandos -> comandos comando .) ]
  ! IF              [ reduce using rule 3 (comandos -> comandos comando .) ]
  ! ELSE            [ reduce using rule 3 (comandos -> comandos comando .) ]
  ! THEN            [ reduce using rule 3 (comandos -> comandos comando .) ]
  ! DO              [ reduce using rule 3 (comandos -> comandos comando .) ]
  ! LOOP            [ reduce using rule 3 (comandos -> comandos comando .) ]

    comando                        shift and go to state 69
    exp_aritmeticas                shift and go to state 4
    exp_relacionais                shift and go to state 5
    functions                      shift and go to state 6
    values                         shift and go to state 7
    creating_funcs                 shift and go to state 8
    variable                       shift and go to state 9
    flow_control                   shift and go to state 10
    stdout                         shift and go to state 11
    dot                            shift and go to state 12
    space                          shift and go to state 13
    dup                            shift and go to state 14
    comment                        shift and go to state 15
    drop                           shift and go to state 16
    swap                           shift and go to state 17
    rot                            shift and go to state 18
    over                           shift and go to state 19
    concat                         shift and go to state 20
    cr                             shift and go to state 21
    emit                           shift and go to state 22
    char                           shift and go to state 23
    key                            shift and go to state 24
    spaces                         shift and go to state 25
    2dup                           shift and go to state 26
    func_criada                    shift and go to state 29
    function                       shift and go to state 30
    variable_definition            shift and go to state 31
    variable_assignment            shift and go to state 32
    variable_fetch                 shift and go to state 33
    variable_print                 shift and go to state 34
    if                             shift and go to state 35
    else                           shift and go to state 36
    then                           shift and go to state 37
    do                             shift and go to state 38
    loop                           shift and go to state 39

state 69

    (11) exp_aritmeticas -> comando comando . PLUS
    (12) exp_aritmeticas -> comando comando . MINUS
    (13) exp_aritmeticas -> comando comando . TIMES
    (14) exp_aritmeticas -> comando comando . DIVIDE
    (15) exp_aritmeticas -> comando comando . MOD
    (16) exp_relacionais -> comando comando . NOT
    (17) exp_relacionais -> comando comando . INF
    (18) exp_relacionais -> comando comando . SUP
    (19) exp_relacionais -> comando comando . INFEQ
    (20) exp_relacionais -> comando comando . SUPEQ
    (11) exp_aritmeticas -> comando . comando PLUS
    (12) exp_aritmeticas -> comando . comando MINUS
    (13) exp_aritmeticas -> comando . comando TIMES
    (14) exp_aritmeticas -> comando . comando DIVIDE
    (15) exp_aritmeticas -> comando . comando MOD
    (16) exp_relacionais -> comando . comando NOT
    (17) exp_relacionais -> comando . comando INF
    (18) exp_relacionais -> comando . comando SUP
    (19) exp_relacionais -> comando . comando INFEQ
    (20) exp_relacionais -> comando . comando SUPEQ
    (52) dup -> comando . DUP
    (4) comando -> . exp_aritmeticas
    (5) comando -> . exp_relacionais
    (6) comando -> . functions
    (7) comando -> . values
    (8) comando -> . creating_funcs
    (9) comando -> . variable
    (10) comando -> . flow_control
    (11) exp_aritmeticas -> . comando comando PLUS
    (12) exp_aritmeticas -> . comando comando MINUS
    (13) exp_aritmeticas -> . comando comando TIMES
    (14) exp_aritmeticas -> . comando comando DIVIDE
    (15) exp_aritmeticas -> . comando comando MOD
    (16) exp_relacionais -> . comando comando NOT
    (17) exp_relacionais -> . comando comando INF
    (18) exp_relacionais -> . comando comando SUP
    (19) exp_relacionais -> . comando comando INFEQ
    (20) exp_relacionais -> . comando comando SUPEQ
    (33) functions -> . stdout
    (34) functions -> . dot
    (35) functions -> . space
    (36) functions -> . dup
    (37) functions -> . comment
    (38) functions -> . drop
    (39) functions -> . swap
    (40) functions -> . rot
    (41) functions -> . over
    (42) functions -> . concat
    (43) functions -> . cr
    (44) functions -> . emit
    (45) functions -> . char
    (46) functions -> . key
    (47) functions -> . spaces
    (48) functions -> . 2dup
    (21) values -> . NUMBER
    (22) values -> . STRING
    (74) creating_funcs -> . func_criada
    (75) creating_funcs -> . function
    (76) creating_funcs -> . creating_funcs function
    (77) creating_funcs -> . creating_funcs func_criada
    (66) variable -> . variable_definition
    (67) variable -> . variable_assignment
    (68) variable -> . variable_fetch
    (69) variable -> . variable_print
    (23) flow_control -> . if
    (24) flow_control -> . else
    (25) flow_control -> . then
    (26) flow_control -> . do
    (27) flow_control -> . loop
    (49) stdout -> . STDOUT
    (50) dot -> . DOT
    (51) space -> . SPACE
    (52) dup -> . comando DUP
    (53) comment -> . COMMENT_LINE
    (54) comment -> . COMMENT_BLOCK
    (55) drop -> . DROP
    (56) swap -> . SWAP
    (57) rot -> . ROT
    (58) over -> . OVER
    (59) concat -> . CONCAT
    (60) cr -> . CR
    (61) emit -> . EMIT
    (62) char -> . CHAR
    (63) key -> . KEY
    (64) spaces -> . SPACES
    (65) 2dup -> . 2DUP
    (80) func_criada -> . FUNC_BODY
    (78) function -> . FUNCTION
    (79) function -> . FUNCTION_CALL
    (70) variable_definition -> . VARIABLE_DEFENITION
    (71) variable_assignment -> . VARIABLE_ASSIGNMENT
    (72) variable_fetch -> . VARIABLE_FETCH
    (73) variable_print -> . VARIABLE_PRINT
    (28) if -> . IF
    (29) else -> . ELSE
    (30) then -> . THEN
    (31) do -> . DO
    (32) loop -> . LOOP

    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    MOD             shift and go to state 77
    NOT             shift and go to state 78
    INF             shift and go to state 79
    SUP             shift and go to state 80
    INFEQ           shift and go to state 81
    SUPEQ           shift and go to state 82
    DUP             shift and go to state 70
    NUMBER          shift and go to state 27
    STRING          shift and go to state 28
    STDOUT          shift and go to state 40
    DOT             shift and go to state 41
    SPACE           shift and go to state 42
    COMMENT_LINE    shift and go to state 43
    COMMENT_BLOCK   shift and go to state 44
    DROP            shift and go to state 45
    SWAP            shift and go to state 46
    ROT             shift and go to state 47
    OVER            shift and go to state 48
    CONCAT          shift and go to state 49
    CR              shift and go to state 50
    EMIT            shift and go to state 51
    CHAR            shift and go to state 52
    KEY             shift and go to state 53
    SPACES          shift and go to state 54
    2DUP            shift and go to state 55
    FUNC_BODY       shift and go to state 56
    FUNCTION        shift and go to state 57
    FUNCTION_CALL   shift and go to state 58
    VARIABLE_DEFENITION shift and go to state 59
    VARIABLE_ASSIGNMENT shift and go to state 60
    VARIABLE_FETCH  shift and go to state 61
    VARIABLE_PRINT  shift and go to state 62
    IF              shift and go to state 63
    ELSE            shift and go to state 64
    THEN            shift and go to state 65
    DO              shift and go to state 66
    LOOP            shift and go to state 67

    comando                        shift and go to state 69
    exp_aritmeticas                shift and go to state 4
    exp_relacionais                shift and go to state 5
    functions                      shift and go to state 6
    values                         shift and go to state 7
    creating_funcs                 shift and go to state 8
    variable                       shift and go to state 9
    flow_control                   shift and go to state 10
    stdout                         shift and go to state 11
    dot                            shift and go to state 12
    space                          shift and go to state 13
    dup                            shift and go to state 14
    comment                        shift and go to state 15
    drop                           shift and go to state 16
    swap                           shift and go to state 17
    rot                            shift and go to state 18
    over                           shift and go to state 19
    concat                         shift and go to state 20
    cr                             shift and go to state 21
    emit                           shift and go to state 22
    char                           shift and go to state 23
    key                            shift and go to state 24
    spaces                         shift and go to state 25
    2dup                           shift and go to state 26
    func_criada                    shift and go to state 29
    function                       shift and go to state 30
    variable_definition            shift and go to state 31
    variable_assignment            shift and go to state 32
    variable_fetch                 shift and go to state 33
    variable_print                 shift and go to state 34
    if                             shift and go to state 35
    else                           shift and go to state 36
    then                           shift and go to state 37
    do                             shift and go to state 38
    loop                           shift and go to state 39

state 70

    (52) dup -> comando DUP .

    DUP             reduce using rule 52 (dup -> comando DUP .)
    NUMBER          reduce using rule 52 (dup -> comando DUP .)
    STRING          reduce using rule 52 (dup -> comando DUP .)
    STDOUT          reduce using rule 52 (dup -> comando DUP .)
    DOT             reduce using rule 52 (dup -> comando DUP .)
    SPACE           reduce using rule 52 (dup -> comando DUP .)
    COMMENT_LINE    reduce using rule 52 (dup -> comando DUP .)
    COMMENT_BLOCK   reduce using rule 52 (dup -> comando DUP .)
    DROP            reduce using rule 52 (dup -> comando DUP .)
    SWAP            reduce using rule 52 (dup -> comando DUP .)
    ROT             reduce using rule 52 (dup -> comando DUP .)
    OVER            reduce using rule 52 (dup -> comando DUP .)
    CONCAT          reduce using rule 52 (dup -> comando DUP .)
    CR              reduce using rule 52 (dup -> comando DUP .)
    EMIT            reduce using rule 52 (dup -> comando DUP .)
    CHAR            reduce using rule 52 (dup -> comando DUP .)
    KEY             reduce using rule 52 (dup -> comando DUP .)
    SPACES          reduce using rule 52 (dup -> comando DUP .)
    2DUP            reduce using rule 52 (dup -> comando DUP .)
    FUNC_BODY       reduce using rule 52 (dup -> comando DUP .)
    FUNCTION        reduce using rule 52 (dup -> comando DUP .)
    FUNCTION_CALL   reduce using rule 52 (dup -> comando DUP .)
    VARIABLE_DEFENITION reduce using rule 52 (dup -> comando DUP .)
    VARIABLE_ASSIGNMENT reduce using rule 52 (dup -> comando DUP .)
    VARIABLE_FETCH  reduce using rule 52 (dup -> comando DUP .)
    VARIABLE_PRINT  reduce using rule 52 (dup -> comando DUP .)
    IF              reduce using rule 52 (dup -> comando DUP .)
    ELSE            reduce using rule 52 (dup -> comando DUP .)
    THEN            reduce using rule 52 (dup -> comando DUP .)
    DO              reduce using rule 52 (dup -> comando DUP .)
    LOOP            reduce using rule 52 (dup -> comando DUP .)
    $end            reduce using rule 52 (dup -> comando DUP .)
    PLUS            reduce using rule 52 (dup -> comando DUP .)
    MINUS           reduce using rule 52 (dup -> comando DUP .)
    TIMES           reduce using rule 52 (dup -> comando DUP .)
    DIVIDE          reduce using rule 52 (dup -> comando DUP .)
    MOD             reduce using rule 52 (dup -> comando DUP .)
    NOT             reduce using rule 52 (dup -> comando DUP .)
    INF             reduce using rule 52 (dup -> comando DUP .)
    SUP             reduce using rule 52 (dup -> comando DUP .)
    INFEQ           reduce using rule 52 (dup -> comando DUP .)
    SUPEQ           reduce using rule 52 (dup -> comando DUP .)


state 71

    (76) creating_funcs -> creating_funcs function .

    FUNCTION        reduce using rule 76 (creating_funcs -> creating_funcs function .)
    FUNCTION_CALL   reduce using rule 76 (creating_funcs -> creating_funcs function .)
    FUNC_BODY       reduce using rule 76 (creating_funcs -> creating_funcs function .)
    DUP             reduce using rule 76 (creating_funcs -> creating_funcs function .)
    NUMBER          reduce using rule 76 (creating_funcs -> creating_funcs function .)
    STRING          reduce using rule 76 (creating_funcs -> creating_funcs function .)
    STDOUT          reduce using rule 76 (creating_funcs -> creating_funcs function .)
    DOT             reduce using rule 76 (creating_funcs -> creating_funcs function .)
    SPACE           reduce using rule 76 (creating_funcs -> creating_funcs function .)
    COMMENT_LINE    reduce using rule 76 (creating_funcs -> creating_funcs function .)
    COMMENT_BLOCK   reduce using rule 76 (creating_funcs -> creating_funcs function .)
    DROP            reduce using rule 76 (creating_funcs -> creating_funcs function .)
    SWAP            reduce using rule 76 (creating_funcs -> creating_funcs function .)
    ROT             reduce using rule 76 (creating_funcs -> creating_funcs function .)
    OVER            reduce using rule 76 (creating_funcs -> creating_funcs function .)
    CONCAT          reduce using rule 76 (creating_funcs -> creating_funcs function .)
    CR              reduce using rule 76 (creating_funcs -> creating_funcs function .)
    EMIT            reduce using rule 76 (creating_funcs -> creating_funcs function .)
    CHAR            reduce using rule 76 (creating_funcs -> creating_funcs function .)
    KEY             reduce using rule 76 (creating_funcs -> creating_funcs function .)
    SPACES          reduce using rule 76 (creating_funcs -> creating_funcs function .)
    2DUP            reduce using rule 76 (creating_funcs -> creating_funcs function .)
    VARIABLE_DEFENITION reduce using rule 76 (creating_funcs -> creating_funcs function .)
    VARIABLE_ASSIGNMENT reduce using rule 76 (creating_funcs -> creating_funcs function .)
    VARIABLE_FETCH  reduce using rule 76 (creating_funcs -> creating_funcs function .)
    VARIABLE_PRINT  reduce using rule 76 (creating_funcs -> creating_funcs function .)
    IF              reduce using rule 76 (creating_funcs -> creating_funcs function .)
    ELSE            reduce using rule 76 (creating_funcs -> creating_funcs function .)
    THEN            reduce using rule 76 (creating_funcs -> creating_funcs function .)
    DO              reduce using rule 76 (creating_funcs -> creating_funcs function .)
    LOOP            reduce using rule 76 (creating_funcs -> creating_funcs function .)
    $end            reduce using rule 76 (creating_funcs -> creating_funcs function .)
    PLUS            reduce using rule 76 (creating_funcs -> creating_funcs function .)
    MINUS           reduce using rule 76 (creating_funcs -> creating_funcs function .)
    TIMES           reduce using rule 76 (creating_funcs -> creating_funcs function .)
    DIVIDE          reduce using rule 76 (creating_funcs -> creating_funcs function .)
    MOD             reduce using rule 76 (creating_funcs -> creating_funcs function .)
    NOT             reduce using rule 76 (creating_funcs -> creating_funcs function .)
    INF             reduce using rule 76 (creating_funcs -> creating_funcs function .)
    SUP             reduce using rule 76 (creating_funcs -> creating_funcs function .)
    INFEQ           reduce using rule 76 (creating_funcs -> creating_funcs function .)
    SUPEQ           reduce using rule 76 (creating_funcs -> creating_funcs function .)


state 72

    (77) creating_funcs -> creating_funcs func_criada .

    FUNCTION        reduce using rule 77 (creating_funcs -> creating_funcs func_criada .)
    FUNCTION_CALL   reduce using rule 77 (creating_funcs -> creating_funcs func_criada .)
    FUNC_BODY       reduce using rule 77 (creating_funcs -> creating_funcs func_criada .)
    DUP             reduce using rule 77 (creating_funcs -> creating_funcs func_criada .)
    NUMBER          reduce using rule 77 (creating_funcs -> creating_funcs func_criada .)
    STRING          reduce using rule 77 (creating_funcs -> creating_funcs func_criada .)
    STDOUT          reduce using rule 77 (creating_funcs -> creating_funcs func_criada .)
    DOT             reduce using rule 77 (creating_funcs -> creating_funcs func_criada .)
    SPACE           reduce using rule 77 (creating_funcs -> creating_funcs func_criada .)
    COMMENT_LINE    reduce using rule 77 (creating_funcs -> creating_funcs func_criada .)
    COMMENT_BLOCK   reduce using rule 77 (creating_funcs -> creating_funcs func_criada .)
    DROP            reduce using rule 77 (creating_funcs -> creating_funcs func_criada .)
    SWAP            reduce using rule 77 (creating_funcs -> creating_funcs func_criada .)
    ROT             reduce using rule 77 (creating_funcs -> creating_funcs func_criada .)
    OVER            reduce using rule 77 (creating_funcs -> creating_funcs func_criada .)
    CONCAT          reduce using rule 77 (creating_funcs -> creating_funcs func_criada .)
    CR              reduce using rule 77 (creating_funcs -> creating_funcs func_criada .)
    EMIT            reduce using rule 77 (creating_funcs -> creating_funcs func_criada .)
    CHAR            reduce using rule 77 (creating_funcs -> creating_funcs func_criada .)
    KEY             reduce using rule 77 (creating_funcs -> creating_funcs func_criada .)
    SPACES          reduce using rule 77 (creating_funcs -> creating_funcs func_criada .)
    2DUP            reduce using rule 77 (creating_funcs -> creating_funcs func_criada .)
    VARIABLE_DEFENITION reduce using rule 77 (creating_funcs -> creating_funcs func_criada .)
    VARIABLE_ASSIGNMENT reduce using rule 77 (creating_funcs -> creating_funcs func_criada .)
    VARIABLE_FETCH  reduce using rule 77 (creating_funcs -> creating_funcs func_criada .)
    VARIABLE_PRINT  reduce using rule 77 (creating_funcs -> creating_funcs func_criada .)
    IF              reduce using rule 77 (creating_funcs -> creating_funcs func_criada .)
    ELSE            reduce using rule 77 (creating_funcs -> creating_funcs func_criada .)
    THEN            reduce using rule 77 (creating_funcs -> creating_funcs func_criada .)
    DO              reduce using rule 77 (creating_funcs -> creating_funcs func_criada .)
    LOOP            reduce using rule 77 (creating_funcs -> creating_funcs func_criada .)
    $end            reduce using rule 77 (creating_funcs -> creating_funcs func_criada .)
    PLUS            reduce using rule 77 (creating_funcs -> creating_funcs func_criada .)
    MINUS           reduce using rule 77 (creating_funcs -> creating_funcs func_criada .)
    TIMES           reduce using rule 77 (creating_funcs -> creating_funcs func_criada .)
    DIVIDE          reduce using rule 77 (creating_funcs -> creating_funcs func_criada .)
    MOD             reduce using rule 77 (creating_funcs -> creating_funcs func_criada .)
    NOT             reduce using rule 77 (creating_funcs -> creating_funcs func_criada .)
    INF             reduce using rule 77 (creating_funcs -> creating_funcs func_criada .)
    SUP             reduce using rule 77 (creating_funcs -> creating_funcs func_criada .)
    INFEQ           reduce using rule 77 (creating_funcs -> creating_funcs func_criada .)
    SUPEQ           reduce using rule 77 (creating_funcs -> creating_funcs func_criada .)


state 73

    (11) exp_aritmeticas -> comando comando PLUS .

    DUP             reduce using rule 11 (exp_aritmeticas -> comando comando PLUS .)
    NUMBER          reduce using rule 11 (exp_aritmeticas -> comando comando PLUS .)
    STRING          reduce using rule 11 (exp_aritmeticas -> comando comando PLUS .)
    STDOUT          reduce using rule 11 (exp_aritmeticas -> comando comando PLUS .)
    DOT             reduce using rule 11 (exp_aritmeticas -> comando comando PLUS .)
    SPACE           reduce using rule 11 (exp_aritmeticas -> comando comando PLUS .)
    COMMENT_LINE    reduce using rule 11 (exp_aritmeticas -> comando comando PLUS .)
    COMMENT_BLOCK   reduce using rule 11 (exp_aritmeticas -> comando comando PLUS .)
    DROP            reduce using rule 11 (exp_aritmeticas -> comando comando PLUS .)
    SWAP            reduce using rule 11 (exp_aritmeticas -> comando comando PLUS .)
    ROT             reduce using rule 11 (exp_aritmeticas -> comando comando PLUS .)
    OVER            reduce using rule 11 (exp_aritmeticas -> comando comando PLUS .)
    CONCAT          reduce using rule 11 (exp_aritmeticas -> comando comando PLUS .)
    CR              reduce using rule 11 (exp_aritmeticas -> comando comando PLUS .)
    EMIT            reduce using rule 11 (exp_aritmeticas -> comando comando PLUS .)
    CHAR            reduce using rule 11 (exp_aritmeticas -> comando comando PLUS .)
    KEY             reduce using rule 11 (exp_aritmeticas -> comando comando PLUS .)
    SPACES          reduce using rule 11 (exp_aritmeticas -> comando comando PLUS .)
    2DUP            reduce using rule 11 (exp_aritmeticas -> comando comando PLUS .)
    FUNC_BODY       reduce using rule 11 (exp_aritmeticas -> comando comando PLUS .)
    FUNCTION        reduce using rule 11 (exp_aritmeticas -> comando comando PLUS .)
    FUNCTION_CALL   reduce using rule 11 (exp_aritmeticas -> comando comando PLUS .)
    VARIABLE_DEFENITION reduce using rule 11 (exp_aritmeticas -> comando comando PLUS .)
    VARIABLE_ASSIGNMENT reduce using rule 11 (exp_aritmeticas -> comando comando PLUS .)
    VARIABLE_FETCH  reduce using rule 11 (exp_aritmeticas -> comando comando PLUS .)
    VARIABLE_PRINT  reduce using rule 11 (exp_aritmeticas -> comando comando PLUS .)
    IF              reduce using rule 11 (exp_aritmeticas -> comando comando PLUS .)
    ELSE            reduce using rule 11 (exp_aritmeticas -> comando comando PLUS .)
    THEN            reduce using rule 11 (exp_aritmeticas -> comando comando PLUS .)
    DO              reduce using rule 11 (exp_aritmeticas -> comando comando PLUS .)
    LOOP            reduce using rule 11 (exp_aritmeticas -> comando comando PLUS .)
    $end            reduce using rule 11 (exp_aritmeticas -> comando comando PLUS .)
    PLUS            reduce using rule 11 (exp_aritmeticas -> comando comando PLUS .)
    MINUS           reduce using rule 11 (exp_aritmeticas -> comando comando PLUS .)
    TIMES           reduce using rule 11 (exp_aritmeticas -> comando comando PLUS .)
    DIVIDE          reduce using rule 11 (exp_aritmeticas -> comando comando PLUS .)
    MOD             reduce using rule 11 (exp_aritmeticas -> comando comando PLUS .)
    NOT             reduce using rule 11 (exp_aritmeticas -> comando comando PLUS .)
    INF             reduce using rule 11 (exp_aritmeticas -> comando comando PLUS .)
    SUP             reduce using rule 11 (exp_aritmeticas -> comando comando PLUS .)
    INFEQ           reduce using rule 11 (exp_aritmeticas -> comando comando PLUS .)
    SUPEQ           reduce using rule 11 (exp_aritmeticas -> comando comando PLUS .)


state 74

    (12) exp_aritmeticas -> comando comando MINUS .

    DUP             reduce using rule 12 (exp_aritmeticas -> comando comando MINUS .)
    NUMBER          reduce using rule 12 (exp_aritmeticas -> comando comando MINUS .)
    STRING          reduce using rule 12 (exp_aritmeticas -> comando comando MINUS .)
    STDOUT          reduce using rule 12 (exp_aritmeticas -> comando comando MINUS .)
    DOT             reduce using rule 12 (exp_aritmeticas -> comando comando MINUS .)
    SPACE           reduce using rule 12 (exp_aritmeticas -> comando comando MINUS .)
    COMMENT_LINE    reduce using rule 12 (exp_aritmeticas -> comando comando MINUS .)
    COMMENT_BLOCK   reduce using rule 12 (exp_aritmeticas -> comando comando MINUS .)
    DROP            reduce using rule 12 (exp_aritmeticas -> comando comando MINUS .)
    SWAP            reduce using rule 12 (exp_aritmeticas -> comando comando MINUS .)
    ROT             reduce using rule 12 (exp_aritmeticas -> comando comando MINUS .)
    OVER            reduce using rule 12 (exp_aritmeticas -> comando comando MINUS .)
    CONCAT          reduce using rule 12 (exp_aritmeticas -> comando comando MINUS .)
    CR              reduce using rule 12 (exp_aritmeticas -> comando comando MINUS .)
    EMIT            reduce using rule 12 (exp_aritmeticas -> comando comando MINUS .)
    CHAR            reduce using rule 12 (exp_aritmeticas -> comando comando MINUS .)
    KEY             reduce using rule 12 (exp_aritmeticas -> comando comando MINUS .)
    SPACES          reduce using rule 12 (exp_aritmeticas -> comando comando MINUS .)
    2DUP            reduce using rule 12 (exp_aritmeticas -> comando comando MINUS .)
    FUNC_BODY       reduce using rule 12 (exp_aritmeticas -> comando comando MINUS .)
    FUNCTION        reduce using rule 12 (exp_aritmeticas -> comando comando MINUS .)
    FUNCTION_CALL   reduce using rule 12 (exp_aritmeticas -> comando comando MINUS .)
    VARIABLE_DEFENITION reduce using rule 12 (exp_aritmeticas -> comando comando MINUS .)
    VARIABLE_ASSIGNMENT reduce using rule 12 (exp_aritmeticas -> comando comando MINUS .)
    VARIABLE_FETCH  reduce using rule 12 (exp_aritmeticas -> comando comando MINUS .)
    VARIABLE_PRINT  reduce using rule 12 (exp_aritmeticas -> comando comando MINUS .)
    IF              reduce using rule 12 (exp_aritmeticas -> comando comando MINUS .)
    ELSE            reduce using rule 12 (exp_aritmeticas -> comando comando MINUS .)
    THEN            reduce using rule 12 (exp_aritmeticas -> comando comando MINUS .)
    DO              reduce using rule 12 (exp_aritmeticas -> comando comando MINUS .)
    LOOP            reduce using rule 12 (exp_aritmeticas -> comando comando MINUS .)
    $end            reduce using rule 12 (exp_aritmeticas -> comando comando MINUS .)
    PLUS            reduce using rule 12 (exp_aritmeticas -> comando comando MINUS .)
    MINUS           reduce using rule 12 (exp_aritmeticas -> comando comando MINUS .)
    TIMES           reduce using rule 12 (exp_aritmeticas -> comando comando MINUS .)
    DIVIDE          reduce using rule 12 (exp_aritmeticas -> comando comando MINUS .)
    MOD             reduce using rule 12 (exp_aritmeticas -> comando comando MINUS .)
    NOT             reduce using rule 12 (exp_aritmeticas -> comando comando MINUS .)
    INF             reduce using rule 12 (exp_aritmeticas -> comando comando MINUS .)
    SUP             reduce using rule 12 (exp_aritmeticas -> comando comando MINUS .)
    INFEQ           reduce using rule 12 (exp_aritmeticas -> comando comando MINUS .)
    SUPEQ           reduce using rule 12 (exp_aritmeticas -> comando comando MINUS .)


state 75

    (13) exp_aritmeticas -> comando comando TIMES .

    DUP             reduce using rule 13 (exp_aritmeticas -> comando comando TIMES .)
    NUMBER          reduce using rule 13 (exp_aritmeticas -> comando comando TIMES .)
    STRING          reduce using rule 13 (exp_aritmeticas -> comando comando TIMES .)
    STDOUT          reduce using rule 13 (exp_aritmeticas -> comando comando TIMES .)
    DOT             reduce using rule 13 (exp_aritmeticas -> comando comando TIMES .)
    SPACE           reduce using rule 13 (exp_aritmeticas -> comando comando TIMES .)
    COMMENT_LINE    reduce using rule 13 (exp_aritmeticas -> comando comando TIMES .)
    COMMENT_BLOCK   reduce using rule 13 (exp_aritmeticas -> comando comando TIMES .)
    DROP            reduce using rule 13 (exp_aritmeticas -> comando comando TIMES .)
    SWAP            reduce using rule 13 (exp_aritmeticas -> comando comando TIMES .)
    ROT             reduce using rule 13 (exp_aritmeticas -> comando comando TIMES .)
    OVER            reduce using rule 13 (exp_aritmeticas -> comando comando TIMES .)
    CONCAT          reduce using rule 13 (exp_aritmeticas -> comando comando TIMES .)
    CR              reduce using rule 13 (exp_aritmeticas -> comando comando TIMES .)
    EMIT            reduce using rule 13 (exp_aritmeticas -> comando comando TIMES .)
    CHAR            reduce using rule 13 (exp_aritmeticas -> comando comando TIMES .)
    KEY             reduce using rule 13 (exp_aritmeticas -> comando comando TIMES .)
    SPACES          reduce using rule 13 (exp_aritmeticas -> comando comando TIMES .)
    2DUP            reduce using rule 13 (exp_aritmeticas -> comando comando TIMES .)
    FUNC_BODY       reduce using rule 13 (exp_aritmeticas -> comando comando TIMES .)
    FUNCTION        reduce using rule 13 (exp_aritmeticas -> comando comando TIMES .)
    FUNCTION_CALL   reduce using rule 13 (exp_aritmeticas -> comando comando TIMES .)
    VARIABLE_DEFENITION reduce using rule 13 (exp_aritmeticas -> comando comando TIMES .)
    VARIABLE_ASSIGNMENT reduce using rule 13 (exp_aritmeticas -> comando comando TIMES .)
    VARIABLE_FETCH  reduce using rule 13 (exp_aritmeticas -> comando comando TIMES .)
    VARIABLE_PRINT  reduce using rule 13 (exp_aritmeticas -> comando comando TIMES .)
    IF              reduce using rule 13 (exp_aritmeticas -> comando comando TIMES .)
    ELSE            reduce using rule 13 (exp_aritmeticas -> comando comando TIMES .)
    THEN            reduce using rule 13 (exp_aritmeticas -> comando comando TIMES .)
    DO              reduce using rule 13 (exp_aritmeticas -> comando comando TIMES .)
    LOOP            reduce using rule 13 (exp_aritmeticas -> comando comando TIMES .)
    $end            reduce using rule 13 (exp_aritmeticas -> comando comando TIMES .)
    PLUS            reduce using rule 13 (exp_aritmeticas -> comando comando TIMES .)
    MINUS           reduce using rule 13 (exp_aritmeticas -> comando comando TIMES .)
    TIMES           reduce using rule 13 (exp_aritmeticas -> comando comando TIMES .)
    DIVIDE          reduce using rule 13 (exp_aritmeticas -> comando comando TIMES .)
    MOD             reduce using rule 13 (exp_aritmeticas -> comando comando TIMES .)
    NOT             reduce using rule 13 (exp_aritmeticas -> comando comando TIMES .)
    INF             reduce using rule 13 (exp_aritmeticas -> comando comando TIMES .)
    SUP             reduce using rule 13 (exp_aritmeticas -> comando comando TIMES .)
    INFEQ           reduce using rule 13 (exp_aritmeticas -> comando comando TIMES .)
    SUPEQ           reduce using rule 13 (exp_aritmeticas -> comando comando TIMES .)


state 76

    (14) exp_aritmeticas -> comando comando DIVIDE .

    DUP             reduce using rule 14 (exp_aritmeticas -> comando comando DIVIDE .)
    NUMBER          reduce using rule 14 (exp_aritmeticas -> comando comando DIVIDE .)
    STRING          reduce using rule 14 (exp_aritmeticas -> comando comando DIVIDE .)
    STDOUT          reduce using rule 14 (exp_aritmeticas -> comando comando DIVIDE .)
    DOT             reduce using rule 14 (exp_aritmeticas -> comando comando DIVIDE .)
    SPACE           reduce using rule 14 (exp_aritmeticas -> comando comando DIVIDE .)
    COMMENT_LINE    reduce using rule 14 (exp_aritmeticas -> comando comando DIVIDE .)
    COMMENT_BLOCK   reduce using rule 14 (exp_aritmeticas -> comando comando DIVIDE .)
    DROP            reduce using rule 14 (exp_aritmeticas -> comando comando DIVIDE .)
    SWAP            reduce using rule 14 (exp_aritmeticas -> comando comando DIVIDE .)
    ROT             reduce using rule 14 (exp_aritmeticas -> comando comando DIVIDE .)
    OVER            reduce using rule 14 (exp_aritmeticas -> comando comando DIVIDE .)
    CONCAT          reduce using rule 14 (exp_aritmeticas -> comando comando DIVIDE .)
    CR              reduce using rule 14 (exp_aritmeticas -> comando comando DIVIDE .)
    EMIT            reduce using rule 14 (exp_aritmeticas -> comando comando DIVIDE .)
    CHAR            reduce using rule 14 (exp_aritmeticas -> comando comando DIVIDE .)
    KEY             reduce using rule 14 (exp_aritmeticas -> comando comando DIVIDE .)
    SPACES          reduce using rule 14 (exp_aritmeticas -> comando comando DIVIDE .)
    2DUP            reduce using rule 14 (exp_aritmeticas -> comando comando DIVIDE .)
    FUNC_BODY       reduce using rule 14 (exp_aritmeticas -> comando comando DIVIDE .)
    FUNCTION        reduce using rule 14 (exp_aritmeticas -> comando comando DIVIDE .)
    FUNCTION_CALL   reduce using rule 14 (exp_aritmeticas -> comando comando DIVIDE .)
    VARIABLE_DEFENITION reduce using rule 14 (exp_aritmeticas -> comando comando DIVIDE .)
    VARIABLE_ASSIGNMENT reduce using rule 14 (exp_aritmeticas -> comando comando DIVIDE .)
    VARIABLE_FETCH  reduce using rule 14 (exp_aritmeticas -> comando comando DIVIDE .)
    VARIABLE_PRINT  reduce using rule 14 (exp_aritmeticas -> comando comando DIVIDE .)
    IF              reduce using rule 14 (exp_aritmeticas -> comando comando DIVIDE .)
    ELSE            reduce using rule 14 (exp_aritmeticas -> comando comando DIVIDE .)
    THEN            reduce using rule 14 (exp_aritmeticas -> comando comando DIVIDE .)
    DO              reduce using rule 14 (exp_aritmeticas -> comando comando DIVIDE .)
    LOOP            reduce using rule 14 (exp_aritmeticas -> comando comando DIVIDE .)
    $end            reduce using rule 14 (exp_aritmeticas -> comando comando DIVIDE .)
    PLUS            reduce using rule 14 (exp_aritmeticas -> comando comando DIVIDE .)
    MINUS           reduce using rule 14 (exp_aritmeticas -> comando comando DIVIDE .)
    TIMES           reduce using rule 14 (exp_aritmeticas -> comando comando DIVIDE .)
    DIVIDE          reduce using rule 14 (exp_aritmeticas -> comando comando DIVIDE .)
    MOD             reduce using rule 14 (exp_aritmeticas -> comando comando DIVIDE .)
    NOT             reduce using rule 14 (exp_aritmeticas -> comando comando DIVIDE .)
    INF             reduce using rule 14 (exp_aritmeticas -> comando comando DIVIDE .)
    SUP             reduce using rule 14 (exp_aritmeticas -> comando comando DIVIDE .)
    INFEQ           reduce using rule 14 (exp_aritmeticas -> comando comando DIVIDE .)
    SUPEQ           reduce using rule 14 (exp_aritmeticas -> comando comando DIVIDE .)


state 77

    (15) exp_aritmeticas -> comando comando MOD .

    DUP             reduce using rule 15 (exp_aritmeticas -> comando comando MOD .)
    NUMBER          reduce using rule 15 (exp_aritmeticas -> comando comando MOD .)
    STRING          reduce using rule 15 (exp_aritmeticas -> comando comando MOD .)
    STDOUT          reduce using rule 15 (exp_aritmeticas -> comando comando MOD .)
    DOT             reduce using rule 15 (exp_aritmeticas -> comando comando MOD .)
    SPACE           reduce using rule 15 (exp_aritmeticas -> comando comando MOD .)
    COMMENT_LINE    reduce using rule 15 (exp_aritmeticas -> comando comando MOD .)
    COMMENT_BLOCK   reduce using rule 15 (exp_aritmeticas -> comando comando MOD .)
    DROP            reduce using rule 15 (exp_aritmeticas -> comando comando MOD .)
    SWAP            reduce using rule 15 (exp_aritmeticas -> comando comando MOD .)
    ROT             reduce using rule 15 (exp_aritmeticas -> comando comando MOD .)
    OVER            reduce using rule 15 (exp_aritmeticas -> comando comando MOD .)
    CONCAT          reduce using rule 15 (exp_aritmeticas -> comando comando MOD .)
    CR              reduce using rule 15 (exp_aritmeticas -> comando comando MOD .)
    EMIT            reduce using rule 15 (exp_aritmeticas -> comando comando MOD .)
    CHAR            reduce using rule 15 (exp_aritmeticas -> comando comando MOD .)
    KEY             reduce using rule 15 (exp_aritmeticas -> comando comando MOD .)
    SPACES          reduce using rule 15 (exp_aritmeticas -> comando comando MOD .)
    2DUP            reduce using rule 15 (exp_aritmeticas -> comando comando MOD .)
    FUNC_BODY       reduce using rule 15 (exp_aritmeticas -> comando comando MOD .)
    FUNCTION        reduce using rule 15 (exp_aritmeticas -> comando comando MOD .)
    FUNCTION_CALL   reduce using rule 15 (exp_aritmeticas -> comando comando MOD .)
    VARIABLE_DEFENITION reduce using rule 15 (exp_aritmeticas -> comando comando MOD .)
    VARIABLE_ASSIGNMENT reduce using rule 15 (exp_aritmeticas -> comando comando MOD .)
    VARIABLE_FETCH  reduce using rule 15 (exp_aritmeticas -> comando comando MOD .)
    VARIABLE_PRINT  reduce using rule 15 (exp_aritmeticas -> comando comando MOD .)
    IF              reduce using rule 15 (exp_aritmeticas -> comando comando MOD .)
    ELSE            reduce using rule 15 (exp_aritmeticas -> comando comando MOD .)
    THEN            reduce using rule 15 (exp_aritmeticas -> comando comando MOD .)
    DO              reduce using rule 15 (exp_aritmeticas -> comando comando MOD .)
    LOOP            reduce using rule 15 (exp_aritmeticas -> comando comando MOD .)
    $end            reduce using rule 15 (exp_aritmeticas -> comando comando MOD .)
    PLUS            reduce using rule 15 (exp_aritmeticas -> comando comando MOD .)
    MINUS           reduce using rule 15 (exp_aritmeticas -> comando comando MOD .)
    TIMES           reduce using rule 15 (exp_aritmeticas -> comando comando MOD .)
    DIVIDE          reduce using rule 15 (exp_aritmeticas -> comando comando MOD .)
    MOD             reduce using rule 15 (exp_aritmeticas -> comando comando MOD .)
    NOT             reduce using rule 15 (exp_aritmeticas -> comando comando MOD .)
    INF             reduce using rule 15 (exp_aritmeticas -> comando comando MOD .)
    SUP             reduce using rule 15 (exp_aritmeticas -> comando comando MOD .)
    INFEQ           reduce using rule 15 (exp_aritmeticas -> comando comando MOD .)
    SUPEQ           reduce using rule 15 (exp_aritmeticas -> comando comando MOD .)


state 78

    (16) exp_relacionais -> comando comando NOT .

    DUP             reduce using rule 16 (exp_relacionais -> comando comando NOT .)
    NUMBER          reduce using rule 16 (exp_relacionais -> comando comando NOT .)
    STRING          reduce using rule 16 (exp_relacionais -> comando comando NOT .)
    STDOUT          reduce using rule 16 (exp_relacionais -> comando comando NOT .)
    DOT             reduce using rule 16 (exp_relacionais -> comando comando NOT .)
    SPACE           reduce using rule 16 (exp_relacionais -> comando comando NOT .)
    COMMENT_LINE    reduce using rule 16 (exp_relacionais -> comando comando NOT .)
    COMMENT_BLOCK   reduce using rule 16 (exp_relacionais -> comando comando NOT .)
    DROP            reduce using rule 16 (exp_relacionais -> comando comando NOT .)
    SWAP            reduce using rule 16 (exp_relacionais -> comando comando NOT .)
    ROT             reduce using rule 16 (exp_relacionais -> comando comando NOT .)
    OVER            reduce using rule 16 (exp_relacionais -> comando comando NOT .)
    CONCAT          reduce using rule 16 (exp_relacionais -> comando comando NOT .)
    CR              reduce using rule 16 (exp_relacionais -> comando comando NOT .)
    EMIT            reduce using rule 16 (exp_relacionais -> comando comando NOT .)
    CHAR            reduce using rule 16 (exp_relacionais -> comando comando NOT .)
    KEY             reduce using rule 16 (exp_relacionais -> comando comando NOT .)
    SPACES          reduce using rule 16 (exp_relacionais -> comando comando NOT .)
    2DUP            reduce using rule 16 (exp_relacionais -> comando comando NOT .)
    FUNC_BODY       reduce using rule 16 (exp_relacionais -> comando comando NOT .)
    FUNCTION        reduce using rule 16 (exp_relacionais -> comando comando NOT .)
    FUNCTION_CALL   reduce using rule 16 (exp_relacionais -> comando comando NOT .)
    VARIABLE_DEFENITION reduce using rule 16 (exp_relacionais -> comando comando NOT .)
    VARIABLE_ASSIGNMENT reduce using rule 16 (exp_relacionais -> comando comando NOT .)
    VARIABLE_FETCH  reduce using rule 16 (exp_relacionais -> comando comando NOT .)
    VARIABLE_PRINT  reduce using rule 16 (exp_relacionais -> comando comando NOT .)
    IF              reduce using rule 16 (exp_relacionais -> comando comando NOT .)
    ELSE            reduce using rule 16 (exp_relacionais -> comando comando NOT .)
    THEN            reduce using rule 16 (exp_relacionais -> comando comando NOT .)
    DO              reduce using rule 16 (exp_relacionais -> comando comando NOT .)
    LOOP            reduce using rule 16 (exp_relacionais -> comando comando NOT .)
    $end            reduce using rule 16 (exp_relacionais -> comando comando NOT .)
    PLUS            reduce using rule 16 (exp_relacionais -> comando comando NOT .)
    MINUS           reduce using rule 16 (exp_relacionais -> comando comando NOT .)
    TIMES           reduce using rule 16 (exp_relacionais -> comando comando NOT .)
    DIVIDE          reduce using rule 16 (exp_relacionais -> comando comando NOT .)
    MOD             reduce using rule 16 (exp_relacionais -> comando comando NOT .)
    NOT             reduce using rule 16 (exp_relacionais -> comando comando NOT .)
    INF             reduce using rule 16 (exp_relacionais -> comando comando NOT .)
    SUP             reduce using rule 16 (exp_relacionais -> comando comando NOT .)
    INFEQ           reduce using rule 16 (exp_relacionais -> comando comando NOT .)
    SUPEQ           reduce using rule 16 (exp_relacionais -> comando comando NOT .)


state 79

    (17) exp_relacionais -> comando comando INF .

    DUP             reduce using rule 17 (exp_relacionais -> comando comando INF .)
    NUMBER          reduce using rule 17 (exp_relacionais -> comando comando INF .)
    STRING          reduce using rule 17 (exp_relacionais -> comando comando INF .)
    STDOUT          reduce using rule 17 (exp_relacionais -> comando comando INF .)
    DOT             reduce using rule 17 (exp_relacionais -> comando comando INF .)
    SPACE           reduce using rule 17 (exp_relacionais -> comando comando INF .)
    COMMENT_LINE    reduce using rule 17 (exp_relacionais -> comando comando INF .)
    COMMENT_BLOCK   reduce using rule 17 (exp_relacionais -> comando comando INF .)
    DROP            reduce using rule 17 (exp_relacionais -> comando comando INF .)
    SWAP            reduce using rule 17 (exp_relacionais -> comando comando INF .)
    ROT             reduce using rule 17 (exp_relacionais -> comando comando INF .)
    OVER            reduce using rule 17 (exp_relacionais -> comando comando INF .)
    CONCAT          reduce using rule 17 (exp_relacionais -> comando comando INF .)
    CR              reduce using rule 17 (exp_relacionais -> comando comando INF .)
    EMIT            reduce using rule 17 (exp_relacionais -> comando comando INF .)
    CHAR            reduce using rule 17 (exp_relacionais -> comando comando INF .)
    KEY             reduce using rule 17 (exp_relacionais -> comando comando INF .)
    SPACES          reduce using rule 17 (exp_relacionais -> comando comando INF .)
    2DUP            reduce using rule 17 (exp_relacionais -> comando comando INF .)
    FUNC_BODY       reduce using rule 17 (exp_relacionais -> comando comando INF .)
    FUNCTION        reduce using rule 17 (exp_relacionais -> comando comando INF .)
    FUNCTION_CALL   reduce using rule 17 (exp_relacionais -> comando comando INF .)
    VARIABLE_DEFENITION reduce using rule 17 (exp_relacionais -> comando comando INF .)
    VARIABLE_ASSIGNMENT reduce using rule 17 (exp_relacionais -> comando comando INF .)
    VARIABLE_FETCH  reduce using rule 17 (exp_relacionais -> comando comando INF .)
    VARIABLE_PRINT  reduce using rule 17 (exp_relacionais -> comando comando INF .)
    IF              reduce using rule 17 (exp_relacionais -> comando comando INF .)
    ELSE            reduce using rule 17 (exp_relacionais -> comando comando INF .)
    THEN            reduce using rule 17 (exp_relacionais -> comando comando INF .)
    DO              reduce using rule 17 (exp_relacionais -> comando comando INF .)
    LOOP            reduce using rule 17 (exp_relacionais -> comando comando INF .)
    $end            reduce using rule 17 (exp_relacionais -> comando comando INF .)
    PLUS            reduce using rule 17 (exp_relacionais -> comando comando INF .)
    MINUS           reduce using rule 17 (exp_relacionais -> comando comando INF .)
    TIMES           reduce using rule 17 (exp_relacionais -> comando comando INF .)
    DIVIDE          reduce using rule 17 (exp_relacionais -> comando comando INF .)
    MOD             reduce using rule 17 (exp_relacionais -> comando comando INF .)
    NOT             reduce using rule 17 (exp_relacionais -> comando comando INF .)
    INF             reduce using rule 17 (exp_relacionais -> comando comando INF .)
    SUP             reduce using rule 17 (exp_relacionais -> comando comando INF .)
    INFEQ           reduce using rule 17 (exp_relacionais -> comando comando INF .)
    SUPEQ           reduce using rule 17 (exp_relacionais -> comando comando INF .)


state 80

    (18) exp_relacionais -> comando comando SUP .

    DUP             reduce using rule 18 (exp_relacionais -> comando comando SUP .)
    NUMBER          reduce using rule 18 (exp_relacionais -> comando comando SUP .)
    STRING          reduce using rule 18 (exp_relacionais -> comando comando SUP .)
    STDOUT          reduce using rule 18 (exp_relacionais -> comando comando SUP .)
    DOT             reduce using rule 18 (exp_relacionais -> comando comando SUP .)
    SPACE           reduce using rule 18 (exp_relacionais -> comando comando SUP .)
    COMMENT_LINE    reduce using rule 18 (exp_relacionais -> comando comando SUP .)
    COMMENT_BLOCK   reduce using rule 18 (exp_relacionais -> comando comando SUP .)
    DROP            reduce using rule 18 (exp_relacionais -> comando comando SUP .)
    SWAP            reduce using rule 18 (exp_relacionais -> comando comando SUP .)
    ROT             reduce using rule 18 (exp_relacionais -> comando comando SUP .)
    OVER            reduce using rule 18 (exp_relacionais -> comando comando SUP .)
    CONCAT          reduce using rule 18 (exp_relacionais -> comando comando SUP .)
    CR              reduce using rule 18 (exp_relacionais -> comando comando SUP .)
    EMIT            reduce using rule 18 (exp_relacionais -> comando comando SUP .)
    CHAR            reduce using rule 18 (exp_relacionais -> comando comando SUP .)
    KEY             reduce using rule 18 (exp_relacionais -> comando comando SUP .)
    SPACES          reduce using rule 18 (exp_relacionais -> comando comando SUP .)
    2DUP            reduce using rule 18 (exp_relacionais -> comando comando SUP .)
    FUNC_BODY       reduce using rule 18 (exp_relacionais -> comando comando SUP .)
    FUNCTION        reduce using rule 18 (exp_relacionais -> comando comando SUP .)
    FUNCTION_CALL   reduce using rule 18 (exp_relacionais -> comando comando SUP .)
    VARIABLE_DEFENITION reduce using rule 18 (exp_relacionais -> comando comando SUP .)
    VARIABLE_ASSIGNMENT reduce using rule 18 (exp_relacionais -> comando comando SUP .)
    VARIABLE_FETCH  reduce using rule 18 (exp_relacionais -> comando comando SUP .)
    VARIABLE_PRINT  reduce using rule 18 (exp_relacionais -> comando comando SUP .)
    IF              reduce using rule 18 (exp_relacionais -> comando comando SUP .)
    ELSE            reduce using rule 18 (exp_relacionais -> comando comando SUP .)
    THEN            reduce using rule 18 (exp_relacionais -> comando comando SUP .)
    DO              reduce using rule 18 (exp_relacionais -> comando comando SUP .)
    LOOP            reduce using rule 18 (exp_relacionais -> comando comando SUP .)
    $end            reduce using rule 18 (exp_relacionais -> comando comando SUP .)
    PLUS            reduce using rule 18 (exp_relacionais -> comando comando SUP .)
    MINUS           reduce using rule 18 (exp_relacionais -> comando comando SUP .)
    TIMES           reduce using rule 18 (exp_relacionais -> comando comando SUP .)
    DIVIDE          reduce using rule 18 (exp_relacionais -> comando comando SUP .)
    MOD             reduce using rule 18 (exp_relacionais -> comando comando SUP .)
    NOT             reduce using rule 18 (exp_relacionais -> comando comando SUP .)
    INF             reduce using rule 18 (exp_relacionais -> comando comando SUP .)
    SUP             reduce using rule 18 (exp_relacionais -> comando comando SUP .)
    INFEQ           reduce using rule 18 (exp_relacionais -> comando comando SUP .)
    SUPEQ           reduce using rule 18 (exp_relacionais -> comando comando SUP .)


state 81

    (19) exp_relacionais -> comando comando INFEQ .

    DUP             reduce using rule 19 (exp_relacionais -> comando comando INFEQ .)
    NUMBER          reduce using rule 19 (exp_relacionais -> comando comando INFEQ .)
    STRING          reduce using rule 19 (exp_relacionais -> comando comando INFEQ .)
    STDOUT          reduce using rule 19 (exp_relacionais -> comando comando INFEQ .)
    DOT             reduce using rule 19 (exp_relacionais -> comando comando INFEQ .)
    SPACE           reduce using rule 19 (exp_relacionais -> comando comando INFEQ .)
    COMMENT_LINE    reduce using rule 19 (exp_relacionais -> comando comando INFEQ .)
    COMMENT_BLOCK   reduce using rule 19 (exp_relacionais -> comando comando INFEQ .)
    DROP            reduce using rule 19 (exp_relacionais -> comando comando INFEQ .)
    SWAP            reduce using rule 19 (exp_relacionais -> comando comando INFEQ .)
    ROT             reduce using rule 19 (exp_relacionais -> comando comando INFEQ .)
    OVER            reduce using rule 19 (exp_relacionais -> comando comando INFEQ .)
    CONCAT          reduce using rule 19 (exp_relacionais -> comando comando INFEQ .)
    CR              reduce using rule 19 (exp_relacionais -> comando comando INFEQ .)
    EMIT            reduce using rule 19 (exp_relacionais -> comando comando INFEQ .)
    CHAR            reduce using rule 19 (exp_relacionais -> comando comando INFEQ .)
    KEY             reduce using rule 19 (exp_relacionais -> comando comando INFEQ .)
    SPACES          reduce using rule 19 (exp_relacionais -> comando comando INFEQ .)
    2DUP            reduce using rule 19 (exp_relacionais -> comando comando INFEQ .)
    FUNC_BODY       reduce using rule 19 (exp_relacionais -> comando comando INFEQ .)
    FUNCTION        reduce using rule 19 (exp_relacionais -> comando comando INFEQ .)
    FUNCTION_CALL   reduce using rule 19 (exp_relacionais -> comando comando INFEQ .)
    VARIABLE_DEFENITION reduce using rule 19 (exp_relacionais -> comando comando INFEQ .)
    VARIABLE_ASSIGNMENT reduce using rule 19 (exp_relacionais -> comando comando INFEQ .)
    VARIABLE_FETCH  reduce using rule 19 (exp_relacionais -> comando comando INFEQ .)
    VARIABLE_PRINT  reduce using rule 19 (exp_relacionais -> comando comando INFEQ .)
    IF              reduce using rule 19 (exp_relacionais -> comando comando INFEQ .)
    ELSE            reduce using rule 19 (exp_relacionais -> comando comando INFEQ .)
    THEN            reduce using rule 19 (exp_relacionais -> comando comando INFEQ .)
    DO              reduce using rule 19 (exp_relacionais -> comando comando INFEQ .)
    LOOP            reduce using rule 19 (exp_relacionais -> comando comando INFEQ .)
    $end            reduce using rule 19 (exp_relacionais -> comando comando INFEQ .)
    PLUS            reduce using rule 19 (exp_relacionais -> comando comando INFEQ .)
    MINUS           reduce using rule 19 (exp_relacionais -> comando comando INFEQ .)
    TIMES           reduce using rule 19 (exp_relacionais -> comando comando INFEQ .)
    DIVIDE          reduce using rule 19 (exp_relacionais -> comando comando INFEQ .)
    MOD             reduce using rule 19 (exp_relacionais -> comando comando INFEQ .)
    NOT             reduce using rule 19 (exp_relacionais -> comando comando INFEQ .)
    INF             reduce using rule 19 (exp_relacionais -> comando comando INFEQ .)
    SUP             reduce using rule 19 (exp_relacionais -> comando comando INFEQ .)
    INFEQ           reduce using rule 19 (exp_relacionais -> comando comando INFEQ .)
    SUPEQ           reduce using rule 19 (exp_relacionais -> comando comando INFEQ .)


state 82

    (20) exp_relacionais -> comando comando SUPEQ .

    DUP             reduce using rule 20 (exp_relacionais -> comando comando SUPEQ .)
    NUMBER          reduce using rule 20 (exp_relacionais -> comando comando SUPEQ .)
    STRING          reduce using rule 20 (exp_relacionais -> comando comando SUPEQ .)
    STDOUT          reduce using rule 20 (exp_relacionais -> comando comando SUPEQ .)
    DOT             reduce using rule 20 (exp_relacionais -> comando comando SUPEQ .)
    SPACE           reduce using rule 20 (exp_relacionais -> comando comando SUPEQ .)
    COMMENT_LINE    reduce using rule 20 (exp_relacionais -> comando comando SUPEQ .)
    COMMENT_BLOCK   reduce using rule 20 (exp_relacionais -> comando comando SUPEQ .)
    DROP            reduce using rule 20 (exp_relacionais -> comando comando SUPEQ .)
    SWAP            reduce using rule 20 (exp_relacionais -> comando comando SUPEQ .)
    ROT             reduce using rule 20 (exp_relacionais -> comando comando SUPEQ .)
    OVER            reduce using rule 20 (exp_relacionais -> comando comando SUPEQ .)
    CONCAT          reduce using rule 20 (exp_relacionais -> comando comando SUPEQ .)
    CR              reduce using rule 20 (exp_relacionais -> comando comando SUPEQ .)
    EMIT            reduce using rule 20 (exp_relacionais -> comando comando SUPEQ .)
    CHAR            reduce using rule 20 (exp_relacionais -> comando comando SUPEQ .)
    KEY             reduce using rule 20 (exp_relacionais -> comando comando SUPEQ .)
    SPACES          reduce using rule 20 (exp_relacionais -> comando comando SUPEQ .)
    2DUP            reduce using rule 20 (exp_relacionais -> comando comando SUPEQ .)
    FUNC_BODY       reduce using rule 20 (exp_relacionais -> comando comando SUPEQ .)
    FUNCTION        reduce using rule 20 (exp_relacionais -> comando comando SUPEQ .)
    FUNCTION_CALL   reduce using rule 20 (exp_relacionais -> comando comando SUPEQ .)
    VARIABLE_DEFENITION reduce using rule 20 (exp_relacionais -> comando comando SUPEQ .)
    VARIABLE_ASSIGNMENT reduce using rule 20 (exp_relacionais -> comando comando SUPEQ .)
    VARIABLE_FETCH  reduce using rule 20 (exp_relacionais -> comando comando SUPEQ .)
    VARIABLE_PRINT  reduce using rule 20 (exp_relacionais -> comando comando SUPEQ .)
    IF              reduce using rule 20 (exp_relacionais -> comando comando SUPEQ .)
    ELSE            reduce using rule 20 (exp_relacionais -> comando comando SUPEQ .)
    THEN            reduce using rule 20 (exp_relacionais -> comando comando SUPEQ .)
    DO              reduce using rule 20 (exp_relacionais -> comando comando SUPEQ .)
    LOOP            reduce using rule 20 (exp_relacionais -> comando comando SUPEQ .)
    $end            reduce using rule 20 (exp_relacionais -> comando comando SUPEQ .)
    PLUS            reduce using rule 20 (exp_relacionais -> comando comando SUPEQ .)
    MINUS           reduce using rule 20 (exp_relacionais -> comando comando SUPEQ .)
    TIMES           reduce using rule 20 (exp_relacionais -> comando comando SUPEQ .)
    DIVIDE          reduce using rule 20 (exp_relacionais -> comando comando SUPEQ .)
    MOD             reduce using rule 20 (exp_relacionais -> comando comando SUPEQ .)
    NOT             reduce using rule 20 (exp_relacionais -> comando comando SUPEQ .)
    INF             reduce using rule 20 (exp_relacionais -> comando comando SUPEQ .)
    SUP             reduce using rule 20 (exp_relacionais -> comando comando SUPEQ .)
    INFEQ           reduce using rule 20 (exp_relacionais -> comando comando SUPEQ .)
    SUPEQ           reduce using rule 20 (exp_relacionais -> comando comando SUPEQ .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NUMBER in state 3 resolved as shift
WARNING: shift/reduce conflict for STRING in state 3 resolved as shift
WARNING: shift/reduce conflict for STDOUT in state 3 resolved as shift
WARNING: shift/reduce conflict for DOT in state 3 resolved as shift
WARNING: shift/reduce conflict for SPACE in state 3 resolved as shift
WARNING: shift/reduce conflict for COMMENT_LINE in state 3 resolved as shift
WARNING: shift/reduce conflict for COMMENT_BLOCK in state 3 resolved as shift
WARNING: shift/reduce conflict for DROP in state 3 resolved as shift
WARNING: shift/reduce conflict for SWAP in state 3 resolved as shift
WARNING: shift/reduce conflict for ROT in state 3 resolved as shift
WARNING: shift/reduce conflict for OVER in state 3 resolved as shift
WARNING: shift/reduce conflict for CONCAT in state 3 resolved as shift
WARNING: shift/reduce conflict for CR in state 3 resolved as shift
WARNING: shift/reduce conflict for EMIT in state 3 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 3 resolved as shift
WARNING: shift/reduce conflict for KEY in state 3 resolved as shift
WARNING: shift/reduce conflict for SPACES in state 3 resolved as shift
WARNING: shift/reduce conflict for 2DUP in state 3 resolved as shift
WARNING: shift/reduce conflict for FUNC_BODY in state 3 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 3 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_CALL in state 3 resolved as shift
WARNING: shift/reduce conflict for VARIABLE_DEFENITION in state 3 resolved as shift
WARNING: shift/reduce conflict for VARIABLE_ASSIGNMENT in state 3 resolved as shift
WARNING: shift/reduce conflict for VARIABLE_FETCH in state 3 resolved as shift
WARNING: shift/reduce conflict for VARIABLE_PRINT in state 3 resolved as shift
WARNING: shift/reduce conflict for IF in state 3 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 3 resolved as shift
WARNING: shift/reduce conflict for THEN in state 3 resolved as shift
WARNING: shift/reduce conflict for DO in state 3 resolved as shift
WARNING: shift/reduce conflict for LOOP in state 3 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 8 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_CALL in state 8 resolved as shift
WARNING: shift/reduce conflict for FUNC_BODY in state 8 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 68 resolved as shift
WARNING: shift/reduce conflict for STRING in state 68 resolved as shift
WARNING: shift/reduce conflict for STDOUT in state 68 resolved as shift
WARNING: shift/reduce conflict for DOT in state 68 resolved as shift
WARNING: shift/reduce conflict for SPACE in state 68 resolved as shift
WARNING: shift/reduce conflict for COMMENT_LINE in state 68 resolved as shift
WARNING: shift/reduce conflict for COMMENT_BLOCK in state 68 resolved as shift
WARNING: shift/reduce conflict for DROP in state 68 resolved as shift
WARNING: shift/reduce conflict for SWAP in state 68 resolved as shift
WARNING: shift/reduce conflict for ROT in state 68 resolved as shift
WARNING: shift/reduce conflict for OVER in state 68 resolved as shift
WARNING: shift/reduce conflict for CONCAT in state 68 resolved as shift
WARNING: shift/reduce conflict for CR in state 68 resolved as shift
WARNING: shift/reduce conflict for EMIT in state 68 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 68 resolved as shift
WARNING: shift/reduce conflict for KEY in state 68 resolved as shift
WARNING: shift/reduce conflict for SPACES in state 68 resolved as shift
WARNING: shift/reduce conflict for 2DUP in state 68 resolved as shift
WARNING: shift/reduce conflict for FUNC_BODY in state 68 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 68 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_CALL in state 68 resolved as shift
WARNING: shift/reduce conflict for VARIABLE_DEFENITION in state 68 resolved as shift
WARNING: shift/reduce conflict for VARIABLE_ASSIGNMENT in state 68 resolved as shift
WARNING: shift/reduce conflict for VARIABLE_FETCH in state 68 resolved as shift
WARNING: shift/reduce conflict for VARIABLE_PRINT in state 68 resolved as shift
WARNING: shift/reduce conflict for IF in state 68 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 68 resolved as shift
WARNING: shift/reduce conflict for THEN in state 68 resolved as shift
WARNING: shift/reduce conflict for DO in state 68 resolved as shift
WARNING: shift/reduce conflict for LOOP in state 68 resolved as shift
